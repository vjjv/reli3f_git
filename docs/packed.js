/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 37:
/***/ (function(module) {

!function(e,t){if(true)module.exports=t();else { var n, r; }}(this,(function(){return e={418:function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.i=function(e){return e},r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),o=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={splitValues:!1});var r,o=this;this.headersMap={},e&&("undefined"!=typeof Headers&&e instanceof Headers?n.getHeaderKeys(e).forEach((function(r){n.getHeaderValues(e,r).forEach((function(e){t.splitValues?o.append(r,n.splitHeaderValue(e)):o.append(r,e)}))})):"object"==typeof(r=e)&&"object"==typeof r.headersMap&&"function"==typeof r.forEach?e.forEach((function(e,t){o.append(e,t)})):"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,t){o.append(t,e)})):"string"==typeof e?this.appendFromString(e):"object"==typeof e&&Object.getOwnPropertyNames(e).forEach((function(t){var r=e[t];Array.isArray(r)?r.forEach((function(e){o.append(t,e)})):o.append(t,r)})))}return e.prototype.appendFromString=function(e){for(var t=e.split("\r\n"),r=0;r<t.length;r++){var n=t[r],o=n.indexOf(":");if(o>0){var s=n.substring(0,o).trim(),i=n.substring(o+1).trim();this.append(s,i)}}},e.prototype.delete=function(e,t){var r=n.normalizeName(e);if(void 0===t)delete this.headersMap[r];else{var o=this.headersMap[r];if(o){var s=o.indexOf(t);s>=0&&o.splice(s,1),0===o.length&&delete this.headersMap[r]}}},e.prototype.append=function(e,t){var r=this,o=n.normalizeName(e);Array.isArray(this.headersMap[o])||(this.headersMap[o]=[]),Array.isArray(t)?t.forEach((function(e){r.headersMap[o].push(n.normalizeValue(e))})):this.headersMap[o].push(n.normalizeValue(t))},e.prototype.set=function(e,t){var r=n.normalizeName(e);if(Array.isArray(t)){var o=[];t.forEach((function(e){o.push(n.normalizeValue(e))})),this.headersMap[r]=o}else this.headersMap[r]=[n.normalizeValue(t)]},e.prototype.has=function(e,t){var r=this.headersMap[n.normalizeName(e)];if(!Array.isArray(r))return!1;if(void 0!==t){var o=n.normalizeValue(t);return r.indexOf(o)>=0}return!0},e.prototype.get=function(e){var t=this.headersMap[n.normalizeName(e)];return void 0!==t?t.concat():[]},e.prototype.forEach=function(e){var t=this;Object.getOwnPropertyNames(this.headersMap).forEach((function(r){e(r,t.headersMap[r])}),this)},e.prototype.toHeaders=function(){if("undefined"!=typeof Headers){var e=new Headers;return this.forEach((function(t,r){r.forEach((function(r){e.append(t,r)}))})),e}throw new Error("Headers class is not defined")},e}();t.BrowserHeaders=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(0);t.BrowserHeaders=n.BrowserHeaders},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iterateHeaders=function(e,t){for(var r=e[Symbol.iterator](),n=r.next();!n.done;)t(n.value[0]),n=r.next()},t.iterateHeadersKeys=function(e,t){for(var r=e.keys(),n=r.next();!n.done;)t(n.value),n=r.next()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2);t.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()},t.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e},t.getHeaderValues=function(e,t){var r=e;if(r instanceof Headers&&r.getAll)return r.getAll(t);var n=r.get(t);return n&&"string"==typeof n?[n]:n},t.getHeaderKeys=function(e){var t=e,r={},o=[];return t.keys?n.iterateHeadersKeys(t,(function(e){r[e]||(r[e]=!0,o.push(e))})):t.forEach?t.forEach((function(e,t){r[t]||(r[t]=!0,o.push(t))})):n.iterateHeaders(t,(function(e){var t=e[0];r[t]||(r[t]=!0,o.push(t))})),o},t.splitHeaderValue=function(e){var t=[];return e.split(", ").forEach((function(e){e.split(",").forEach((function(e){t.push(e)}))})),t}}]))},617:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChunkParser=t.ChunkType=t.encodeASCII=t.decodeASCII=void 0;var n,o=r(65);function s(e){return 9===(t=e)||10===t||13===t||e>=32&&e<=126;var t}function i(e){for(var t=0;t!==e.length;++t)if(!s(e[t]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(e))}function a(e){return 128==(128&e.getUint8(0))}function u(e){return e.getUint32(1,!1)}function d(e,t,r){return e.byteLength-t>=r}function c(e,t,r){if(e.slice)return e.slice(t,r);var n=e.length;void 0!==r&&(n=r);for(var o=new Uint8Array(n-t),s=0,i=t;i<n;i++)o[s++]=e[i];return o}t.decodeASCII=i,t.encodeASCII=function(e){for(var t=new Uint8Array(e.length),r=0;r!==e.length;++r){var n=e.charCodeAt(r);if(!s(n))throw new Error("Metadata contains invalid ASCII");t[r]=n}return t},function(e){e[e.MESSAGE=1]="MESSAGE",e[e.TRAILERS=2]="TRAILERS"}(n=t.ChunkType||(t.ChunkType={}));var p=function(){function e(){this.buffer=null,this.position=0}return e.prototype.parse=function(e,t){if(0===e.length&&t)return[];var r,s=[];if(null==this.buffer)this.buffer=e,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=e,this.position=0;else{var p=this.buffer.byteLength-this.position,h=new Uint8Array(p+e.byteLength),f=c(this.buffer,this.position);h.set(f,0);var l=new Uint8Array(e);h.set(l,p),this.buffer=h,this.position=0}for(;;){if(!d(this.buffer,this.position,5))return s;var g=c(this.buffer,this.position,this.position+5),b=new DataView(g.buffer,g.byteOffset,g.byteLength),y=u(b);if(!d(this.buffer,this.position,5+y))return s;var v=c(this.buffer,this.position+5,this.position+5+y);if(this.position+=5+y,a(b))return s.push({chunkType:n.TRAILERS,trailers:(r=v,new o.Metadata(i(r)))}),s;s.push({chunkType:n.MESSAGE,data:v})}},e}();t.ChunkParser=p},8:function(e,t){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.httpStatusToCode=t.Code=void 0,function(e){e[e.OK=0]="OK",e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated"}(r=t.Code||(t.Code={})),t.httpStatusToCode=function(e){switch(e){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown}}},934:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.client=void 0;var n=r(65),o=r(617),s=r(8),i=r(346),a=r(57),u=r(882);t.client=function(e,t){return new d(e,t)};var d=function(){function e(e,t){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new o.ChunkParser,this.methodDefinition=e,this.props=t,this.createTransport()}return e.prototype.createTransport=function(){var e=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,t={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:e,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(t):this.transport=a.makeDefaultTransport(t)},e.prototype.onTransportHeaders=function(e,t){if(this.props.debug&&i.debug("onHeaders",e,t),this.closed)this.props.debug&&i.debug("grpc.onHeaders received after request was closed - ignoring");else if(0===t);else{this.responseHeaders=e,this.props.debug&&i.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var r=c(e);this.props.debug&&i.debug("onHeaders.gRPCStatus",r);var n=r&&r>=0?r:s.httpStatusToCode(t);this.props.debug&&i.debug("onHeaders.code",n);var o=e.get("grpc-message")||[];if(this.props.debug&&i.debug("onHeaders.gRPCMessage",o),this.rawOnHeaders(e),n!==s.Code.OK){var a=this.decodeGRPCStatus(o[0]);this.rawOnError(n,a,e)}}},e.prototype.onTransportChunk=function(e){var t=this;if(this.closed)this.props.debug&&i.debug("grpc.onChunk received after request was closed - ignoring");else{var r=[];try{r=this.parser.parse(e)}catch(e){return this.props.debug&&i.debug("onChunk.parsing error",e,e.message),void this.rawOnError(s.Code.Internal,"parsing error: "+e.message)}r.forEach((function(e){if(e.chunkType===o.ChunkType.MESSAGE){var r=t.methodDefinition.responseType.deserializeBinary(e.data);t.rawOnMessage(r)}else e.chunkType===o.ChunkType.TRAILERS&&(t.responseHeaders?(t.responseTrailers=new n.Metadata(e.trailers),t.props.debug&&i.debug("onChunk.trailers",t.responseTrailers)):(t.responseHeaders=new n.Metadata(e.trailers),t.rawOnHeaders(t.responseHeaders)))}))}},e.prototype.onTransportEnd=function(){if(this.props.debug&&i.debug("grpc.onEnd"),this.closed)this.props.debug&&i.debug("grpc.onEnd received after request was closed - ignoring");else if(void 0!==this.responseTrailers){var e=c(this.responseTrailers);if(null!==e){var t=this.responseTrailers.get("grpc-message"),r=this.decodeGRPCStatus(t[0]);this.rawOnEnd(e,r,this.responseTrailers)}else this.rawOnError(s.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(void 0===this.responseHeaders)return void this.rawOnError(s.Code.Unknown,"Response closed without headers");var n=c(this.responseHeaders),o=this.responseHeaders.get("grpc-message");if(this.props.debug&&i.debug("grpc.headers only response ",n,o),null===n)return void this.rawOnEnd(s.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var a=this.decodeGRPCStatus(o[0]);this.rawOnEnd(n,a,this.responseHeaders)}},e.prototype.decodeGRPCStatus=function(e){if(!e)return"";try{return decodeURIComponent(e)}catch(t){return e}},e.prototype.rawOnEnd=function(e,t,r){var n=this;this.props.debug&&i.debug("rawOnEnd",e,t,r),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(o){if(!n.closed)try{o(e,t,r)}catch(e){setTimeout((function(){throw e}),0)}})))},e.prototype.rawOnHeaders=function(e){this.props.debug&&i.debug("rawOnHeaders",e),this.completed||this.onHeadersCallbacks.forEach((function(t){try{t(e)}catch(e){setTimeout((function(){throw e}),0)}}))},e.prototype.rawOnError=function(e,t,r){var o=this;void 0===r&&(r=new n.Metadata),this.props.debug&&i.debug("rawOnError",e,t),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(n){if(!o.closed)try{n(e,t,r)}catch(e){setTimeout((function(){throw e}),0)}})))},e.prototype.rawOnMessage=function(e){var t=this;this.props.debug&&i.debug("rawOnMessage",e.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach((function(r){if(!t.closed)try{r(e)}catch(e){setTimeout((function(){throw e}),0)}}))},e.prototype.onHeaders=function(e){this.onHeadersCallbacks.push(e)},e.prototype.onMessage=function(e){this.onMessageCallbacks.push(e)},e.prototype.onEnd=function(e){this.onEndCallbacks.push(e)},e.prototype.start=function(e){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var t=new n.Metadata(e||{});t.set("content-type","application/grpc-web+proto"),t.set("x-grpc-web","1"),this.transport.start(t)},e.prototype.send=function(e){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var t=u.frameRequest(e);this.transport.sendMessage(t)},e.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},e.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&i.debug("request.abort aborting request"),this.transport.cancel()},e}();function c(e){var t=e.get("grpc-status")||[];if(t.length>0)try{var r=t[0];return parseInt(r,10)}catch(e){return null}return null}},346:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debug=void 0,t.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.debug?console.debug.apply(null,e):console.log.apply(null,e)}},607:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.grpc=void 0;var n,o=r(418),s=r(57),i=r(229),a=r(540),u=r(210),d=r(859),c=r(8),p=r(938),h=r(35),f=r(934);(n=t.grpc||(t.grpc={})).setDefaultTransport=s.setDefaultTransportFactory,n.CrossBrowserHttpTransport=d.CrossBrowserHttpTransport,n.FetchReadableStreamTransport=i.FetchReadableStreamTransport,n.XhrTransport=u.XhrTransport,n.WebsocketTransport=a.WebsocketTransport,n.Code=c.Code,n.Metadata=o.BrowserHeaders,n.client=function(e,t){return f.client(e,t)},n.invoke=p.invoke,n.unary=h.unary},938:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invoke=void 0;var n=r(934);t.invoke=function(e,t){if(e.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var r=n.client(e,{host:t.host,transport:t.transport,debug:t.debug});return t.onHeaders&&r.onHeaders(t.onHeaders),t.onMessage&&r.onMessage(t.onMessage),t.onEnd&&r.onEnd(t.onEnd),r.start(t.metadata),r.send(t.request),r.finishSend(),{close:function(){r.close()}}}},65:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var n=r(418);Object.defineProperty(t,"Metadata",{enumerable:!0,get:function(){return n.BrowserHeaders}})},57:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeDefaultTransport=t.setDefaultTransportFactory=void 0;var n=r(859),o=function(e){return n.CrossBrowserHttpTransport({withCredentials:!1})(e)};t.setDefaultTransportFactory=function(e){o=e},t.makeDefaultTransport=function(e){return o(e)}},229:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.detectFetchSupport=t.FetchReadableStreamTransport=void 0;var o=r(65),s=r(346);t.FetchReadableStreamTransport=function(e){return function(t){return function(e,t){return e.debug&&s.debug("fetchRequest",e),new i(e,t)}(t,e)}};var i=function(){function e(e,t){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=e,this.init=t}return e.prototype.pump=function(e,t){var r=this;if(this.reader=e,this.cancelled)return this.options.debug&&s.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch((function(e){r.options.debug&&s.debug("Fetch.pump.reader.cancel exception",e)}));this.reader.read().then((function(e){if(e.done)return r.options.onEnd(),t;r.options.onChunk(e.value),r.pump(r.reader,t)})).catch((function(e){r.cancelled?r.options.debug&&s.debug("Fetch.catch - request cancelled"):(r.cancelled=!0,r.options.debug&&s.debug("Fetch.catch",e.message),r.options.onEnd(e))}))},e.prototype.send=function(e){var t=this;fetch(this.options.url,n(n({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:e,signal:this.controller&&this.controller.signal})).then((function(e){if(t.options.debug&&s.debug("Fetch.response",e),t.options.onHeaders(new o.Metadata(e.headers),e.status),!e.body)return e;t.pump(e.body.getReader(),e)})).catch((function(e){t.cancelled?t.options.debug&&s.debug("Fetch.catch - request cancelled"):(t.cancelled=!0,t.options.debug&&s.debug("Fetch.catch",e.message),t.options.onEnd(e))}))},e.prototype.sendMessage=function(e){this.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){this.metadata=e},e.prototype.cancel=function(){var e=this;this.cancelled?this.options.debug&&s.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&s.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&s.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&s.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch((function(t){e.options.debug&&s.debug("Fetch.cancel.reader.cancel exception",t)}))):this.options.debug&&s.debug("Fetch.cancel before reader"))},e}();t.detectFetchSupport=function(){return"undefined"!=typeof Response&&Response.prototype.hasOwnProperty("body")&&"function"==typeof Headers}},859:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CrossBrowserHttpTransport=void 0;var n=r(229),o=r(210);t.CrossBrowserHttpTransport=function(e){if(n.detectFetchSupport()){var t={credentials:e.withCredentials?"include":"same-origin"};return n.FetchReadableStreamTransport(t)}return o.XhrTransport({withCredentials:e.withCredentials})}},210:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.stringToArrayBuffer=t.MozChunkedArrayBufferXHR=t.XHR=t.XhrTransport=void 0;var s=r(65),i=r(346),a=r(849);t.XhrTransport=function(e){return function(t){if(a.detectMozXHRSupport())return new d(t,e);if(a.detectXHROverrideMimeTypeSupport())return new u(t,e);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var u=function(){function e(e,t){this.options=e,this.init=t}return e.prototype.onProgressEvent=function(){this.options.debug&&i.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var e=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var t=p(e);this.options.onChunk(t)},e.prototype.onLoadEvent=function(){this.options.debug&&i.debug("XHR.onLoadEvent"),this.options.onEnd()},e.prototype.onStateChange=function(){this.options.debug&&i.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new s.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},e.prototype.sendMessage=function(e){this.xhr.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){var t=this;this.metadata=e;var r=new XMLHttpRequest;this.xhr=r,r.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach((function(e,t){r.setRequestHeader(e,t.join(", "))})),r.withCredentials=Boolean(this.init.withCredentials),r.addEventListener("readystatechange",this.onStateChange.bind(this)),r.addEventListener("progress",this.onProgressEvent.bind(this)),r.addEventListener("loadend",this.onLoadEvent.bind(this)),r.addEventListener("error",(function(e){t.options.debug&&i.debug("XHR.error",e),t.options.onEnd(e.error)}))},e.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},e.prototype.cancel=function(){this.options.debug&&i.debug("XHR.abort"),this.xhr.abort()},e}();t.XHR=u;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.configureXhr=function(){this.options.debug&&i.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},t.prototype.onProgressEvent=function(){var e=this.xhr.response;this.options.debug&&i.debug("MozXHR.onProgressEvent: ",new Uint8Array(e)),this.options.onChunk(new Uint8Array(e))},t}(u);function c(e,t){var r=e.charCodeAt(t);if(r>=55296&&r<=56319){var n=e.charCodeAt(t+1);n>=56320&&n<=57343&&(r=65536+(r-55296<<10)+(n-56320))}return r}function p(e){for(var t=new Uint8Array(e.length),r=0,n=0;n<e.length;n++){var o=String.prototype.codePointAt?e.codePointAt(n):c(e,n);t[r++]=255&o}return t}t.MozChunkedArrayBufferXHR=d,t.stringToArrayBuffer=p},849:function(e,t){"use strict";var r;function n(){if(void 0!==r)return r;if(XMLHttpRequest){r=new XMLHttpRequest;try{r.open("GET","https://localhost")}catch(e){}}return r}function o(e){var t=n();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.detectXHROverrideMimeTypeSupport=t.detectMozXHRSupport=t.xhrSupportsResponseType=void 0,t.xhrSupportsResponseType=o,t.detectMozXHRSupport=function(){return"undefined"!=typeof XMLHttpRequest&&o("moz-chunked-arraybuffer")},t.detectXHROverrideMimeTypeSupport=function(){return"undefined"!=typeof XMLHttpRequest&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebsocketTransport=void 0;var n,o=r(346),s=r(617);!function(e){e[e.FINISH_SEND=1]="FINISH_SEND"}(n||(n={}));var i=new Uint8Array([1]);t.WebsocketTransport=function(){return function(e){return function(e){e.debug&&o.debug("websocketRequest",e);var t,r=function(e){if("https://"===e.substr(0,8))return"wss://"+e.substr(8);if("http://"===e.substr(0,7))return"ws://"+e.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(e.url),a=[];function u(e){if(e===n.FINISH_SEND)t.send(i);else{var r=e,o=new Int8Array(r.byteLength+1);o.set(new Uint8Array([0])),o.set(r,1),t.send(o)}}return{sendMessage:function(e){t&&t.readyState!==t.CONNECTING?u(e):a.push(e)},finishSend:function(){t&&t.readyState!==t.CONNECTING?u(n.FINISH_SEND):a.push(n.FINISH_SEND)},start:function(n){(t=new WebSocket(r,["grpc-websockets"])).binaryType="arraybuffer",t.onopen=function(){var r;e.debug&&o.debug("websocketRequest.onopen"),t.send((r="",n.forEach((function(e,t){r+=e+": "+t.join(", ")+"\r\n"})),s.encodeASCII(r))),a.forEach((function(e){u(e)}))},t.onclose=function(t){e.debug&&o.debug("websocketRequest.onclose",t),e.onEnd()},t.onerror=function(t){e.debug&&o.debug("websocketRequest.onerror",t)},t.onmessage=function(t){e.onChunk(new Uint8Array(t.data))}},cancel:function(){e.debug&&o.debug("websocket.abort"),t.close()}}}(e)}}},35:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unary=void 0;var n=r(65),o=r(934);t.unary=function(e,t){if(e.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(e.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var r=null,s=null,i=o.client(e,{host:t.host,transport:t.transport,debug:t.debug});return i.onHeaders((function(e){r=e})),i.onMessage((function(e){s=e})),i.onEnd((function(e,o,i){t.onEnd({status:e,statusMessage:o,headers:r||new n.Metadata,message:s,trailers:i})})),i.start(t.metadata),i.send(t.request),i.finishSend(),{close:function(){i.close()}}}},882:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.frameRequest=void 0,t.frameRequest=function(e){var t=e.serializeBinary(),r=new ArrayBuffer(t.byteLength+5);return new DataView(r,1,4).setUint32(0,t.length,!1),new Uint8Array(r,5).set(t),new Uint8Array(r)}}},t={},function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(607);var e,t}));

/***/ }),

/***/ 84:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_536__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_536__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_536__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_536__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__nested_webpack_require_536__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__nested_webpack_require_536__.d = function(exports, name, getter) {
/******/ 		if(!__nested_webpack_require_536__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nested_webpack_require_536__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__nested_webpack_require_536__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__nested_webpack_require_536__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_536__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_536__(__nested_webpack_require_536__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __nested_webpack_require_2975__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __nested_webpack_require_2975__(3);
function isBrowserHeaders(arg) {
    return typeof arg === "object" && typeof arg.headersMap === "object" && typeof arg.forEach === "function";
}
var BrowserHeaders = (function () {
    function BrowserHeaders(init, options) {
        if (init === void 0) { init = {}; }
        if (options === void 0) { options = { splitValues: false }; }
        var _this = this;
        this.headersMap = {};
        if (init) {
            if (typeof Headers !== "undefined" && init instanceof Headers) {
                var keys = util_1.getHeaderKeys(init);
                keys.forEach(function (key) {
                    var values = util_1.getHeaderValues(init, key);
                    values.forEach(function (value) {
                        if (options.splitValues) {
                            _this.append(key, util_1.splitHeaderValue(value));
                        }
                        else {
                            _this.append(key, value);
                        }
                    });
                });
            }
            else if (isBrowserHeaders(init)) {
                init.forEach(function (key, values) {
                    _this.append(key, values);
                });
            }
            else if (typeof Map !== "undefined" && init instanceof Map) {
                var asMap = init;
                asMap.forEach(function (value, key) {
                    _this.append(key, value);
                });
            }
            else if (typeof init === "string") {
                this.appendFromString(init);
            }
            else if (typeof init === "object") {
                Object.getOwnPropertyNames(init).forEach(function (key) {
                    var asObject = init;
                    var values = asObject[key];
                    if (Array.isArray(values)) {
                        values.forEach(function (value) {
                            _this.append(key, value);
                        });
                    }
                    else {
                        _this.append(key, values);
                    }
                });
            }
        }
    }
    BrowserHeaders.prototype.appendFromString = function (str) {
        var pairs = str.split("\r\n");
        for (var i = 0; i < pairs.length; i++) {
            var p = pairs[i];
            var index = p.indexOf(":");
            if (index > 0) {
                var key = p.substring(0, index).trim();
                var value = p.substring(index + 1).trim();
                this.append(key, value);
            }
        }
    };
    BrowserHeaders.prototype.delete = function (key, value) {
        var normalizedKey = util_1.normalizeName(key);
        if (value === undefined) {
            delete this.headersMap[normalizedKey];
        }
        else {
            var existing = this.headersMap[normalizedKey];
            if (existing) {
                var index = existing.indexOf(value);
                if (index >= 0) {
                    existing.splice(index, 1);
                }
                if (existing.length === 0) {
                    delete this.headersMap[normalizedKey];
                }
            }
        }
    };
    BrowserHeaders.prototype.append = function (key, value) {
        var _this = this;
        var normalizedKey = util_1.normalizeName(key);
        if (!Array.isArray(this.headersMap[normalizedKey])) {
            this.headersMap[normalizedKey] = [];
        }
        if (Array.isArray(value)) {
            value.forEach(function (arrayValue) {
                _this.headersMap[normalizedKey].push(util_1.normalizeValue(arrayValue));
            });
        }
        else {
            this.headersMap[normalizedKey].push(util_1.normalizeValue(value));
        }
    };
    BrowserHeaders.prototype.set = function (key, value) {
        var normalizedKey = util_1.normalizeName(key);
        if (Array.isArray(value)) {
            var normalized_1 = [];
            value.forEach(function (arrayValue) {
                normalized_1.push(util_1.normalizeValue(arrayValue));
            });
            this.headersMap[normalizedKey] = normalized_1;
        }
        else {
            this.headersMap[normalizedKey] = [util_1.normalizeValue(value)];
        }
    };
    BrowserHeaders.prototype.has = function (key, value) {
        var keyArray = this.headersMap[util_1.normalizeName(key)];
        var keyExists = Array.isArray(keyArray);
        if (!keyExists) {
            return false;
        }
        if (value !== undefined) {
            var normalizedValue = util_1.normalizeValue(value);
            return keyArray.indexOf(normalizedValue) >= 0;
        }
        else {
            return true;
        }
    };
    BrowserHeaders.prototype.get = function (key) {
        var values = this.headersMap[util_1.normalizeName(key)];
        if (values !== undefined) {
            return values.concat();
        }
        return [];
    };
    BrowserHeaders.prototype.forEach = function (callback) {
        var _this = this;
        Object.getOwnPropertyNames(this.headersMap)
            .forEach(function (key) {
            callback(key, _this.headersMap[key]);
        }, this);
    };
    BrowserHeaders.prototype.toHeaders = function () {
        if (typeof Headers !== "undefined") {
            var headers_1 = new Headers();
            this.forEach(function (key, values) {
                values.forEach(function (value) {
                    headers_1.append(key, value);
                });
            });
            return headers_1;
        }
        else {
            throw new Error("Headers class is not defined");
        }
    };
    return BrowserHeaders;
}());
exports.BrowserHeaders = BrowserHeaders;


/***/ }),
/* 1 */
/***/ (function(module, exports, __nested_webpack_require_8924__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BrowserHeaders_1 = __nested_webpack_require_8924__(0);
exports.BrowserHeaders = BrowserHeaders_1.BrowserHeaders;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function iterateHeaders(headers, callback) {
    var iterator = headers[Symbol.iterator]();
    var entry = iterator.next();
    while (!entry.done) {
        callback(entry.value[0]);
        entry = iterator.next();
    }
}
exports.iterateHeaders = iterateHeaders;
function iterateHeadersKeys(headers, callback) {
    var iterator = headers.keys();
    var entry = iterator.next();
    while (!entry.done) {
        callback(entry.value);
        entry = iterator.next();
    }
}
exports.iterateHeadersKeys = iterateHeadersKeys;


/***/ }),
/* 3 */
/***/ (function(module, exports, __nested_webpack_require_9870__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var iterateHeaders_1 = __nested_webpack_require_9870__(2);
function normalizeName(name) {
    if (typeof name !== "string") {
        name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError("Invalid character in header field name");
    }
    return name.toLowerCase();
}
exports.normalizeName = normalizeName;
function normalizeValue(value) {
    if (typeof value !== "string") {
        value = String(value);
    }
    return value;
}
exports.normalizeValue = normalizeValue;
function getHeaderValues(headersAsNative, key) {
    var headers = toWindowHeaders(headersAsNative);
    if (headers instanceof Headers && headers.getAll) {
        return headers.getAll(key);
    }
    var getValue = headers.get(key);
    if (getValue && typeof getValue === "string") {
        return [getValue];
    }
    return getValue;
}
exports.getHeaderValues = getHeaderValues;
function toWindowHeaders(headersAsNative) {
    return headersAsNative;
}
function getHeaderKeys(headersAsNative) {
    var headers = toWindowHeaders(headersAsNative);
    var asMap = {};
    var keys = [];
    if (headers.keys) {
        iterateHeaders_1.iterateHeadersKeys(headers, function (key) {
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    else if (headers.forEach) {
        headers.forEach(function (_, key) {
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    else {
        iterateHeaders_1.iterateHeaders(headers, function (entry) {
            var key = entry[0];
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    return keys;
}
exports.getHeaderKeys = getHeaderKeys;
function splitHeaderValue(str) {
    var values = [];
    var commaSpaceValues = str.split(", ");
    commaSpaceValues.forEach(function (commaSpaceValue) {
        commaSpaceValue.split(",").forEach(function (commaValue) {
            values.push(commaValue);
        });
    });
    return values;
}
exports.splitHeaderValue = splitHeaderValue;


/***/ })
/******/ ]);
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

;// CONCATENATED MODULE: ./node_modules/@snap/ts-inject/dist/esm/Injectable.js
function Injectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[Injectable] Received invalid arguments. The factory function must be either the second " + "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Injectable] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (...args) => fn(...args);
    factory.token = token;
    factory.dependencies = dependencies;
    return factory;
}
function InjectableCompat(token, dependencies, fn) {
    return Injectable(token, dependencies, fn);
}
function ClassInjectable(token, cls) {
    const factory = (...args) => new cls(...args);
    factory.token = token;
    factory.dependencies = cls.dependencies;
    return factory;
}
function ConcatInjectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[ConcatInjectable] Received invalid arguments. The factory function must be either the second " +
            "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Injectable] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (array, ...args) => {
        return array.concat(fn(...args));
    };
    factory.token = token;
    factory.dependencies = [token, ...dependencies];
    return factory;
}
//# sourceMappingURL=Injectable.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/copyDefinedProperties.js
function copyDefinedProperties(obj) {
    return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value !== undefined));
}
//# sourceMappingURL=copyDefinedProperties.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/configurationOverrides.js
const windowFieldPrefix = "__snap_camkit_override__";
const configPropertiesToOverride = [
    "wasmEndpointOverride",
    "logger",
    "logLevel",
    "userAgentFlavor",
];
configPropertiesToOverride.forEach((fieldToOverride) => {
    defineWindowField(fieldToOverride);
});
function defineWindowField(propertyToOverride) {
    if (typeof window === "undefined")
        return;
    Object.defineProperty(window, `${windowFieldPrefix}${propertyToOverride}`, {
        get() {
            var _a;
            return (_a = getConfigurationOverrides()) === null || _a === void 0 ? void 0 : _a[propertyToOverride];
        },
        set(value) {
            const storedOverrides = Object.assign(Object.assign({}, getConfigurationOverrides()), { [propertyToOverride]: value });
            if (Object.values(storedOverrides).every((value) => typeof value === "undefined")) {
                sessionStorage.removeItem(windowFieldPrefix);
            }
            else {
                sessionStorage.setItem(windowFieldPrefix, JSON.stringify(storedOverrides));
            }
        },
        enumerable: false,
        configurable: true,
    });
}
function getConfigurationOverrides() {
    if (!sessionStorage)
        return undefined;
    const overridesString = sessionStorage.getItem(windowFieldPrefix);
    return overridesString && JSON.parse(overridesString);
}
//# sourceMappingURL=configurationOverrides.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/configuration.js



const defaultConfiguration = {
    lensPerformance: { cluster: 0, benchmarks: [], webglRendererInfo: "unknown" },
    logger: "noop",
    logLevel: "info",
    shouldUseWorker: true,
    apiHostname: "camera-kit-api.snapar.com",
    userAgentFlavor: "release",
    fonts: [],
};
const configurationToken = "configuration";
function isHandledAppleDevice() {
    return (/iPad|iPhone|iPod/.test(navigator.platform) ||
        (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 2));
}
const createCameraKitConfigurationFactory = (configuration) => {
    const overrides = getConfigurationOverrides();
    if (overrides) {
        console.warn("Configuration overrides applied", overrides);
    }
    return Injectable(configurationToken, () => {
        const safeConfig = Object.assign(Object.assign({}, configuration), { lensPerformance: configuration.lensPerformance instanceof Promise
                ?
                    configuration.lensPerformance.catch(() => defaultConfiguration.lensPerformance)
                : configuration.lensPerformance });
        return Object.assign(Object.assign(Object.assign(Object.assign({}, defaultConfiguration), { shouldUseWorker: isHandledAppleDevice() ? false : defaultConfiguration.shouldUseWorker }), copyDefinedProperties(safeConfig)), copyDefinedProperties(overrides !== null && overrides !== void 0 ? overrides : {}));
    });
};
//# sourceMappingURL=configuration.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/namedErrors.js
function cleanErrorStack(stack) {
    const [first, _, ...rest] = stack.split("\n");
    return [first, ...rest].join("\n");
}
function namedError(name) {
    return (message, cause) => {
        const error = new Error(message, { cause });
        error.name = name;
        error.stack = error.stack && cleanErrorStack(error.stack);
        return error;
    };
}
const legalError = namedError("LegalError");
const lensContentValidationError = namedError("LensContentValidationError");
const lensError = namedError("LensError");
const cameraKitSourceError = namedError("CameraKitSourceError");
const lensImagePickerError = namedError("LensImagePickerError");
const cacheKeyNotFoundError = namedError("CacheKeyNotFoundError");
const configurationError = namedError("ConfigurationError");
const namedErrors_webGLError = namedError("WebGLError");
const namedErrors_benchmarkError = namedError("BenchmarkError");
const platformNotSupportedError = namedError("PlatformNotSupportedError");
const lensExecutionError = namedError("LensExecutionError");
const lensAbortError = namedError("LensAbortError");
const persistentStoreError = namedError("PersistentStoreError");
const lensAssetError = namedError("LensAssetError");
const bootstrapError = namedError("BootstrapError");
const argumentValidationError = namedError("ArgumentValidationError");
//# sourceMappingURL=namedErrors.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/benchmark/webglUtils.js

const webGLEntityCreationError = (name) => webGLError(`Could not create ${name}.`);
function webglUtils_createProgram(gl, vertexSource, fragmentSource) {
    const vertexShader = createShader(gl, vertexSource, gl.VERTEX_SHADER);
    const fragmentShader = createShader(gl, fragmentSource, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!program)
        throw webGLEntityCreationError("WebGLProgram");
    gl.attachShader(program, vertexShader);
    gl.deleteShader(vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.deleteShader(fragmentShader);
    gl.linkProgram(program);
    const success = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!success) {
        const message = gl.getProgramInfoLog(program);
        gl.deleteProgram(program);
        throw webGLError(`WebGLProgram linking failed with status: ${message}.`);
    }
    return program;
}
function createShader(gl, source, type) {
    const shader = gl.createShader(type);
    if (!shader)
        throw webGLEntityCreationError(`WebGLShader (type ${type})`);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!success) {
        const message = gl.getShaderInfoLog(shader);
        gl.deleteShader(shader);
        throw webGLError(`WebGLShader (type ${type}) compilation failed with status: ${message}.`);
    }
    return shader;
}
function webglUtils_createTexture(gl, width, height) {
    const texture = gl.createTexture();
    if (!texture)
        throw webGLEntityCreationError("WebGLTexture");
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    return texture;
}
function webglUtils_createFramebuffer(gl, texture) {
    const framebuffer = gl.createFramebuffer();
    if (!framebuffer)
        throw webGLEntityCreationError("WebGLFramebuffer");
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    return framebuffer;
}
function webglUtils_setUniform1i(gl, program, name, data) {
    gl.uniform1i(gl.getUniformLocation(program, name), data);
}
function webglUtils_setUniform4f(gl, program, name, data) {
    gl.uniform4f(gl.getUniformLocation(program, name), ...data);
}
function webglUtils_promiseSync(gl) {
    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (!sync)
        throw webGLEntityCreationError("WebGLSync");
    gl.flush();
    return new Promise((resolve, reject) => {
        const waitForSync = () => {
            const glEnum = gl.clientWaitSync(sync, 0, 0);
            switch (glEnum) {
                case gl.TIMEOUT_EXPIRED:
                    setTimeout(waitForSync);
                    return;
                case gl.WAIT_FAILED:
                    gl.deleteSync(sync);
                    return reject();
                case gl.ALREADY_SIGNALED:
                case gl.CONDITION_SATISFIED:
                    gl.deleteSync(sync);
                    return resolve();
            }
        };
        waitForSync();
    });
}
//# sourceMappingURL=webglUtils.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/benchmark/benchmarkGflops.js


const vertexSource = (/* unused pure expression or super */ null && (`#version 300 es

precision mediump float;
precision mediump int;

in vec2 pos;

void main() {
    gl_Position = vec4(pos, 0.0, 1.0);
}
`));
const fragmentSource = (/* unused pure expression or super */ null && (`#version 300 es

precision mediump float;
precision mediump int;

uniform int LOOP_COUNT;
uniform vec4 v0;
uniform vec4 v1;
uniform vec4 v2;

out vec4 fragColor;

#define REPEAT_2(x) x; x
#define REPEAT_4(x) REPEAT_2(x); REPEAT_2(x)
#define REPEAT_8(x) REPEAT_4(x); REPEAT_4(x)
#define REPEAT_16(x) REPEAT_8(x); REPEAT_8(x)
#define REPEAT_32(x) REPEAT_16(x); REPEAT_16(x)

void main() {
    vec4 r = v2;
    for (int i = 0; i < LOOP_COUNT; i++) {
        REPEAT_32(r = r * v1 + v0);
    }
    fragColor = r;
}
`));
const width = 1024;
const height = 1024;
const budgetMs = 300;
const maxLoopCount = 1000;
function prepareBenchmark(gl) {
    const texture = createTexture(gl, width, height);
    const framebuffer = createFramebuffer(gl, texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    const buffer = gl.createBuffer();
    if (!buffer) {
        throw new Error("Failed to create WebGLBuffer.");
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, 1, -1, -1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    gl.viewport(0, 0, width, height);
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    const program = createProgram(gl, vertexSource, fragmentSource);
    gl.useProgram(program);
    const posLocation = gl.getAttribLocation(program, "pos");
    gl.enableVertexAttribArray(posLocation);
    gl.vertexAttribPointer(posLocation, 2, gl.FLOAT, false, 0, 0);
    setUniform4f(gl, program, "v0", [1.15, 1.23, 1.47, 1.84]);
    setUniform4f(gl, program, "v1", [1.65, 1.22, 1.69, 1.04]);
    setUniform4f(gl, program, "v2", [1.05, 1.3, 1.55, 1.23]);
    return {
        program,
        cleanupBenchmark: () => {
            gl.deleteProgram(program);
            gl.deleteBuffer(buffer);
            gl.deleteFramebuffer(framebuffer);
            gl.deleteTexture(texture);
        },
    };
}
function runBenchmark(gl, program) {
    return __awaiter(this, void 0, void 0, function* () {
        yield promiseSync(gl);
        const start = performance.now();
        const flops = [];
        let loopCount = 20;
        while (true) {
            setUniform1i(gl, program, "LOOP_COUNT", loopCount);
            const iterationStart = performance.now();
            gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);
            yield promiseSync(gl);
            const iterationEnd = performance.now();
            const duration = iterationEnd - iterationStart;
            flops.push(loopCount / duration);
            const remainingBudgetMs = budgetMs - (iterationEnd - start);
            if (remainingBudgetMs < 0)
                break;
            if (loopCount < maxLoopCount) {
                loopCount += remainingBudgetMs < duration ? 10 : (0.6 * loopCount * remainingBudgetMs) / duration;
            }
        }
        const maxFlops = Math.max(...flops) * (8 * 32) * width * height;
        return maxFlops / 1e6;
    });
}
const benchmarkGflops_gflopsClusterCenters = new Map([
    [34, 1],
    [134, 2],
    [385, 3],
    [783, 4],
    [1484, 5],
    [2313, 6],
]);
function benchmarkGflops_benchmarkGflops(gl) {
    return __awaiter(this, void 0, void 0, function* () {
        const { program, cleanupBenchmark } = prepareBenchmark(gl);
        const gflops = yield runBenchmark(gl, program);
        cleanupBenchmark();
        return { name: "gflops", value: gflops };
    });
}
//# sourceMappingURL=benchmarkGflops.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/benchmark/estimateLensPerformanceCluster.js



const findNearest = (n, arr) => arr.reduce((a, b) => (Math.abs(a - n) <= Math.abs(b - n) ? a : b));
const webglContextAttributes = {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    powerPreference: "high-performance",
};
function estimateLensPerformance() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const canvas = document.createElement("canvas");
        const gl = canvas.getContext("webgl2", webglContextAttributes);
        if (!gl)
            throw benchmarkError("WebGL2 is required to compute performance, but it is not supported.");
        const debugInfo = gl.getExtension("WEBGL_debug_renderer_info");
        const webglRendererInfo = debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : "unknown";
        const gflops = yield benchmarkGflops(gl);
        const nearestGflopsClusterCenter = findNearest(gflops.value, Array.from(gflopsClusterCenters.keys()));
        const gflopsCluster = (_a = gflopsClusterCenters.get(nearestGflopsClusterCenter)) !== null && _a !== void 0 ? _a : 0;
        return {
            cluster: gflopsCluster,
            benchmarks: [gflops],
            webglRendererInfo,
        };
    });
}
//# sourceMappingURL=estimateLensPerformanceCluster.js.map
;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.mjs
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function tslib_es6_awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ const tslib_es6 = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter: tslib_es6_awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});

;// CONCATENATED MODULE: ./node_modules/@snap/ts-inject/dist/esm/memoize.js
function isMemoized(fn) {
    return typeof fn === "function" && typeof fn.delegate === "function";
}
function memoize(thisArg, delegate) {
    let memo;
    const memoized = (...args) => {
        if (typeof memo !== "undefined")
            return memo;
        memo = delegate.apply(memoized.thisArg, args);
        return memo;
    };
    memoized.delegate = delegate;
    memoized.thisArg = thisArg;
    return memoized;
}
//# sourceMappingURL=memoize.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/ts-inject/dist/esm/entries.js
const entries = (o) => Object.entries(o);
const fromEntries = (entries) => Object.fromEntries(entries);
//# sourceMappingURL=entries.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/ts-inject/dist/esm/PartialContainer.js



class PartialContainer_PartialContainer {
    injectables;
    constructor(injectables) {
        this.injectables = injectables;
    }
    provides(fn) {
        return new PartialContainer_PartialContainer({ ...this.injectables, [fn.token]: fn });
    }
    providesValue = (token, value) => this.provides(Injectable(token, [], () => value));
    providesClass = (token, cls) => this.provides(ClassInjectable(token, cls));
    getFactories(parent) {
        let factories = undefined;
        return (factories = Object.fromEntries(entries(this.injectables).map(([token, fn]) => [
            token,
            memoize(parent, () => fn(...fn.dependencies.map((t) => {
                return t === token
                    ? parent.get(t)
                    : factories[t]
                        ? factories[t]()
                        : parent.get(t);
            }))),
        ])));
    }
    getTokens() {
        return Object.keys(this.injectables);
    }
}
//# sourceMappingURL=PartialContainer.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/ts-inject/dist/esm/Container.js




const CONTAINER = "$container";
class Container {
    static provides(fnOrContainer) {
        if (fnOrContainer instanceof PartialContainer_PartialContainer)
            return new Container({}).provides(fnOrContainer);
        if (fnOrContainer instanceof Container)
            return new Container({}).provides(fnOrContainer);
        return new Container({}).provides(fnOrContainer);
    }
    static providesValue(token, value) {
        return new Container({}).providesValue(token, value);
    }
    static fromObject(services) {
        return entries(services).reduce((container, [token, value]) => container.providesValue(token, value), new Container({}));
    }
    factories;
    constructor(factories) {
        const memoizedFactories = {};
        for (const k in factories) {
            const fn = factories[k];
            if (isMemoized(fn)) {
                memoizedFactories[k] = fn;
                fn.thisArg = this;
            }
            else {
                memoizedFactories[k] = memoize(this, fn);
            }
        }
        this.factories = memoizedFactories;
    }
    copy(scopedServices) {
        const factories = { ...this.factories };
        (scopedServices || []).forEach((token) => {
            factories[token] = this.factories[token].delegate;
        });
        return new Container(factories);
    }
    get(token) {
        if (token === CONTAINER)
            return this;
        const factory = this.factories[token];
        if (!factory) {
            throw new Error(`[Container::get] Could not find Service for Token "${String(token)}". This should've caused a ` +
                "compile-time error. If the Token is 'undefined', check all your calls to the Injectable " +
                "function. Make sure you define dependencies using string literals or string constants that are " +
                "definitely initialized before the call to Injectable.");
        }
        return factory();
    }
    run(fnOrContainer) {
        if (fnOrContainer instanceof PartialContainer_PartialContainer) {
            const runnableContainer = this.provides(fnOrContainer);
            for (const token of fnOrContainer.getTokens()) {
                runnableContainer.get(token);
            }
        }
        else {
            this.provides(fnOrContainer).get(fnOrContainer.token);
        }
        return this;
    }
    provides(fnOrContainer) {
        if (fnOrContainer instanceof PartialContainer_PartialContainer || fnOrContainer instanceof Container) {
            const factories = fnOrContainer instanceof PartialContainer_PartialContainer ? fnOrContainer.getFactories(this) : fnOrContainer.factories;
            return new Container({
                ...this.factories,
                ...factories,
            });
        }
        return this.providesService(fnOrContainer);
    }
    providesClass = (token, cls) => this.providesService(ClassInjectable(token, cls));
    providesValue = (token, value) => this.providesService(Injectable(token, [], () => value));
    appendValue = (token, value) => this.providesService(ConcatInjectable(token, () => value));
    appendClass = (token, cls) => this.providesService(ConcatInjectable(token, () => this.providesClass(token, cls).get(token)));
    append = (fn) => this.providesService(ConcatInjectable(fn.token, () => this.providesService(fn).get(fn.token)));
    providesService(fn) {
        const token = fn.token;
        const dependencies = fn.dependencies;
        const getFromParent = dependencies.indexOf(token) === -1 ? undefined : () => this.get(token);
        const factory = memoize(this, function () {
            return fn(...dependencies.map((t) => (t === token ? getFromParent() : this.get(t))));
        });
        const factories = { ...this.factories, [token]: factory };
        return new Container(factories);
    }
}
//# sourceMappingURL=Container.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/arrayBufferParsingHandler.js

const createArrayBufferParsingHandler = () => (next) => (req, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const response = yield next(req, metadata);
    let buffer;
    try {
        buffer = yield response.arrayBuffer();
    }
    catch (_) {
        buffer = new ArrayBuffer(0);
    }
    return [buffer, response];
});
//# sourceMappingURL=arrayBufferParsingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/HandlerChainBuilder.js
class HandlerChainBuilder {
    constructor(inner) {
        this.inner = inner;
    }
    get handler() {
        return this.inner;
    }
    map(outer) {
        const outerHandler = (req, metadata) => {
            var _a;
            const abort = new AbortController();
            const signal = abort.signal;
            let innerCompleted = false;
            const maybeAbort = () => {
                var _a;
                if (signal.aborted || innerCompleted)
                    return;
                abort.abort();
                (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", maybeAbort);
            };
            (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", maybeAbort);
            const innerHandler = new Proxy(this.inner, {
                apply: (target, thisArg, args) => {
                    const [req, metadata] = args;
                    if (metadata === null || metadata === void 0 ? void 0 : metadata.isSideEffect)
                        innerCompleted = true;
                    const abortListeners = [];
                    signal.addEventListener = new Proxy(signal.addEventListener, {
                        apply: (target, thisArg, args) => {
                            abortListeners.push(args[1]);
                            return Reflect.apply(target, thisArg, args);
                        },
                    });
                    const cleanupAndMarkComplete = () => {
                        var _a;
                        (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", maybeAbort);
                        abortListeners.forEach((listener) => signal.removeEventListener("abort", listener));
                        innerCompleted = true;
                    };
                    const innerResponse = Reflect.apply(target, thisArg, [
                        req,
                        Object.assign(Object.assign({}, metadata), { isSideEffect: false, signal }),
                    ]);
                    innerResponse.catch(() => { }).then(cleanupAndMarkComplete);
                    return innerResponse;
                },
            });
            const outerResponse = outer(innerHandler)(req, metadata);
            outerResponse.catch(() => { }).then(maybeAbort);
            return outerResponse;
        };
        return new HandlerChainBuilder(outerHandler);
    }
}
//# sourceMappingURL=HandlerChainBuilder.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=isFunction.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
//# sourceMappingURL=createErrorClass.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js

var UnsubscriptionError = createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
//# sourceMappingURL=arrRemove.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscription.js




var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof UnsubscriptionError) {
                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());

var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
}
function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/config.js
var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js

var timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function (handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js


function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function () {
        var onUnhandledError = config.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
//# sourceMappingURL=reportUnhandledError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() { }
//# sourceMappingURL=noop.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
//# sourceMappingURL=NotificationFactories.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js

var context = null;
function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
            context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}
//# sourceMappingURL=errorContext.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscriber.js









var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            handleStoppedNotification(errorNotification(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(Subscription));

var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));

function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
        captureError(error);
    }
    else {
        reportUnhandledError(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: noop,
    error: defaultErrorHandler,
    complete: noop,
};
//# sourceMappingURL=Subscriber.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity_identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/pipe.js

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity_identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Observable.js







var Observable_Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
}
//# sourceMappingURL=Observable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js

var ObjectUnsubscribedError = createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subject.js






var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function () {
            _this.currentObservers = null;
            arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_Observable));

var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/entries.js
const entries_entries = (o) => Object.entries(o);
const entries_fromEntries = (entries) => Object.fromEntries(entries);
//# sourceMappingURL=entries.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/logger/logger.js


let logEntriesSubject = new Subject();
const logLevelMap = {
    error: 3,
    warn: 2,
    log: 1,
    info: 1,
    debug: 0,
};
function resetLogger() {
    return (logEntriesSubject = new Subject());
}
function getLogger(module) {
    return entries_entries(logLevelMap).reduce((logger, [level]) => {
        logger[level] = (...messages) => {
            logEntriesSubject.next({
                time: new Date(),
                module,
                level,
                messages,
            });
        };
        return logger;
    }, {});
}
//# sourceMappingURL=logger.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/retryingHandler.js



const logger = getLogger("retryingHandler");
const logRetry = (responseOrError, sleep) => {
    logger.warn(`Retrying handler got failed response:`, responseOrError, `Waited ${sleep} millis, attempting retry now.`);
};
const sleep = (millis) => new Promise((resolve) => setTimeout(resolve, millis));
const randomInRange = (min, max) => Math.round(Math.random() * (max - min) + min);
const defaultOptions = {
    backoffMultiple: 3,
    baseSleep: 500,
    maxSleep: 5 * 1000,
    maxRetries: 10,
    retryPredicate: (responseOrError) => (responseOrError instanceof Response ? !responseOrError.ok : true),
};
function ensureClonedRequest(input) {
    return input instanceof Request ? input.clone() : input;
}
const createRetryingHandler = (options = {}) => {
    const definedOptions = copyDefinedProperties(options);
    const { backoffMultiple, baseSleep, maxSleep, maxRetries, retryPredicate } = Object.assign(Object.assign({}, defaultOptions), definedOptions);
    let retryCount = -1;
    const jitterSleep = (priorSleep) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        const nextSleep = Math.min(maxSleep, randomInRange(baseSleep, priorSleep * backoffMultiple));
        yield sleep(nextSleep);
        return nextSleep;
    });
    const makeRequestAttempt = (next, priorSleep = baseSleep) => (req, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        retryCount++;
        try {
            const response = yield next(ensureClonedRequest(req), metadata);
            if (retryCount < maxRetries && retryPredicate(response, retryCount)) {
                const nextSleep = yield jitterSleep(priorSleep);
                if ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.aborted)
                    return response;
                logRetry(response, nextSleep);
                return makeRequestAttempt(next, nextSleep)(req, metadata);
            }
            return response;
        }
        catch (error) {
            if (!(error instanceof Error)) {
                throw new Error("Invalid type caught by retrying handler. Handlers may only throw Errors. Got " +
                    `${JSON.stringify(error)}`);
            }
            if (error.name === "AbortError")
                throw error;
            if (retryCount < maxRetries && retryPredicate(error, retryCount)) {
                const nextSleep = yield jitterSleep(priorSleep);
                if ((_b = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _b === void 0 ? void 0 : _b.aborted)
                    throw error;
                logRetry(error, nextSleep);
                return makeRequestAttempt(next, nextSleep)(req, metadata);
            }
            throw error;
        }
    });
    return (next) => makeRequestAttempt(next);
};
//# sourceMappingURL=retryingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/noCorsRetryingFetchHandler.js



const noCorsRetryingFetchHandler_logger = getLogger("noCorsRetryingFetchHandler");
const noCorsRetryingFetchHandler_logRetry = (error) => {
    noCorsRetryingFetchHandler_logger.warn(`NoCorsRetrying handler got failed response:`, error, `Retrying request with {mode: "no-cors"}.`);
};
const createNoCorsRetryingFetchHandler = () => {
    const noCorsRequests = new Map();
    return (next) => (input, init = {}) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        let requestKey = typeof input === "string" ? input : input.url;
        try {
            requestKey = new URL(requestKey, location.origin).host;
        }
        catch (_) {
        }
        try {
            return yield next(ensureClonedRequest(input), init);
        }
        catch (error) {
            if (error instanceof Error && error.name === "AbortError")
                throw error;
            noCorsRetryingFetchHandler_logRetry(error);
            const noCorsRequest = (_a = noCorsRequests.get(requestKey)) !== null && _a !== void 0 ? _a : next(ensureClonedRequest(input), Object.assign(Object.assign({}, init), { mode: "no-cors" }));
            noCorsRequests.set(requestKey, noCorsRequest);
            yield noCorsRequest;
            noCorsRequests.delete(requestKey);
            return next(ensureClonedRequest(input), init);
        }
    });
};
//# sourceMappingURL=noCorsRetryingFetchHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/typeguards.js
function typeguards_isString(value) {
    return typeof value === "string";
}
function isSafeString(value) {
    return typeguards_isString(value) && encodeURIComponent(value) === value;
}
function isNumber(value) {
    return typeof value === "number";
}
function isValidNumber(value) {
    return isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);
}
function isValidNumberOrUndefined(value) {
    return isUndefined(value) || isValidNumber(value);
}
function isArrayOfType(elementTypeGuard, value) {
    return Array.isArray(value) && value.every((id) => elementTypeGuard(id));
}
function isSafeStringArray(value) {
    return isArrayOfType(isSafeString, value);
}
function isStringOrUndefined(value) {
    return isUndefined(value) || typeguards_isString(value);
}
function isArrayBuffer(value) {
    return value instanceof ArrayBuffer;
}
function isTypedArray(value) {
    return value instanceof Object.getPrototypeOf(Uint8Array);
}
function isUndefined(value) {
    return typeof value === "undefined";
}
function isEmptyString(value) {
    return value === "";
}
function isUndefinedOrEmptyString(value) {
    return isUndefined(value) || isEmptyString(value);
}
function typeguards_isRecord(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
}
function typeguards_isFunction(value) {
    return typeof value === "function";
}
function isDate(value) {
    return value instanceof Date;
}
function isDateOrUndefined(value) {
    return isUndefined(value) || isDate(value);
}
function isValidDate(value) {
    return isDate(value) && !isNaN(value.getTime());
}
function typeguards_predicateRecordValues(predicate) {
    return (value) => {
        for (const v of Object.values(value))
            if (!predicate(v))
                return false;
        return true;
    };
}
function isEmptyOrSafeUrl(urlString) {
    if (!urlString)
        return true;
    try {
        const url = new URL(urlString);
        return url.protocol === "https:" || url.protocol === "http:";
    }
    catch (_a) {
        return false;
    }
}
function isPromise(value) {
    if (!value)
        return false;
    const maybePromise = value;
    return typeof maybePromise.then === "function" && typeof maybePromise.catch === "function";
}
//# sourceMappingURL=typeguards.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/timeoutHandler.js


const timeoutHandler_sleep = (millis) => new Promise((resolve) => setTimeout(resolve, millis));
const timeoutHandler_defaultOptions = {
    createError: (request) => {
        const destination = typeguards_isString(request)
            ? `for ${request}`
            : request instanceof Request
                ? `for ${request.url}`
                : "";
        return new Error(`Request ${destination} timed out by client timeout handler.`);
    },
    timeout: 30 * 1000,
};
const createTimeoutHandler = (options = {}) => {
    const definedOptions = copyDefinedProperties(options);
    const { createError, timeout } = Object.assign(Object.assign({}, timeoutHandler_defaultOptions), definedOptions);
    return (next) => (req, meta) => Promise.race([next(req, meta), timeoutHandler_sleep(timeout).then(() => Promise.reject(createError(req, meta)))]);
};
//# sourceMappingURL=timeoutHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/defaultFetchHandler.js





const defaultFetchHandlerFactory = Injectable("defaultFetchHandler", () => {
    return (new HandlerChainBuilder(fetch)
        .map(createTimeoutHandler({ timeout: 20 * 1000 }))
        .map(createNoCorsRetryingFetchHandler())
        .map(createRetryingHandler({
        maxRetries: 3,
        retryPredicate: (responseOrError) => {
            if (responseOrError instanceof Response) {
                if (responseOrError.ok)
                    return false;
                if (responseOrError.status % 400 < 100)
                    return false;
            }
            return true;
        },
    })).handler);
});
//# sourceMappingURL=defaultFetchHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/utils.js
function withRequestPriority(request, lowPriority) {
    if (lowPriority) {
        return Object.assign(Object.assign({}, request), { priority: "low" });
    }
    return request;
}
//# sourceMappingURL=utils.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/assets/remoteMediaAssetLoaderFactory.js






const remoteMediaAssetLoaderFactory = Injectable("remoteMediaAssetLoader", [defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return function remoteMediaAssetLoader({ assetDescriptor: { assetId }, lowPriority }) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [buffer, response] = yield handler(assetId, withRequestPriority({ cache: "force-cache" }, lowPriority));
            if (!response.ok)
                throw response;
            return buffer;
        });
    };
});
//# sourceMappingURL=remoteMediaAssetLoaderFactory.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js

var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
    _super(this);
    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
}; });
//# sourceMappingURL=EmptyError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/firstValueFrom.js


function firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new SafeSubscriber({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new EmptyError());
                }
            },
        });
        source.subscribe(subscriber);
    });
}
//# sourceMappingURL=firstValueFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js

function isPromise_isPromise(value) {
    return isFunction(value === null || value === void 0 ? void 0 : value.then);
}
//# sourceMappingURL=isPromise.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js


function isInteropObservable(input) {
    return isFunction(input[observable]);
}
//# sourceMappingURL=isInteropObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js

function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
//# sourceMappingURL=isAsyncIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
//# sourceMappingURL=throwUnobservableError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator_iterator = getSymbolIterator();
//# sourceMappingURL=iterator.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js


function isIterable(input) {
    return isFunction(input === null || input === void 0 ? void 0 : input[iterator_iterator]);
}
//# sourceMappingURL=isIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js


function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    if (false) {}
                    return [4, __await(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, __await(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, __await(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
//# sourceMappingURL=isReadableStreamLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js












function innerFrom_innerFrom(input) {
    if (input instanceof Observable_Observable) {
        return input;
    }
    if (input != null) {
        if (isInteropObservable(input)) {
            return fromInteropObservable(input);
        }
        if (isArrayLike(input)) {
            return fromArrayLike(input);
        }
        if (isPromise_isPromise(input)) {
            return fromPromise(input);
        }
        if (isAsyncIterable(input)) {
            return fromAsyncIterable(input);
        }
        if (isIterable(input)) {
            return fromIterable(input);
        }
        if (isReadableStreamLike(input)) {
            return fromReadableStreamLike(input);
        }
    }
    throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
    return new Observable_Observable(function (subscriber) {
        var obs = obj[observable]();
        if (isFunction(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function fromArrayLike(array) {
    return new Observable_Observable(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new Observable_Observable(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, reportUnhandledError);
    });
}
function fromIterable(iterable) {
    return new Observable_Observable(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new Observable_Observable(function (subscriber) {
        innerFrom_process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function innerFrom_process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return tslib_es6_awaiter(this, void 0, void 0, function () {
        var value, e_2_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = __asyncValues(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}
//# sourceMappingURL=innerFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js


function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = (function (_super) {
    __extends(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(Subscriber));

//# sourceMappingURL=OperatorSubscriber.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/lift.js

function hasLift(source) {
    return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function (source) {
        if (hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}
//# sourceMappingURL=lift.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/catchError.js



function catchError(selector) {
    return operate(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
            handledResult = innerFrom_innerFrom(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}
//# sourceMappingURL=catchError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/map.js


function map(project, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}
//# sourceMappingURL=map.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}
//# sourceMappingURL=executeSchedule.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js



function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom_innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}
//# sourceMappingURL=mergeInternals.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js





function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (isFunction(resultSelector)) {
        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom_innerFrom(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
}
//# sourceMappingURL=mergeMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/observeOn.js



function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}
//# sourceMappingURL=observeOn.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js

function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}
//# sourceMappingURL=subscribeOn.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js



function scheduleObservable(input, scheduler) {
    return innerFrom_innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
//# sourceMappingURL=scheduleObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js



function schedulePromise(input, scheduler) {
    return innerFrom_innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
//# sourceMappingURL=schedulePromise.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js

function scheduleArray(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}
//# sourceMappingURL=scheduleArray.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js




function scheduleIterable(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var iterator;
        executeSchedule(subscriber, scheduler, function () {
            iterator = input[iterator_iterator]();
            executeSchedule(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
    });
}
//# sourceMappingURL=scheduleIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js


function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable_Observable(function (subscriber) {
        executeSchedule(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            executeSchedule(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}
//# sourceMappingURL=scheduleAsyncIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js


function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}
//# sourceMappingURL=scheduleReadableStreamLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js













function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        if (isArrayLike(input)) {
            return scheduleArray(input, scheduler);
        }
        if (isPromise_isPromise(input)) {
            return schedulePromise(input, scheduler);
        }
        if (isAsyncIterable(input)) {
            return scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable(input)) {
            return scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike(input)) {
            return scheduleReadableStreamLike(input, scheduler);
        }
    }
    throw createInvalidObservableTypeError(input);
}
//# sourceMappingURL=scheduled.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/from.js


function from_from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom_innerFrom(input);
}
//# sourceMappingURL=from.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
    now: function () {
        return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=dateTimestampProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js



var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(Subject));

//# sourceMappingURL=ReplaySubject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/share.js





function share(options) {
    if (options === void 0) { options = {}; }
    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
    return function (wrapperSource) {
        var connection;
        var resetConnection;
        var subject;
        var refCount = 0;
        var hasCompleted = false;
        var hasErrored = false;
        var cancelReset = function () {
            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
            resetConnection = undefined;
        };
        var reset = function () {
            cancelReset();
            connection = subject = undefined;
            hasCompleted = hasErrored = false;
        };
        var resetAndUnsubscribe = function () {
            var conn = connection;
            reset();
            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
        };
        return operate(function (source, subscriber) {
            refCount++;
            if (!hasErrored && !hasCompleted) {
                cancelReset();
            }
            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
            subscriber.add(function () {
                refCount--;
                if (refCount === 0 && !hasErrored && !hasCompleted) {
                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                }
            });
            dest.subscribe(subscriber);
            if (!connection &&
                refCount > 0) {
                connection = new SafeSubscriber({
                    next: function (value) { return dest.next(value); },
                    error: function (err) {
                        hasErrored = true;
                        cancelReset();
                        resetConnection = handleReset(reset, resetOnError, err);
                        dest.error(err);
                    },
                    complete: function () {
                        hasCompleted = true;
                        cancelReset();
                        resetConnection = handleReset(reset, resetOnComplete);
                        dest.complete();
                    },
                });
                innerFrom_innerFrom(source).subscribe(connection);
            }
        })(wrapperSource);
    };
}
function handleReset(reset, on) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (on === true) {
        reset();
        return;
    }
    if (on === false) {
        return;
    }
    var onSubscriber = new SafeSubscriber({
        next: function () {
            onSubscriber.unsubscribe();
            reset();
        },
    });
    return innerFrom_innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);
}
//# sourceMappingURL=share.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js


function shareReplay(configOrBufferSize, windowTime, scheduler) {
    var _a, _b, _c;
    var bufferSize;
    var refCount = false;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        (_a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler);
    }
    else {
        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);
    }
    return share({
        connector: function () { return new ReplaySubject(bufferSize, windowTime, scheduler); },
        resetOnError: true,
        resetOnComplete: false,
        resetOnRefCountZero: refCount,
    });
}
//# sourceMappingURL=shareReplay.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/empty.js

var EMPTY = new Observable_Observable(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/take.js



function take(count) {
    return count <= 0
        ?
            function () { return EMPTY; }
        : operate(function (source, subscriber) {
            var seen = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}
//# sourceMappingURL=take.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/namespace.js
const protobufPackage = "snapchat.cdp.cof";
var Namespace;
(function (Namespace) {
    Namespace[Namespace["DEFAULT"] = 0] = "DEFAULT";
    Namespace[Namespace["LENS_CORE"] = 64] = "LENS_CORE";
    Namespace[Namespace["CAMERA_KIT_CORE"] = 65] = "CAMERA_KIT_CORE";
    Namespace[Namespace["LENS_CORE_CONFIG"] = 143] = "LENS_CORE_CONFIG";
    Namespace[Namespace["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Namespace || (Namespace = {}));
//# sourceMappingURL=namespace.js.map
;// CONCATENATED MODULE: ./node_modules/@bufbuild/protobuf/dist/esm/wire/varint.js
// Copyright 2008 Google Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Code generated by the Protocol Buffer compiler is owned by the owner
// of the input file used when generating it.  This code is not
// standalone and requires a support library to be linked with it.  This
// support library is itself covered by the above license.
/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */
/**
 * Read a 64 bit varint as two JS numbers.
 *
 * Returns tuple:
 * [0]: low bits
 * [1]: high bits
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175
 */
function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
        let b = this.buf[this.pos++];
        lowBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    let middleByte = this.buf[this.pos++];
    // last four bits of the first 32 bit number
    lowBits |= (middleByte & 0x0f) << 28;
    // 3 upper bits are part of the next 32 bit number
    highBits = (middleByte & 0x70) >> 4;
    if ((middleByte & 0x80) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
        let b = this.buf[this.pos++];
        highBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    throw new Error("invalid varint");
}
/**
 * Write a 64 bit varint, given as two JS numbers, to the given bytes array.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344
 */
function varint64write(lo, hi, bytes) {
    for (let i = 0; i < 28; i = i + 7) {
        const shift = lo >>> i;
        const hasNext = !(shift >>> 7 == 0 && hi == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);
    if (!hasMoreBits) {
        return;
    }
    for (let i = 3; i < 31; i = i + 7) {
        const shift = hi >>> i;
        const hasNext = !(shift >>> 7 == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    bytes.push((hi >>> 31) & 0x01);
}
// constants for binary math
const TWO_PWR_32_DBL = 0x100000000;
/**
 * Parse decimal string of 64 bit integer value as two JS numbers.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64FromString(dec) {
    // Check for minus sign.
    const minus = dec[0] === "-";
    if (minus) {
        dec = dec.slice(1);
    }
    // Work 6 decimal digits at a time, acting like we're converting base 1e6
    // digits to binary. This is safe to do with floating point math because
    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
        // Note: Number('') is 0.
        const digit1e6 = Number(dec.slice(begin, end));
        highBits *= base;
        lowBits = lowBits * base + digit1e6;
        // Carry bits from lowBits to
        if (lowBits >= TWO_PWR_32_DBL) {
            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);
            lowBits = lowBits % TWO_PWR_32_DBL;
        }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
}
/**
 * Losslessly converts a 64-bit signed integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    // If we're treating the input as a signed value and the high bit is set, do
    // a manual two's complement conversion before the decimal conversion.
    const negative = bits.hi & 0x80000000;
    if (negative) {
        bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
}
/**
 * Losslessly converts a 64-bit unsigned integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    // Skip the expensive conversion if the number is small enough to use the
    // built-in conversions.
    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with
    // highBits <= 0x1FFFFF can be safely expressed with a double and retain
    // integer precision.
    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.
    if (hi <= 0x1fffff) {
        return String(TWO_PWR_32_DBL * hi + lo);
    }
    // What this code is doing is essentially converting the input number from
    // base-2 to base-1e7, which allows us to represent the 64-bit range with
    // only 3 (very large) digits. Those digits are then trivial to convert to
    // a base-10 string.
    // The magic numbers used here are -
    // 2^24 = 16777216 = (1,6777216) in base-1e7.
    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.
    // Split 32:32 representation into 16:24:24 representation so our
    // intermediate digits don't overflow.
    const low = lo & 0xffffff;
    const mid = ((lo >>> 24) | (hi << 8)) & 0xffffff;
    const high = (hi >> 16) & 0xffff;
    // Assemble our three base-1e7 digits, ignoring carries. The maximum
    // value in a digit at this step is representable as a 48-bit integer, which
    // can be stored in a 64-bit floating point number.
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    // Apply carries from A to B and from B to C.
    const base = 10000000;
    if (digitA >= base) {
        digitB += Math.floor(digitA / base);
        digitA %= base;
    }
    if (digitB >= base) {
        digitC += Math.floor(digitB / base);
        digitB %= base;
    }
    // If digitC is 0, then we should have returned in the trivial code path
    // at the top for non-safe integers. Given this, we can assume both digitB
    // and digitA need leading zeros.
    return (digitC.toString() +
        decimalFrom1e7WithLeadingZeros(digitB) +
        decimalFrom1e7WithLeadingZeros(digitA));
}
function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
}
function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
}
/**
 * Returns two's compliment negation of input.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers
 */
function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
        lowBits = ~lowBits + 1;
    }
    else {
        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,
        // adding 1 to that, results in 0x100000000, which leaves
        // the low bits 0x0 and simply adds one to the high bits.
        highBits += 1;
    }
    return newBits(lowBits, highBits);
}
/**
 * Returns decimal representation of digit1e7 with leading zeros.
 */
const decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
};
/**
 * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144
 */
function varint32write(value, bytes) {
    if (value >= 0) {
        // write value as varint 32
        while (value > 0x7f) {
            bytes.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        bytes.push(value);
    }
    else {
        for (let i = 0; i < 9; i++) {
            bytes.push((value & 127) | 128);
            value = value >> 7;
        }
        bytes.push(1);
    }
}
/**
 * Read an unsigned 32 bit varint.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220
 */
function varint32read() {
    let b = this.buf[this.pos++];
    let result = b & 0x7f;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 7;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 14;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 21;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    // Extract only last 4 bits
    b = this.buf[this.pos++];
    result |= (b & 0x0f) << 28;
    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)
        b = this.buf[this.pos++];
    if ((b & 0x80) != 0)
        throw new Error("invalid varint");
    this.assertBounds();
    // Result can have 32 bits, convert it to unsigned
    return result >>> 0;
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Int64Support for the current environment.
 */
const protoInt64 = /*@__PURE__*/ makeInt64Support();
function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    // note that Safari 14 implements BigInt, but not the DataView methods
    const ok = typeof BigInt === "function" &&
        typeof dv.getBigInt64 === "function" &&
        typeof dv.getBigUint64 === "function" &&
        typeof dv.setBigInt64 === "function" &&
        typeof dv.setBigUint64 === "function" &&
        (typeof process != "object" ||
            typeof process.env != "object" ||
            process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
        const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
        return {
            zero: BigInt(0),
            supported: true,
            parse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > MAX || bi < MIN) {
                    throw new Error(`invalid int64: ${value}`);
                }
                return bi;
            },
            uParse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > UMAX || bi < UMIN) {
                    throw new Error(`invalid uint64: ${value}`);
                }
                return bi;
            },
            enc(value) {
                dv.setBigInt64(0, this.parse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            uEnc(value) {
                dv.setBigInt64(0, this.uParse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            dec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigInt64(0, true);
            },
            uDec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigUint64(0, true);
            },
        };
    }
    return {
        zero: "0",
        supported: false,
        parse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return value;
        },
        uParse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return value;
        },
        enc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return int64FromString(value);
        },
        uEnc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return int64FromString(value);
        },
        dec(lo, hi) {
            return int64ToString(lo, hi);
        },
        uDec(lo, hi) {
            return uInt64ToString(lo, hi);
        },
    };
}
function assertInt64String(value) {
    if (!/^-?[0-9]+$/.test(value)) {
        throw new Error("invalid int64: " + value);
    }
}
function assertUInt64String(value) {
    if (!/^[0-9]+$/.test(value)) {
        throw new Error("invalid uint64: " + value);
    }
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/protobuf/dist/esm/wire/text-encoding.js
// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
const symbol = Symbol.for("@bufbuild/protobuf/text-encoding");
/**
 * Protobuf-ES requires the Text Encoding API to convert UTF-8 from and to
 * binary. This WHATWG API is widely available, but it is not part of the
 * ECMAScript standard. On runtimes where it is not available, use this
 * function to provide your own implementation.
 *
 * Note that the Text Encoding API does not provide a way to validate UTF-8.
 * Our implementation falls back to use encodeURIComponent().
 */
function configureTextEncoding(textEncoding) {
    globalThis[symbol] = textEncoding;
}
function getTextEncoding() {
    if (globalThis[symbol] == undefined) {
        const te = new globalThis.TextEncoder();
        const td = new globalThis.TextDecoder();
        globalThis[symbol] = {
            encodeUtf8(text) {
                return te.encode(text);
            },
            decodeUtf8(bytes) {
                return td.decode(bytes);
            },
            checkUtf8(text) {
                try {
                    encodeURIComponent(text);
                    return true;
                }
                catch (e) {
                    return false;
                }
            },
        };
    }
    return globalThis[symbol];
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js
// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */
/**
 * Protobuf binary format wire types.
 *
 * A wire type provides just enough information to find the length of the
 * following value.
 *
 * See https://developers.google.com/protocol-buffers/docs/encoding#structure
 */
var WireType;
(function (WireType) {
    /**
     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum
     */
    WireType[WireType["Varint"] = 0] = "Varint";
    /**
     * Used for fixed64, sfixed64, double.
     * Always 8 bytes with little-endian byte order.
     */
    WireType[WireType["Bit64"] = 1] = "Bit64";
    /**
     * Used for string, bytes, embedded messages, packed repeated fields
     *
     * Only repeated numeric types (types which use the varint, 32-bit,
     * or 64-bit wire types) can be packed. In proto3, such fields are
     * packed by default.
     */
    WireType[WireType["LengthDelimited"] = 2] = "LengthDelimited";
    /**
     * Start of a tag-delimited aggregate, such as a proto2 group, or a message
     * in editions with message_encoding = DELIMITED.
     */
    WireType[WireType["StartGroup"] = 3] = "StartGroup";
    /**
     * End of a tag-delimited aggregate.
     */
    WireType[WireType["EndGroup"] = 4] = "EndGroup";
    /**
     * Used for fixed32, sfixed32, float.
     * Always 4 bytes with little-endian byte order.
     */
    WireType[WireType["Bit32"] = 5] = "Bit32";
})(WireType || (WireType = {}));
/**
 * Maximum value for a 32-bit floating point value (Protobuf FLOAT).
 */
const FLOAT32_MAX = 3.4028234663852886e38;
/**
 * Minimum value for a 32-bit floating point value (Protobuf FLOAT).
 */
const FLOAT32_MIN = -3.4028234663852886e38;
/**
 * Maximum value for an unsigned 32-bit integer (Protobuf UINT32, FIXED32).
 */
const UINT32_MAX = 0xffffffff;
/**
 * Maximum value for a signed 32-bit integer (Protobuf INT32, SFIXED32, SINT32).
 */
const INT32_MAX = 0x7fffffff;
/**
 * Minimum value for a signed 32-bit integer (Protobuf INT32, SFIXED32, SINT32).
 */
const INT32_MIN = -0x80000000;
class BinaryWriter {
    constructor(encodeUtf8 = getTextEncoding().encodeUtf8) {
        this.encodeUtf8 = encodeUtf8;
        /**
         * Previous fork states.
         */
        this.stack = [];
        this.chunks = [];
        this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf)); // flush the buffer
            this.buf = [];
        }
        let len = 0;
        for (let i = 0; i < this.chunks.length; i++)
            len += this.chunks[i].length;
        let bytes = new Uint8Array(len);
        let offset = 0;
        for (let i = 0; i < this.chunks.length; i++) {
            bytes.set(this.chunks[i], offset);
            offset += this.chunks[i].length;
        }
        this.chunks = [];
        return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
        // get chunk of fork
        let chunk = this.finish();
        // restore previous state
        let prev = this.stack.pop();
        if (!prev)
            throw new Error("invalid state, fork stack empty");
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        // write length of chunk as varint
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
        return this.uint32(((fieldNo << 3) | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
        assertUInt32(value);
        // write value as varint 32, inlined for speed
        while (value > 0x7f) {
            this.buf.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        this.buf.push(value);
        return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
        assertInt32(value);
        varint32write(value, this.buf);
        return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
        this.uint32(value.byteLength); // write length of chunk as varint
        return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
        let chunk = this.encodeUtf8(value);
        this.uint32(chunk.byteLength); // write length of chunk as varint
        return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
        assertFloat32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
        assertUInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
        assertInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
        assertInt32(value);
        // zigzag encode
        value = ((value << 1) ^ (value >> 31)) >>> 0;
        varint32write(value, this.buf);
        return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
        let tc = protoInt64.enc(value);
        varint64write(tc.lo, tc.hi, this.buf);
        return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
        let tc = protoInt64.enc(value), 
        // zigzag encode
        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;
        varint64write(lo, hi, this.buf);
        return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
        let tc = protoInt64.uEnc(value);
        varint64write(tc.lo, tc.hi, this.buf);
        return this;
    }
}
class BinaryReader {
    constructor(buf, decodeUtf8 = getTextEncoding().decodeUtf8) {
        this.decodeUtf8 = decodeUtf8;
        this.varint64 = varint64read; // dirty cast for `this`
        /**
         * Read a `uint32` field, an unsigned 32 bit varint.
         */
        this.uint32 = varint32read;
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
            throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
        return [fieldNo, wireType];
    }
    /**
     * Skip one element and return the skipped data.
     *
     * When skipping StartGroup, provide the tags field number to check for
     * matching field number in the EndGroup tag.
     */
    skip(wireType, fieldNo) {
        let start = this.pos;
        switch (wireType) {
            case WireType.Varint:
                while (this.buf[this.pos++] & 0x80) {
                    // ignore
                }
                break;
            // eslint-disable-next-line
            // @ts-expect-error TS7029: Fallthrough case in switch
            case WireType.Bit64:
                this.pos += 4;
            // eslint-disable-next-line no-fallthrough
            case WireType.Bit32:
                this.pos += 4;
                break;
            case WireType.LengthDelimited:
                let len = this.uint32();
                this.pos += len;
                break;
            case WireType.StartGroup:
                for (;;) {
                    const [fn, wt] = this.tag();
                    if (wt === WireType.EndGroup) {
                        if (fieldNo !== undefined && fn !== fieldNo) {
                            throw new Error("invalid end group tag");
                        }
                        break;
                    }
                    this.skip(wt, fn);
                }
                break;
            default:
                throw new Error("cant skip wire type " + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
        if (this.pos > this.len)
            throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
        return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
        let zze = this.uint32();
        // decode zigzag
        return (zze >>> 1) ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
        return protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
        return protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
        let [lo, hi] = this.varint64();
        // decode zig zag
        let s = -(lo & 1);
        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;
        hi = (hi >>> 1) ^ s;
        return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
        let [lo, hi] = this.varint64();
        return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
        return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
        return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
        return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
        return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
        return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
        return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
        let len = this.uint32(), start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
        return this.decodeUtf8(this.bytes());
    }
}
/**
 * Assert a valid signed protobuf 32-bit integer as a number or string.
 */
function assertInt32(arg) {
    if (typeof arg == "string") {
        arg = Number(arg);
    }
    else if (typeof arg != "number") {
        throw new Error("invalid int32: " + typeof arg);
    }
    if (!Number.isInteger(arg) ||
        arg > INT32_MAX ||
        arg < INT32_MIN)
        throw new Error("invalid int32: " + arg);
}
/**
 * Assert a valid unsigned protobuf 32-bit integer as a number or string.
 */
function assertUInt32(arg) {
    if (typeof arg == "string") {
        arg = Number(arg);
    }
    else if (typeof arg != "number") {
        throw new Error("invalid uint32: " + typeof arg);
    }
    if (!Number.isInteger(arg) ||
        arg > UINT32_MAX ||
        arg < 0)
        throw new Error("invalid uint32: " + arg);
}
/**
 * Assert a valid protobuf float value as a number or string.
 */
function assertFloat32(arg) {
    if (typeof arg == "string") {
        const o = arg;
        arg = Number(arg);
        if (isNaN(arg) && o !== "NaN") {
            throw new Error("invalid float32: " + o);
        }
    }
    else if (typeof arg != "number") {
        throw new Error("invalid float32: " + typeof arg);
    }
    if (Number.isFinite(arg) &&
        (arg > FLOAT32_MAX || arg < FLOAT32_MIN))
        throw new Error("invalid float32: " + arg);
}

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/google/protobuf/any.js

const any_protobufPackage = "google.protobuf";
function createBaseAny() {
    return { typeUrl: "", value: new Uint8Array(0) };
}
const Any = {
    encode(message, writer = new BinaryWriter()) {
        if (message.typeUrl !== "") {
            writer.uint32(10).string(message.typeUrl);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAny();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.typeUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Any.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAny();
        message.typeUrl = (_a = object.typeUrl) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=any.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/business_events.js

const business_events_protobufPackage = "com.snap.camerakit.v3";
var CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNSET"] = 0] = "CAMERA_KIT_FLAVOR_UNSET";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitFlavor || (CameraKitFlavor = {}));
var CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNSET"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitConnectivityType || (CameraKitConnectivityType = {}));
var CameraKitEnvironment;
(function (CameraKitEnvironment) {
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_UNSET"] = 0] = "CAMERA_KIT_ENVIRONMENT_UNSET";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_STAGING"] = 1] = "CAMERA_KIT_ENVIRONMENT_STAGING";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_PRODUCTION"] = 2] = "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
    CameraKitEnvironment[CameraKitEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitEnvironment || (CameraKitEnvironment = {}));
function createBaseExtensionEventBase() {
    return {
        extensionName: "",
        extensionVersion: "",
        deviceCluster: "0",
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        cameraKitEnvironment: 0,
    };
}
const ExtensionEventBase = {
    encode(message, writer = new BinaryWriter()) {
        if (message.extensionName !== "") {
            writer.uint32(10).string(message.extensionName);
        }
        if (message.extensionVersion !== "") {
            writer.uint32(18).string(message.extensionVersion);
        }
        if (message.deviceCluster !== "0") {
            writer.uint32(24).int64(message.deviceCluster);
        }
        if (message.cameraKitVersion !== "") {
            writer.uint32(34).string(message.cameraKitVersion);
        }
        if (message.lensCoreVersion !== "") {
            writer.uint32(42).string(message.lensCoreVersion);
        }
        if (message.deviceModel !== "") {
            writer.uint32(50).string(message.deviceModel);
        }
        if (message.cameraKitFlavor !== 0) {
            writer.uint32(56).int32(message.cameraKitFlavor);
        }
        if (message.appId !== "") {
            writer.uint32(66).string(message.appId);
        }
        if (message.deviceConnectivity !== 0) {
            writer.uint32(72).int32(message.deviceConnectivity);
        }
        if (message.sessionId !== "") {
            writer.uint32(82).string(message.sessionId);
        }
        if (message.cameraKitEnvironment !== 0) {
            writer.uint32(88).int32(message.cameraKitEnvironment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionEventBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.extensionName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extensionVersion = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.deviceCluster = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.cameraKitVersion = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lensCoreVersion = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.deviceModel = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.cameraKitFlavor = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.deviceConnectivity = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.cameraKitEnvironment = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExtensionEventBase.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseExtensionEventBase();
        message.extensionName = (_a = object.extensionName) !== null && _a !== void 0 ? _a : "";
        message.extensionVersion = (_b = object.extensionVersion) !== null && _b !== void 0 ? _b : "";
        message.deviceCluster = (_c = object.deviceCluster) !== null && _c !== void 0 ? _c : "0";
        message.cameraKitVersion = (_d = object.cameraKitVersion) !== null && _d !== void 0 ? _d : "";
        message.lensCoreVersion = (_e = object.lensCoreVersion) !== null && _e !== void 0 ? _e : "";
        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : "";
        message.cameraKitFlavor = (_g = object.cameraKitFlavor) !== null && _g !== void 0 ? _g : 0;
        message.appId = (_h = object.appId) !== null && _h !== void 0 ? _h : "";
        message.deviceConnectivity = (_j = object.deviceConnectivity) !== null && _j !== void 0 ? _j : 0;
        message.sessionId = (_k = object.sessionId) !== null && _k !== void 0 ? _k : "";
        message.cameraKitEnvironment = (_l = object.cameraKitEnvironment) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
//# sourceMappingURL=business_events.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/google/protobuf/timestamp.js

const timestamp_protobufPackage = "google.protobuf";
function createBaseTimestamp() {
    return { seconds: "0", nanos: 0 };
}
const Timestamp = {
    encode(message, writer = new BinaryWriter()) {
        if (message.seconds !== "0") {
            writer.uint32(8).int64(message.seconds);
        }
        if (message.nanos !== 0) {
            writer.uint32(16).int32(message.nanos);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestamp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.seconds = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nanos = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Timestamp.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTimestamp();
        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : "0";
        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
//# sourceMappingURL=timestamp.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/legal_prompt.js


const legal_prompt_protobufPackage = "com.snap.camerakit.v3";
var LegalDocument_Type;
(function (LegalDocument_Type) {
    LegalDocument_Type[LegalDocument_Type["UNSET"] = 0] = "UNSET";
    LegalDocument_Type[LegalDocument_Type["TERMS_OF_SERVICE"] = 1] = "TERMS_OF_SERVICE";
    LegalDocument_Type[LegalDocument_Type["PRIVACY_POLICY"] = 2] = "PRIVACY_POLICY";
    LegalDocument_Type[LegalDocument_Type["LEARN_MORE"] = 3] = "LEARN_MORE";
    LegalDocument_Type[LegalDocument_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LegalDocument_Type || (LegalDocument_Type = {}));
function createBaseLegalPrompt() {
    return { documents: [], disabled: false };
}
const LegalPrompt = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.documents) {
            LegalDocument.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.disabled !== false) {
            writer.uint32(16).bool(message.disabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegalPrompt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.documents.push(LegalDocument.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.disabled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LegalPrompt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLegalPrompt();
        message.documents = ((_a = object.documents) === null || _a === void 0 ? void 0 : _a.map((e) => LegalDocument.fromPartial(e))) || [];
        message.disabled = (_b = object.disabled) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseLegalDocument() {
    return { type: 0, webUrl: "", version: "", timestamp: undefined };
}
const LegalDocument = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.webUrl !== "") {
            writer.uint32(18).string(message.webUrl);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegalDocument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.webUrl = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LegalDocument.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseLegalDocument();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.webUrl = (_b = object.webUrl) !== null && _b !== void 0 ? _b : "";
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : "";
        message.timestamp = (_d = object.timestamp) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
//# sourceMappingURL=legal_prompt.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/lens.js


const lens_protobufPackage = "com.snap.camerakit.v3";
var Lens_CameraFacing;
(function (Lens_CameraFacing) {
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_UNSET"] = 0] = "CAMERA_FACING_UNSET";
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_FRONT"] = 1] = "CAMERA_FACING_FRONT";
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_BACK"] = 2] = "CAMERA_FACING_BACK";
    Lens_CameraFacing[Lens_CameraFacing["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Lens_CameraFacing || (Lens_CameraFacing = {}));
var LensAssetManifestItem_Type;
(function (LensAssetManifestItem_Type) {
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["DEVICE_DEPENDENT_ASSET_UNSET"] = 0] = "DEVICE_DEPENDENT_ASSET_UNSET";
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["ASSET"] = 1] = "ASSET";
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LensAssetManifestItem_Type || (LensAssetManifestItem_Type = {}));
var LensAssetManifestItem_RequestTiming;
(function (LensAssetManifestItem_RequestTiming) {
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["PRELOAD_UNSET"] = 0] = "PRELOAD_UNSET";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["ON_DEMAND"] = 1] = "ON_DEMAND";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["REQUIRED"] = 2] = "REQUIRED";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LensAssetManifestItem_RequestTiming || (LensAssetManifestItem_RequestTiming = {}));
function createBaseLens() {
    return {
        id: "",
        name: "",
        vendorData: {},
        content: undefined,
        isThirdParty: false,
        cameraFacingPreference: 0,
        featureMetadata: [],
        lensCreator: undefined,
        scannable: undefined,
    };
}
const Lens = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        Object.entries(message.vendorData).forEach(([key, value]) => {
            Lens_VendorDataEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.content !== undefined) {
            Content.encode(message.content, writer.uint32(34).fork()).join();
        }
        if (message.isThirdParty !== false) {
            writer.uint32(40).bool(message.isThirdParty);
        }
        if (message.cameraFacingPreference !== 0) {
            writer.uint32(48).int32(message.cameraFacingPreference);
        }
        for (const v of message.featureMetadata) {
            Any.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.lensCreator !== undefined) {
            LensCreator.encode(message.lensCreator, writer.uint32(66).fork()).join();
        }
        if (message.scannable !== undefined) {
            Scannable.encode(message.scannable, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = Lens_VendorDataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.vendorData[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.content = Content.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isThirdParty = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.cameraFacingPreference = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.featureMetadata.push(Any.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lensCreator = LensCreator.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.scannable = Scannable.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Lens.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseLens();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.vendorData = Object.entries((_c = object.vendorData) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.content = (object.content !== undefined && object.content !== null)
            ? Content.fromPartial(object.content)
            : undefined;
        message.isThirdParty = (_d = object.isThirdParty) !== null && _d !== void 0 ? _d : false;
        message.cameraFacingPreference = (_e = object.cameraFacingPreference) !== null && _e !== void 0 ? _e : 0;
        message.featureMetadata = ((_f = object.featureMetadata) === null || _f === void 0 ? void 0 : _f.map((e) => Any.fromPartial(e))) || [];
        message.lensCreator = (object.lensCreator !== undefined && object.lensCreator !== null)
            ? LensCreator.fromPartial(object.lensCreator)
            : undefined;
        message.scannable = (object.scannable !== undefined && object.scannable !== null)
            ? Scannable.fromPartial(object.scannable)
            : undefined;
        return message;
    },
};
function createBaseLens_VendorDataEntry() {
    return { key: "", value: "" };
}
const Lens_VendorDataEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens_VendorDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Lens_VendorDataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLens_VendorDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseContent() {
    return {
        lnsUrl: "",
        lnsSha256: "",
        iconUrl: "",
        preview: undefined,
        assetManifest: [],
        defaultHintId: "",
        hintTranslations: {},
        lnsUrlBolt: "",
        iconUrlBolt: "",
    };
}
const Content = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lnsUrl !== "") {
            writer.uint32(10).string(message.lnsUrl);
        }
        if (message.lnsSha256 !== "") {
            writer.uint32(18).string(message.lnsSha256);
        }
        if (message.iconUrl !== "") {
            writer.uint32(26).string(message.iconUrl);
        }
        if (message.preview !== undefined) {
            Preview.encode(message.preview, writer.uint32(34).fork()).join();
        }
        for (const v of message.assetManifest) {
            LensAssetManifestItem.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.defaultHintId !== "") {
            writer.uint32(50).string(message.defaultHintId);
        }
        Object.entries(message.hintTranslations).forEach(([key, value]) => {
            Content_HintTranslationsEntry.encode({ key: key, value }, writer.uint32(58).fork()).join();
        });
        if (message.lnsUrlBolt !== "") {
            writer.uint32(66).string(message.lnsUrlBolt);
        }
        if (message.iconUrlBolt !== "") {
            writer.uint32(74).string(message.iconUrlBolt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lnsUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lnsSha256 = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.preview = Preview.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.assetManifest.push(LensAssetManifestItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.defaultHintId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = Content_HintTranslationsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.hintTranslations[entry7.key] = entry7.value;
                    }
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lnsUrlBolt = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.iconUrlBolt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Content.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseContent();
        message.lnsUrl = (_a = object.lnsUrl) !== null && _a !== void 0 ? _a : "";
        message.lnsSha256 = (_b = object.lnsSha256) !== null && _b !== void 0 ? _b : "";
        message.iconUrl = (_c = object.iconUrl) !== null && _c !== void 0 ? _c : "";
        message.preview = (object.preview !== undefined && object.preview !== null)
            ? Preview.fromPartial(object.preview)
            : undefined;
        message.assetManifest = ((_d = object.assetManifest) === null || _d === void 0 ? void 0 : _d.map((e) => LensAssetManifestItem.fromPartial(e))) || [];
        message.defaultHintId = (_e = object.defaultHintId) !== null && _e !== void 0 ? _e : "";
        message.hintTranslations = Object.entries((_f = object.hintTranslations) !== null && _f !== void 0 ? _f : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.lnsUrlBolt = (_g = object.lnsUrlBolt) !== null && _g !== void 0 ? _g : "";
        message.iconUrlBolt = (_h = object.iconUrlBolt) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseContent_HintTranslationsEntry() {
    return { key: "", value: "" };
}
const Content_HintTranslationsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent_HintTranslationsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Content_HintTranslationsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseContent_HintTranslationsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLensAssetManifestItem() {
    return { type: 0, id: "", requestTiming: 0, assetUrl: "", assetChecksum: "" };
}
const LensAssetManifestItem = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.requestTiming !== 0) {
            writer.uint32(24).int32(message.requestTiming);
        }
        if (message.assetUrl !== "") {
            writer.uint32(34).string(message.assetUrl);
        }
        if (message.assetChecksum !== "") {
            writer.uint32(42).string(message.assetChecksum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensAssetManifestItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requestTiming = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.assetUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.assetChecksum = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LensAssetManifestItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseLensAssetManifestItem();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.requestTiming = (_c = object.requestTiming) !== null && _c !== void 0 ? _c : 0;
        message.assetUrl = (_d = object.assetUrl) !== null && _d !== void 0 ? _d : "";
        message.assetChecksum = (_e = object.assetChecksum) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBasePreview() {
    return { imageUrl: "", imageSequenceSize: 0, imageSequenceWebpUrlPattern: "" };
}
const Preview = {
    encode(message, writer = new BinaryWriter()) {
        if (message.imageUrl !== "") {
            writer.uint32(10).string(message.imageUrl);
        }
        if (message.imageSequenceSize !== 0) {
            writer.uint32(16).int32(message.imageSequenceSize);
        }
        if (message.imageSequenceWebpUrlPattern !== "") {
            writer.uint32(26).string(message.imageSequenceWebpUrlPattern);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreview();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.imageSequenceSize = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.imageSequenceWebpUrlPattern = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Preview.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePreview();
        message.imageUrl = (_a = object.imageUrl) !== null && _a !== void 0 ? _a : "";
        message.imageSequenceSize = (_b = object.imageSequenceSize) !== null && _b !== void 0 ? _b : 0;
        message.imageSequenceWebpUrlPattern = (_c = object.imageSequenceWebpUrlPattern) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseLensCreator() {
    return { displayName: "" };
}
const LensCreator = {
    encode(message, writer = new BinaryWriter()) {
        if (message.displayName !== "") {
            writer.uint32(10).string(message.displayName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensCreator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LensCreator.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLensCreator();
        message.displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseScannable() {
    return { snapcodeImageUrl: "", snapcodeDeeplink: "" };
}
const Scannable = {
    encode(message, writer = new BinaryWriter()) {
        if (message.snapcodeImageUrl !== "") {
            writer.uint32(10).string(message.snapcodeImageUrl);
        }
        if (message.snapcodeDeeplink !== "") {
            writer.uint32(18).string(message.snapcodeDeeplink);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScannable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.snapcodeImageUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.snapcodeDeeplink = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Scannable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseScannable();
        message.snapcodeImageUrl = (_a = object.snapcodeImageUrl) !== null && _a !== void 0 ? _a : "";
        message.snapcodeDeeplink = (_b = object.snapcodeDeeplink) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
//# sourceMappingURL=lens.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/operational_metrics.js


const operational_metrics_protobufPackage = "com.snap.camerakit.v3";
function createBaseOperationalMetric() {
    return { name: "", timestamp: undefined, metric: undefined };
}
const OperationalMetric = {
    encode(message, writer = new BinaryWriter()) {
        var _a;
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(operational_metrics_toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
        }
        switch ((_a = message.metric) === null || _a === void 0 ? void 0 : _a.$case) {
            case "count":
                writer.uint32(24).uint64(message.metric.count);
                break;
            case "latencyMillis":
                writer.uint32(32).uint64(message.metric.latencyMillis);
                break;
            case "histogram":
                writer.uint32(40).int64(message.metric.histogram);
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationalMetric();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.timestamp = operational_metrics_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.metric = { $case: "count", count: reader.uint64().toString() };
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.metric = { $case: "latencyMillis", latencyMillis: reader.uint64().toString() };
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.metric = { $case: "histogram", histogram: reader.int64().toString() };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return OperationalMetric.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseOperationalMetric();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : undefined;
        if (((_c = object.metric) === null || _c === void 0 ? void 0 : _c.$case) === "count" && ((_d = object.metric) === null || _d === void 0 ? void 0 : _d.count) !== undefined && ((_e = object.metric) === null || _e === void 0 ? void 0 : _e.count) !== null) {
            message.metric = { $case: "count", count: object.metric.count };
        }
        if (((_f = object.metric) === null || _f === void 0 ? void 0 : _f.$case) === "latencyMillis" &&
            ((_g = object.metric) === null || _g === void 0 ? void 0 : _g.latencyMillis) !== undefined &&
            ((_h = object.metric) === null || _h === void 0 ? void 0 : _h.latencyMillis) !== null) {
            message.metric = { $case: "latencyMillis", latencyMillis: object.metric.latencyMillis };
        }
        if (((_j = object.metric) === null || _j === void 0 ? void 0 : _j.$case) === "histogram" &&
            ((_k = object.metric) === null || _k === void 0 ? void 0 : _k.histogram) !== undefined &&
            ((_l = object.metric) === null || _l === void 0 ? void 0 : _l.histogram) !== null) {
            message.metric = { $case: "histogram", histogram: object.metric.histogram };
        }
        return message;
    },
};
function createBaseOperationalMetricsBundle() {
    return { metrics: [] };
}
const OperationalMetricsBundle = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.metrics) {
            OperationalMetric.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationalMetricsBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metrics.push(OperationalMetric.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return OperationalMetricsBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOperationalMetricsBundle();
        message.metrics = ((_a = object.metrics) === null || _a === void 0 ? void 0 : _a.map((e) => OperationalMetric.fromPartial(e))) || [];
        return message;
    },
};
function operational_metrics_toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function operational_metrics_fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
//# sourceMappingURL=operational_metrics.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/ranking.js

const ranking_protobufPackage = "com.snap.camerakit.v3";
var RankingData_OSType;
(function (RankingData_OSType) {
    RankingData_OSType[RankingData_OSType["OS_TYPE_UNSET"] = 0] = "OS_TYPE_UNSET";
    RankingData_OSType[RankingData_OSType["OS_TYPE_ANDROID"] = 1] = "OS_TYPE_ANDROID";
    RankingData_OSType[RankingData_OSType["OS_TYPE_IOS"] = 2] = "OS_TYPE_IOS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_IPAD_OS"] = 3] = "OS_TYPE_IPAD_OS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_MAC_OS"] = 4] = "OS_TYPE_MAC_OS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_WINDOWS"] = 5] = "OS_TYPE_WINDOWS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_LINUX"] = 6] = "OS_TYPE_LINUX";
    RankingData_OSType[RankingData_OSType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RankingData_OSType || (RankingData_OSType = {}));
var RankingData_ConnectivityType;
(function (RankingData_ConnectivityType) {
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNSET"] = 0] = "CONNECTIVITY_TYPE_UNSET";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_WIFI"] = 1] = "CONNECTIVITY_TYPE_WIFI";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_MOBILE"] = 2] = "CONNECTIVITY_TYPE_MOBILE";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CONNECTIVITY_TYPE_UNREACHABLE";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CONNECTIVITY_TYPE_BLUETOOTH";
    RankingData_ConnectivityType[RankingData_ConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RankingData_ConnectivityType || (RankingData_ConnectivityType = {}));
function createBaseRankingData() {
    return { sessionId: "", locale: "", osType: 0, connectivityType: 0 };
}
const RankingData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        if (message.osType !== 0) {
            writer.uint32(24).int32(message.osType);
        }
        if (message.connectivityType !== 0) {
            writer.uint32(32).int32(message.connectivityType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRankingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.osType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.connectivityType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RankingData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRankingData();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.osType = (_c = object.osType) !== null && _c !== void 0 ? _c : 0;
        message.connectivityType = (_d = object.connectivityType) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
//# sourceMappingURL=ranking.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/service.js







const service_protobufPackage = "com.snap.camerakit.v3";
function createBaseGetGroupRequest() {
    return { id: "", rankingData: undefined };
}
const GetGroupRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.rankingData !== undefined) {
            RankingData.encode(message.rankingData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rankingData = RankingData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetGroupRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.rankingData = (object.rankingData !== undefined && object.rankingData !== null)
            ? RankingData.fromPartial(object.rankingData)
            : undefined;
        return message;
    },
};
function createBaseGetGroupResponse() {
    return { id: "", lenses: [] };
}
const GetGroupResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (const v of message.lenses) {
            Lens.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetGroupResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.lenses = ((_b = object.lenses) === null || _b === void 0 ? void 0 : _b.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetGroupLensRequest() {
    return { lensId: "", groupId: "" };
}
const GetGroupLensRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lensId !== "") {
            writer.uint32(10).string(message.lensId);
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lensId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groupId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetGroupLensRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupLensRequest();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.groupId = (_b = object.groupId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetGroupLensResponse() {
    return { lens: undefined, groupId: "" };
}
const GetGroupLensResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lens !== undefined) {
            Lens.encode(message.lens, writer.uint32(10).fork()).join();
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lens = Lens.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groupId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetGroupLensResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupLensResponse();
        message.lens = (object.lens !== undefined && object.lens !== null) ? Lens.fromPartial(object.lens) : undefined;
        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBatchGetGroupLensRequest() {
    return { getRequests: [] };
}
const BatchGetGroupLensRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.getRequests) {
            GetGroupLensRequest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.getRequests.push(GetGroupLensRequest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BatchGetGroupLensRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchGetGroupLensRequest();
        message.getRequests = ((_a = object.getRequests) === null || _a === void 0 ? void 0 : _a.map((e) => GetGroupLensRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBatchGetGroupLensResponse() {
    return { getResponses: [] };
}
const BatchGetGroupLensResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.getResponses) {
            GetGroupLensResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.getResponses.push(GetGroupLensResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BatchGetGroupLensResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchGetGroupLensResponse();
        message.getResponses = ((_a = object.getResponses) === null || _a === void 0 ? void 0 : _a.map((e) => GetGroupLensResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetPlaceholderConfigRequest() {
    return {};
}
const GetPlaceholderConfigRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetPlaceholderConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetPlaceholderConfigRequest();
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse() {
    return { configs: {} };
}
const GetPlaceholderConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.configs).forEach(([key, value]) => {
            GetPlaceholderConfigResponse_ConfigsEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = GetPlaceholderConfigResponse_ConfigsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.configs[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetPlaceholderConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPlaceholderConfigResponse();
        message.configs = Object.entries((_a = object.configs) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse_ConfigsEntry() {
    return { key: "", value: "" };
}
const GetPlaceholderConfigResponse_ConfigsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetPlaceholderConfigResponse_ConfigsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetInitializationConfigRequest() {
    return {};
}
const GetInitializationConfigRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetInitializationConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetInitializationConfigRequest();
        return message;
    },
};
function createBaseGetInitializationConfigResponse() {
    return {
        appVendorUuidOptIn: false,
        watermarkEnabled: false,
        childrenProtectionActRestricted: false,
        legalPrompt: undefined,
    };
}
const GetInitializationConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.appVendorUuidOptIn !== false) {
            writer.uint32(8).bool(message.appVendorUuidOptIn);
        }
        if (message.watermarkEnabled !== false) {
            writer.uint32(16).bool(message.watermarkEnabled);
        }
        if (message.childrenProtectionActRestricted !== false) {
            writer.uint32(24).bool(message.childrenProtectionActRestricted);
        }
        if (message.legalPrompt !== undefined) {
            LegalPrompt.encode(message.legalPrompt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.appVendorUuidOptIn = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.watermarkEnabled = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.childrenProtectionActRestricted = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.legalPrompt = LegalPrompt.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetInitializationConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetInitializationConfigResponse();
        message.appVendorUuidOptIn = (_a = object.appVendorUuidOptIn) !== null && _a !== void 0 ? _a : false;
        message.watermarkEnabled = (_b = object.watermarkEnabled) !== null && _b !== void 0 ? _b : false;
        message.childrenProtectionActRestricted = (_c = object.childrenProtectionActRestricted) !== null && _c !== void 0 ? _c : false;
        message.legalPrompt = (object.legalPrompt !== undefined && object.legalPrompt !== null)
            ? LegalPrompt.fromPartial(object.legalPrompt)
            : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsRequest() {
    return { metrics: undefined };
}
const SetOperationalMetricsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metrics !== undefined) {
            OperationalMetricsBundle.encode(message.metrics, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metrics = OperationalMetricsBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SetOperationalMetricsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetOperationalMetricsRequest();
        message.metrics = (object.metrics !== undefined && object.metrics !== null)
            ? OperationalMetricsBundle.fromPartial(object.metrics)
            : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsResponse() {
    return {};
}
const SetOperationalMetricsResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SetOperationalMetricsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseSetOperationalMetricsResponse();
        return message;
    },
};
function createBaseSetBusinessEventsRequest() {
    return { batchEvents: undefined };
}
const SetBusinessEventsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.batchEvents !== undefined) {
            Any.encode(message.batchEvents, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.batchEvents = Any.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SetBusinessEventsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetBusinessEventsRequest();
        message.batchEvents = (object.batchEvents !== undefined && object.batchEvents !== null)
            ? Any.fromPartial(object.batchEvents)
            : undefined;
        return message;
    },
};
function createBaseSetBusinessEventsResponse() {
    return {};
}
const SetBusinessEventsResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SetBusinessEventsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseSetBusinessEventsResponse();
        return message;
    },
};
function createBaseSetExtensionBusinessEventsRequest() {
    return { events: [], extensionEventBase: undefined };
}
const SetExtensionBusinessEventsRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.events) {
            Any.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.extensionEventBase !== undefined) {
            ExtensionEventBase.encode(message.extensionEventBase, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(Any.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extensionEventBase = ExtensionEventBase.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SetExtensionBusinessEventsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetExtensionBusinessEventsRequest();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
        message.extensionEventBase = (object.extensionEventBase !== undefined && object.extensionEventBase !== null)
            ? ExtensionEventBase.fromPartial(object.extensionEventBase)
            : undefined;
        return message;
    },
};
function createBaseSetExtensionBusinessEventsResponse() {
    return {};
}
const SetExtensionBusinessEventsResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SetExtensionBusinessEventsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseSetExtensionBusinessEventsResponse();
        return message;
    },
};
const LensesDefinition = {
    name: "Lenses",
    fullName: "com.snap.camerakit.v3.Lenses",
    methods: {
        getGroup: {
            name: "GetGroup",
            requestType: GetGroupRequest,
            requestStream: false,
            responseType: GetGroupResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            43,
                            18,
                            41,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            76,
                            101,
                            110,
                            115,
                            101,
                            115,
                            47,
                            103,
                            114,
                            111,
                            117,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        getGroupLens: {
            name: "GetGroupLens",
            requestType: GetGroupLensRequest,
            requestStream: false,
            responseType: GetGroupLensResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            66,
                            18,
                            64,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            76,
                            101,
                            110,
                            115,
                            101,
                            115,
                            47,
                            103,
                            114,
                            111,
                            117,
                            112,
                            115,
                            47,
                            123,
                            103,
                            114,
                            111,
                            117,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            108,
                            101,
                            110,
                            115,
                            101,
                            115,
                            47,
                            123,
                            108,
                            101,
                            110,
                            115,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        batchGetGroupLens: {
            name: "BatchGetGroupLens",
            requestType: BatchGetGroupLensRequest,
            requestStream: false,
            responseType: BatchGetGroupLensResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            58,
                            34,
                            53,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            76,
                            101,
                            110,
                            115,
                            101,
                            115,
                            47,
                            103,
                            114,
                            111,
                            117,
                            112,
                            115,
                            95,
                            108,
                            101,
                            110,
                            115,
                            101,
                            115,
                            47,
                            98,
                            97,
                            116,
                            99,
                            104,
                            95,
                            103,
                            101,
                            116,
                            58,
                            1,
                            42,
                        ]),
                    ],
                },
            },
        },
        getPlaceholderConfig: {
            name: "GetPlaceholderConfig",
            requestType: GetPlaceholderConfigRequest,
            requestStream: false,
            responseType: GetPlaceholderConfigResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            50,
                            18,
                            48,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            76,
                            101,
                            110,
                            115,
                            101,
                            115,
                            47,
                            112,
                            108,
                            97,
                            99,
                            101,
                            104,
                            111,
                            108,
                            100,
                            101,
                            114,
                            95,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                        ]),
                    ],
                },
            },
        },
    },
};
const MetricsDefinition = {
    name: "Metrics",
    fullName: "com.snap.camerakit.v3.Metrics",
    methods: {
        setOperationalMetrics: {
            name: "SetOperationalMetrics",
            requestType: SetOperationalMetricsRequest,
            requestStream: false,
            responseType: SetOperationalMetricsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            63,
                            34,
                            58,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            77,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            109,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            111,
                            112,
                            101,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            95,
                            109,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            58,
                            1,
                            42,
                        ]),
                    ],
                },
            },
        },
        setBusinessEvents: {
            name: "SetBusinessEvents",
            requestType: SetBusinessEventsRequest,
            requestStream: false,
            responseType: SetBusinessEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            59,
                            34,
                            54,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            77,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            109,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            98,
                            117,
                            115,
                            105,
                            110,
                            101,
                            115,
                            115,
                            95,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            58,
                            1,
                            42,
                        ]),
                    ],
                },
            },
        },
        setExtensionBusinessEvents: {
            name: "SetExtensionBusinessEvents",
            requestType: SetExtensionBusinessEventsRequest,
            requestStream: false,
            responseType: SetExtensionBusinessEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            69,
                            34,
                            64,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            77,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            109,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            101,
                            120,
                            116,
                            101,
                            110,
                            115,
                            105,
                            111,
                            110,
                            95,
                            98,
                            117,
                            115,
                            105,
                            110,
                            101,
                            115,
                            115,
                            95,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            58,
                            1,
                            42,
                        ]),
                    ],
                },
            },
        },
        getInitializationConfig: {
            name: "GetInitializationConfig",
            requestType: GetInitializationConfigRequest,
            requestStream: false,
            responseType: GetInitializationConfigResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
                _unknownFields: {
                    578365826: [
                        new Uint8Array([
                            62,
                            18,
                            60,
                            47,
                            99,
                            111,
                            109,
                            46,
                            115,
                            110,
                            97,
                            112,
                            46,
                            99,
                            97,
                            109,
                            101,
                            114,
                            97,
                            107,
                            105,
                            116,
                            46,
                            118,
                            51,
                            46,
                            77,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            109,
                            101,
                            116,
                            114,
                            105,
                            99,
                            115,
                            47,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            95,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                        ]),
                    ],
                },
            },
        },
    },
};
//# sourceMappingURL=service.js.map
// EXTERNAL MODULE: ./node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.umd.js
var grpc_web_client_umd = __webpack_require__(37);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/result.js
class OkResult {
    constructor(value) {
        this.value = value;
        this.ok = true;
    }
    unwrap() {
        return this.value;
    }
    unwrapErr() {
        throw new Error("Ok Result cannot unwrapErr.");
    }
    map(m) {
        return new OkResult(m(this.value));
    }
    flatMap(m) {
        return m(this.value);
    }
}
const Ok = (value) => new OkResult(value);
class ErrResult {
    constructor(value) {
        this.value = value;
        this.ok = false;
    }
    unwrap() {
        throw this.value;
    }
    unwrapErr() {
        return this.value;
    }
    map() {
        return this;
    }
    flatMap() {
        return this;
    }
}
const Err = (value) => new ErrResult(value);
//# sourceMappingURL=result.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/memoize.js
function memoize_isMemoized(fn) {
    return typeof fn === "function" && typeof fn.delegate === "function";
}
function memoize_memoize(delegate) {
    let memo;
    const memoized = (...args) => {
        if (typeof memo !== "undefined")
            return memo;
        memo = delegate(...args);
        return memo;
    };
    memoized.delegate = delegate;
    return memoized;
}
//# sourceMappingURL=memoize.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/environment.js
/* harmony default export */ const environment = ({ PACKAGE_VERSION: "1.1.0" });
//# sourceMappingURL=environment.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lensCoreWasmVersions.js
/* harmony default export */ const lensCoreWasmVersions = ({
    version: "290",
    buildNumber: "458",
    baseUrl: "https://cf-st.sc-cdn.net/d/eQXoian2N4dHEfwVBdANc?go=IgsKCTIBBEgBUFxgAQ%3D%3D&uc=92",
});
//# sourceMappingURL=lensCoreWasmVersions.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/platform/platformInfo.js




function isNavigatorUAData(value) {
    return (typeguards_isRecord(value) &&
        Array.isArray(value["brands"]) &&
        value["brands"].every((brand) => {
            return typeguards_isRecord(brand) && typeof brand["brand"] === "string" && typeof brand["version"] === "string";
        }) &&
        typeof value["mobile"] === "boolean" &&
        typeof value["platform"] === "string");
}
function parseDeviceModel(userAgent) {
    const userAgentWithModel = userAgent.match(/;[^;]+?;([^\)]+?)\)/);
    if (userAgentWithModel) {
        return userAgentWithModel[1].trim();
    }
    const userAgentWithModel2 = userAgent.match(/\(([^;]+);/);
    if (userAgentWithModel2) {
        return userAgentWithModel2[1].trim();
    }
    return "unknown";
}
function parseOrigin() {
    var _a, _b, _c;
    if (location.hostname !== "")
        return location.hostname;
    const possibleOrigins = location.ancestorOrigins === undefined && typeof window !== "undefined"
        ? [window.parent.origin, (_b = (_a = window.top) === null || _a === void 0 ? void 0 : _a.origin) !== null && _b !== void 0 ? _b : ""]
        : (_c = location.ancestorOrigins) !== null && _c !== void 0 ? _c : [];
    for (let origin of possibleOrigins) {
        try {
            origin = new URL(origin).hostname;
            if (origin)
                return origin;
        }
        catch (_) { }
    }
    return "unknown";
}
function parseOSName(userAgent) {
    const knownPlatforms = new Map([
        ["android", "android"],
        ["linux", "linux"],
        ["iphone os", "ios"],
        ["ipad", "ipados"],
        ["mac os", "macos"],
        ["macos", "macos"],
        ["windows", "windows"],
    ]);
    const normalizedUserAgent = userAgent.toLowerCase();
    for (const [match, platform] of knownPlatforms.entries()) {
        if (normalizedUserAgent.includes(match))
            return platform;
    }
    return "unknown";
}
function parseOSVersion(userAgent) {
    const versionMatch = userAgent.match(/\s([\d][\d_.]*[\d])(;|\)|\s)/);
    if (versionMatch != null) {
        return versionMatch[1].replace(/_/g, ".");
    }
    return "";
}
function parseUserAgentData(userAgent) {
    let brand;
    if (/Chrome/.test(userAgent)) {
        const versionMatch = userAgent.match(/Chrome\/([\d.]+)/);
        brand = {
            brand: "Chrome",
            version: versionMatch !== null ? versionMatch[1] : "unknown",
        };
    }
    else if (/Safari/.test(userAgent)) {
        let versionMatch = userAgent.match(/Version\/([\d.]+)/);
        if (versionMatch === null)
            versionMatch = userAgent.match(/Safari\/([\d.]+)/);
        brand = {
            brand: "Safari",
            version: versionMatch !== null ? versionMatch[1] : "unknown",
        };
    }
    else {
        brand = {
            brand: "Firefox",
            version: "0",
        };
    }
    const mobile = false;
    const platform = parseOSName(userAgent);
    return {
        brands: [brand],
        mobile,
        platform,
    };
}
function normalizeBrands(brands) {
    const knownBrands = new Map([
        ["Google Chrome", "Chrome"],
        ["Chrome", "Chrome"],
        ["Chromium", "Chrome"],
        ["Firefox", "Firefox"],
        ["Microsoft Edge", "Chrome"],
        ["Safari", "Safari"],
    ]);
    const normalizedBrands = brands
        .filter(({ brand }) => knownBrands.has(brand))
        .map((brand) => {
        return {
            brand: knownBrands.get(brand.brand),
            version: brand.version,
        };
    });
    if (normalizedBrands.length === 0)
        return [{ brand: "Firefox", version: "0" }];
    return normalizedBrands;
}
function normalizeUserAgentData(userAgentData) {
    return {
        brands: normalizeBrands(userAgentData.brands),
        mobile: userAgentData.mobile,
        platform: parseOSName(userAgentData.platform),
    };
}
const getPlatformInfo = memoize_memoize(function getPlatformIno() {
    var _a, _b, _c;
    const userAgent = navigator.userAgent;
    const userAgentData = isNavigatorUAData(navigator.userAgentData)
        ? normalizeUserAgentData(navigator.userAgentData)
        : parseUserAgentData(userAgent);
    const osVersion = parseOSVersion(userAgent);
    const deviceModel = parseDeviceModel(userAgent);
    const sdkShortVersion = environment.PACKAGE_VERSION.replace(/[-+]\S+$/, "");
    const locale = navigator.language;
    const fullLocale = ((_a = navigator.languages) !== null && _a !== void 0 ? _a : [])
        .map((lang, index) => {
        const qvalue = Math.max(0, (10 - index) / 10);
        return `${lang};q=${qvalue.toFixed(1)}`;
    })
        .join(", ") || locale;
    return {
        sdkShortVersion,
        sdkLongVersion: environment.PACKAGE_VERSION,
        lensCore: lensCoreWasmVersions,
        browser: userAgentData.brands[0],
        osName: userAgentData.platform,
        osVersion,
        deviceModel,
        locale,
        fullLocale,
        origin: parseOrigin(),
        connectionType: (_c = (_b = navigator.connection) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : "unknown",
    };
});
//# sourceMappingURL=platformInfo.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/platform/cameraKitUserAgent.js



const getCameraKitUserAgent = memoize_memoize(function getCameraKitUserAgent() {
    var _a;
    const { browser, deviceModel, origin, osName, osVersion, sdkShortVersion, lensCore } = getPlatformInfo();
    const { userAgentFlavor } = (_a = getConfigurationOverrides()) !== null && _a !== void 0 ? _a : { userAgentFlavor: "release" };
    const flavor = userAgentFlavor === "release" ? "" : "DEBUG ";
    return (`CameraKitWeb/${sdkShortVersion} ${flavor}(${deviceModel}; ${osName} ${osVersion}) ` +
        `${browser.brand}/${browser.version} Core/${lensCore.version} ` +
        `AppId/${origin}`);
});
//# sourceMappingURL=cameraKitUserAgent.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/headersModifyingFetchHandler.js
const createHeadersModifyingFetchHandler = (modifyHeaders) => (next) => (input, init) => {
    const headers = init && init.headers
        ? new Headers(init.headers)
        : typeof input === "string"
            ? new Headers()
            : input.headers;
    const modifiedHeaders = modifyHeaders(headers);
    return next(input, Object.assign(Object.assign({}, init), { headers: modifiedHeaders }));
};
//# sourceMappingURL=headersModifyingFetchHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/cameraKitServiceFetchHandlerFactory.js






const cameraKitServiceFetchHandlerFactory = Injectable("cameraKitServiceFetchHandler", [configurationToken, defaultFetchHandlerFactory.token], ({ apiToken }, defaultFetchHandler) => {
    return new HandlerChainBuilder(defaultFetchHandler).map(createHeadersModifyingFetchHandler((headers) => {
        headers.append("x-snap-client-user-agent", getCameraKitUserAgent());
        headers.append("authorization", `Bearer ${apiToken}`);
        return headers;
    })).handler;
});
//# sourceMappingURL=cameraKitServiceFetchHandlerFactory.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/errorHelpers.js
function stringifyError(error) {
    var _a;
    const outer = (_a = error.stack) !== null && _a !== void 0 ? _a : "";
    return error.cause ? `${outer}\nCaused by:\n\t${stringifyError(errorHelpers_ensureError(error.cause))}` : outer;
}
function stringifyErrorMessage(error) {
    const cause = error.cause ? `; Caused by ${stringifyErrorMessage(errorHelpers_ensureError(error.cause))}` : "";
    return `${error.name}: ${error.message}${cause}`;
}
function errorHelpers_ensureError(error) {
    if (error instanceof Error)
        return error;
    try {
        return new Error(`Non-Error type exception thrown. Serialized error value: ${JSON.stringify(error)}`);
    }
    catch (_) {
        return new Error("Non-Error type exception thrown. Original error value could not be serialized.");
    }
}
//# sourceMappingURL=errorHelpers.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/events/TypedCustomEvent.js
class TypedCustomEvent extends CustomEvent {
    constructor(type, detail, eventInitDict = {}) {
        super(type, Object.assign(Object.assign({}, eventInitDict), { detail }));
    }
}
//# sourceMappingURL=TypedCustomEvent.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/events/TypedEventTarget.js
class TypedEventTarget {
    constructor() {
        this.listeners = new Map();
        this.options = new Map();
    }
    addEventListener(type, callback, options) {
        var _a;
        const listener = callback;
        const listeners = (_a = this.listeners.get(type)) !== null && _a !== void 0 ? _a : [];
        this.listeners.set(type, [...listeners, listener]);
        if (options)
            this.options.set(listener, options);
    }
    dispatchEvent(event) {
        const listeners = this.listeners.get(event.type);
        if (!listeners)
            return true;
        listeners.forEach((listener) => {
            var _a;
            const options = (_a = this.options.get(listener)) !== null && _a !== void 0 ? _a : {};
            try {
                listener(event);
            }
            catch (error) {
                if (window)
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
            if (options.once)
                this.removeEventListener(event.type, listener);
        });
        return true;
    }
    removeEventListener(type, callback) {
        const listener = callback;
        const listeners = this.listeners.get(type);
        if (!listeners)
            return;
        this.listeners.set(type, listeners.filter((l) => l !== listener));
        this.options.delete(listener);
    }
}
//# sourceMappingURL=TypedEventTarget.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/time.js
const getTimeMs = () => performance.now();
const convertDaysToSeconds = (days) => days * 24 * 60 * 60;
//# sourceMappingURL=time.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/operational/Metric.js
const nameDelimiter = "_";
const dimensionDelimiter = ".";
const delimiterRegex = new RegExp(`^${nameDelimiter}+|${nameDelimiter}+$`, "g");
class Metric {
    constructor(name, dimensions = {}) {
        this.name = name;
        this.dimensions = dimensions;
    }
    child(constructor, name, dimensions = {}) {
        return new constructor(`${this.name}${nameDelimiter}${name}`, dimensions);
    }
}
function joinMetricNames(names) {
    return names.join(nameDelimiter).replace(delimiterRegex, "");
}
function serializeMetricDimensions(dimensions) {
    if (Object.keys(dimensions).length === 0)
        return "";
    return `${dimensionDelimiter}${Array.from(Object.entries(dimensions))
        .map((d) => d.join(dimensionDelimiter))
        .join(dimensionDelimiter)}`;
}
//# sourceMappingURL=Metric.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/operational/Timer.js



class Timer extends Metric {
    constructor(name, dimensions = {}) {
        super(name, dimensions);
        this.name = name;
        this.startTime = getTimeMs();
        this.stopped = false;
        this.marks = new Set();
        this.measures = new Set();
    }
    getMeasures() {
        return Array.from(this.measures.values()).concat(...Array.from(this.marks.values()).map((mark) => mark.getMeasures()));
    }
    mark(name, dimensions = {}) {
        const mark = new Timer(joinMetricNames([this.name, name]), dimensions);
        if (this.stopped)
            mark.stop();
        this.marks.add(mark);
        return mark;
    }
    measure(nameOrDimensions, maybeDimensions) {
        if (this.stopped)
            return undefined;
        const name = typeof nameOrDimensions === "string" ? nameOrDimensions : "";
        const dimensions = typeof nameOrDimensions === "string" ? maybeDimensions : nameOrDimensions;
        const fullName = joinMetricNames([this.name, name]);
        const measure = {
            name: fullName,
            duration: getTimeMs() - this.startTime,
            dimensions: dimensions !== null && dimensions !== void 0 ? dimensions : this.dimensions,
        };
        this.measures.add(measure);
        return measure;
    }
    clear() {
        this.measures.clear();
        this.marks.forEach((mark) => mark.clear());
    }
    stop() {
        this.stopped = true;
        this.marks.forEach((mark) => mark.stop());
    }
    stopAndReport(client) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            client.setOperationalMetrics(this);
            this.stop();
            this.clear();
        });
    }
    toOperationalMetric() {
        const timestamp = new Date();
        return this.getMeasures().map((measure) => ({
            name: `${measure.name}${serializeMetricDimensions(measure.dimensions)}`,
            timestamp,
            metric: {
                $case: "latencyMillis",
                latencyMillis: `${Math.ceil(measure.duration)}`,
            },
        }));
    }
}
//# sourceMappingURL=Timer.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/requestStateEmittingHandler.js






let requestId = 0;
const safeParseInt = (str) => {
    if (str == null)
        return 0;
    const maybeInt = parseInt(str);
    return isNaN(maybeInt) ? 0 : maybeInt;
};
const dispatchRequestStarted = (requestStateEventTarget, data) => {
    const started = Object.assign(Object.assign({}, data), { requestId: requestId++, timer: new Timer("download_latency") });
    requestStateEventTarget.dispatchEvent(new TypedCustomEvent("started", started));
    return started;
};
const dispatchRequestCompleted = (requestStateEventTarget, data) => {
    requestStateEventTarget.dispatchEvent(new TypedCustomEvent("completed", data));
    return data;
};
const dispatchRequestErrored = (requestStateEventTarget, data) => {
    requestStateEventTarget.dispatchEvent(new TypedCustomEvent("errored", data));
    return data;
};
const createRequestStateEmittingHandler = (requestStateEventTarget) => (next) => ([request, dimensions], metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const { requestId } = dispatchRequestStarted(requestStateEventTarget, { dimensions });
    try {
        const response = yield next(request, metadata);
        const status = response.status;
        const sizeByte = safeParseInt(response.headers.get("content-length"));
        dispatchRequestCompleted(requestStateEventTarget, { requestId, dimensions, status, sizeByte });
        return response;
    }
    catch (error) {
        dispatchRequestErrored(requestStateEventTarget, { requestId, dimensions, error: errorHelpers_ensureError(error) });
        throw error;
    }
});
const requestStateEventTargetFactory = Injectable("requestStateEventTarget", () => new TypedEventTarget());
//# sourceMappingURL=requestStateEmittingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/clients/grpcHandler.js









const GRPC_CALL_REQUEST_TYPE = "grpc_call";
function isMetricsGrpcMethod(method) {
    return (method === MetricsDefinition.methods.setOperationalMetrics.name ||
        method === MetricsDefinition.methods.setBusinessEvents.name);
}
const grpcHandlerFactory = Injectable("grpcHandlerFactory", [configurationToken, cameraKitServiceFetchHandlerFactory.token, requestStateEventTargetFactory.token], (configuration, fetchHandler, requestStateEventTarget) => {
    const host = `https://${configuration.apiHostname}`;
    const fetchHandlerWithMetrics = new HandlerChainBuilder(fetchHandler).map(createRequestStateEmittingHandler(requestStateEventTarget)).handler;
    const transport = (options) => {
        let metadata = undefined;
        const controller = globalThis.AbortController ? new AbortController() : undefined;
        let cancelled = false;
        return {
            sendMessage(msgBytes) {
                var _a;
                const requestInit = {
                    headers: (_a = metadata === null || metadata === void 0 ? void 0 : metadata.toHeaders()) !== null && _a !== void 0 ? _a : {},
                    method: "POST",
                    body: msgBytes,
                    signal: controller === null || controller === void 0 ? void 0 : controller.signal,
                };
                const metricsDimensions = {
                    requestType: GRPC_CALL_REQUEST_TYPE,
                    methodName: options.methodDefinition.methodName,
                };
                const request = isMetricsGrpcMethod(options.methodDefinition.methodName)
                    ? fetchHandler(options.url, requestInit)
                    : fetchHandlerWithMetrics([options.url, metricsDimensions], requestInit);
                request
                    .then((response) => {
                    options.onHeaders(new grpc_web_client_umd.grpc.Metadata(response.headers), response.status);
                    return response.arrayBuffer();
                })
                    .then((body) => {
                    if (cancelled)
                        return;
                    options.onChunk(new Uint8Array(body));
                    options.onEnd();
                })
                    .catch((error) => {
                    if (cancelled)
                        return;
                    cancelled = true;
                    options.onEnd(error);
                });
            },
            start(m) {
                metadata = m;
            },
            finishSend() { },
            cancel() {
                if (cancelled)
                    return;
                cancelled = true;
                controller === null || controller === void 0 ? void 0 : controller.abort();
            },
        };
    };
    return (request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        return new Promise((resolve) => {
            grpc_web_client_umd.grpc.unary({
                methodName: request.methodName,
                service: { serviceName: request.serviceName },
                requestStream: false,
                responseStream: false,
                requestType: request.requestType,
                responseType: request.responseType,
            }, {
                request: new request.requestType(),
                host,
                onEnd: (response) => {
                    if (isUnaryOutputOk(response)) {
                        resolve(Ok(response));
                    }
                    else {
                        resolve(Err(response));
                    }
                },
                transport,
            });
        });
    });
});
function isUnaryOutputOk(value) {
    return value.status === grpc_web_client_umd.grpc.Code.OK;
}
//# sourceMappingURL=grpcHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/clients/createTsProtoClient.js


function messageClass(message, data) {
    return class Message {
        constructor() {
            Object.assign(this, message.fromPartial(data));
        }
        static deserializeBinary(data) {
            return new (messageClass(message, message.decode(data)))();
        }
        serializeBinary() {
            return message.encode(this).finish();
        }
        toObject() {
            return this;
        }
    };
}
function createTsProtoClient(serviceDefinition, handler) {
    return entries_fromEntries(entries_entries(serviceDefinition.methods).map(([methodName, methodDefinition]) => {
        return [
            methodName,
            (request) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                const requestType = messageClass(methodDefinition.requestType, request);
                const responseType = messageClass(methodDefinition.responseType, {});
                return handler({
                    serviceName: serviceDefinition.fullName,
                    methodName: methodDefinition.name,
                    requestType,
                    responseType,
                });
            }),
        ];
    }));
}
//# sourceMappingURL=createTsProtoClient.js.map
// EXTERNAL MODULE: ./node_modules/browser-headers/dist/browser-headers.umd.js
var browser_headers_umd = __webpack_require__(84);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/unionBy.js
function unionBy(iteratee, ...arrays) {
    const throwIterateeError = () => {
        throw new Error("Iteratee must be a function or a valid property key of the item");
    };
    const seen = new Map();
    for (const item of arrays.flat()) {
        const key = typeof iteratee === "function"
            ? iteratee(item)
            : typeof item === "object" && item !== null && iteratee in item
                ? item[iteratee]
                : throwIterateeError();
        seen.set(key, item);
    }
    return Array.from(seen.values());
}
//# sourceMappingURL=unionBy.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/common/ruid.js

const ruid_protobufPackage = "snapchat.common";
var Ruid_Type;
(function (Ruid_Type) {
    Ruid_Type[Ruid_Type["UNSET"] = 0] = "UNSET";
    Ruid_Type[Ruid_Type["USER"] = 1] = "USER";
    Ruid_Type[Ruid_Type["DEVICE"] = 2] = "DEVICE";
    Ruid_Type[Ruid_Type["WEB_CLIENT"] = 3] = "WEB_CLIENT";
    Ruid_Type[Ruid_Type["AD_ACCOUNT"] = 4] = "AD_ACCOUNT";
    Ruid_Type[Ruid_Type["USERNAME"] = 5] = "USERNAME";
    Ruid_Type[Ruid_Type["AD_MODERATION_AD"] = 6] = "AD_MODERATION_AD";
    Ruid_Type[Ruid_Type["WEB_SNAPCHAT_USER"] = 7] = "WEB_SNAPCHAT_USER";
    Ruid_Type[Ruid_Type["INTERNAL"] = 8] = "INTERNAL";
    Ruid_Type[Ruid_Type["AM_ORGANIZATION"] = 9] = "AM_ORGANIZATION";
    Ruid_Type[Ruid_Type["AM_MEMBER"] = 10] = "AM_MEMBER";
    Ruid_Type[Ruid_Type["AM_SESSION"] = 11] = "AM_SESSION";
    Ruid_Type[Ruid_Type["AM_PROFILE"] = 12] = "AM_PROFILE";
    Ruid_Type[Ruid_Type["AM_SNAPCHAT_USER"] = 13] = "AM_SNAPCHAT_USER";
    Ruid_Type[Ruid_Type["SNAPCHAT_ADVERTISING"] = 14] = "SNAPCHAT_ADVERTISING";
    Ruid_Type[Ruid_Type["AM_CLIENT"] = 15] = "AM_CLIENT";
    Ruid_Type[Ruid_Type["MISCHIEF"] = 16] = "MISCHIEF";
    Ruid_Type[Ruid_Type["ARES_VISITOR"] = 17] = "ARES_VISITOR";
    Ruid_Type[Ruid_Type["POD_NAME"] = 18] = "POD_NAME";
    Ruid_Type[Ruid_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Ruid_Type || (Ruid_Type = {}));
function createBaseRuid() {
    return { type: 0, stringValue: "", loggingIdValue: "" };
}
const Ruid = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.stringValue !== "") {
            writer.uint32(18).string(message.stringValue);
        }
        if (message.loggingIdValue !== "") {
            writer.uint32(26).string(message.loggingIdValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRuid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.loggingIdValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Ruid.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRuid();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.stringValue = (_b = object.stringValue) !== null && _b !== void 0 ? _b : "";
        message.loggingIdValue = (_c = object.loggingIdValue) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
//# sourceMappingURL=ruid.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/google/protobuf/wrappers.js

const wrappers_protobufPackage = "google.protobuf";
function createBaseDoubleValue() {
    return { value: 0 };
}
const DoubleValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(9).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDoubleValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DoubleValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDoubleValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseFloatValue() {
    return { value: 0 };
}
const FloatValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(13).float(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFloatValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.value = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FloatValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFloatValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseInt64Value() {
    return { value: "0" };
}
const Int64Value = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "0") {
            writer.uint32(8).int64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInt64Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Int64Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInt64Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseUInt64Value() {
    return { value: "0" };
}
const UInt64Value = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "0") {
            writer.uint32(8).uint64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUInt64Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UInt64Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUInt64Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseInt32Value() {
    return { value: 0 };
}
const Int32Value = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(8).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInt32Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Int32Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInt32Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseUInt32Value() {
    return { value: 0 };
}
const UInt32Value = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(8).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUInt32Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UInt32Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUInt32Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseBoolValue() {
    return { value: false };
}
const BoolValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== false) {
            writer.uint32(8).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBoolValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BoolValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBoolValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseStringValue() {
    return { value: "" };
}
const StringValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStringValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return StringValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStringValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBytesValue() {
    return { value: new Uint8Array(0) };
}
const BytesValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value.length !== 0) {
            writer.uint32(10).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBytesValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BytesValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBytesValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=wrappers.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/benchmark.js


const benchmark_protobufPackage = "snapchat.cdp.cof";
function createBaseBenchmarkValue() {
    return { intValue: undefined, longValue: undefined, boolValue: undefined, floatValue: undefined };
}
const BenchmarkValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(24).bool(message.boolValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(37).float(message.floatValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBenchmarkValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.intValue = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.longValue = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.floatValue = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BenchmarkValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBenchmarkValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.boolValue = (_c = object.boolValue) !== null && _c !== void 0 ? _c : undefined;
        message.floatValue = (_d = object.floatValue) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseBenchmarkRequest() {
    return { benchmarkNames: [], expirationTimestamp: undefined };
}
const BenchmarkRequest = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.benchmarkNames) {
            writer.int32(v);
        }
        writer.join();
        if (message.expirationTimestamp !== undefined) {
            Timestamp.encode(benchmark_toTimestamp(message.expirationTimestamp), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBenchmarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.benchmarkNames.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.benchmarkNames.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.expirationTimestamp = benchmark_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BenchmarkRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBenchmarkRequest();
        message.benchmarkNames = ((_a = object.benchmarkNames) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.expirationTimestamp = (_b = object.expirationTimestamp) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseBenchmarkResult() {
    return { name: 0, value: undefined };
}
const BenchmarkResult = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== 0) {
            writer.uint32(8).int32(message.name);
        }
        if (message.value !== undefined) {
            BenchmarkValue.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBenchmarkResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.name = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = BenchmarkValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BenchmarkResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBenchmarkResult();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? BenchmarkValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function benchmark_toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function benchmark_fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
//# sourceMappingURL=benchmark.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/config_request.js




const config_request_protobufPackage = "snapchat.cdp.cof";
var ConfigTargetingTriggerEventType;
(function (ConfigTargetingTriggerEventType) {
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNKNOWN_EVENT_TYPE"] = 0] = "UNKNOWN_EVENT_TYPE";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["COLD_START"] = 1] = "COLD_START";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["WARM_START"] = 2] = "WARM_START";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["FOREGROUND_TRIGGER"] = 3] = "FOREGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["BACKGROUND_TRIGGER"] = 4] = "BACKGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingTriggerEventType || (ConfigTargetingTriggerEventType = {}));
var ConfigTargetingAppState;
(function (ConfigTargetingAppState) {
    ConfigTargetingAppState[ConfigTargetingAppState["UNKNOWN_APP_STATE"] = 0] = "UNKNOWN_APP_STATE";
    ConfigTargetingAppState[ConfigTargetingAppState["FOREGROUND"] = 1] = "FOREGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["BACKGROUND"] = 2] = "BACKGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingAppState || (ConfigTargetingAppState = {}));
var ConfigTargetingInstrumentation;
(function (ConfigTargetingInstrumentation) {
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["DEFAULT_INSTRUMENTATION"] = 0] = "DEFAULT_INSTRUMENTATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["USER_AUTHENTICATION"] = 1] = "USER_AUTHENTICATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingInstrumentation || (ConfigTargetingInstrumentation = {}));
var Connectivity_NetworkType;
(function (Connectivity_NetworkType) {
    Connectivity_NetworkType[Connectivity_NetworkType["UNKNOWN_NETWORK_TYPE"] = 0] = "UNKNOWN_NETWORK_TYPE";
    Connectivity_NetworkType[Connectivity_NetworkType["CELLULAR"] = 1] = "CELLULAR";
    Connectivity_NetworkType[Connectivity_NetworkType["WIFI"] = 2] = "WIFI";
    Connectivity_NetworkType[Connectivity_NetworkType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Connectivity_NetworkType || (Connectivity_NetworkType = {}));
function createBaseConfigTargetingRequest() {
    return {
        configResultsEtag: "",
        namespaces: [],
        ghostId: "",
        countryCode: "",
        screenWidth: 0,
        screenHeight: 0,
        connectivity: undefined,
        maxVideoWidthPx: 0,
        maxVideoHeightPx: 0,
        benchmarkResults: [],
        deltaSync: false,
        userAgent: "",
        triggerEventType: 0,
        appState: 0,
        locale: "",
        deviceId: "",
        userId: "",
        clientIp: "",
        isUnAuthorized: false,
        appLocale: "",
        instrumentation: 0,
        lastSuccessfulSync: "0",
        isLogout: false,
        packageInstaller: "",
        syncTriggerBlizzardSessionId: "",
        syncExecutionBlizzardSessionId: "",
        cofSyncTriggerDelayFromStartupMs: 0,
        cofSyncExecutionDelayFromStartupMs: 0,
        syncTriggerTime: "0",
        decoderEncoderAvailability: undefined,
        snapkitAppId: "",
        lenscoreVersion: 0,
        ruid: undefined,
        configNames: [],
        includeTestUserTreatments: false,
        disableExposureLogging: false,
        lensClusterOrig4: 0,
        clientId: "",
        propertyOverrides: undefined,
        forLockscreenMode: false,
        osBuildVersion: "",
    };
}
const ConfigTargetingRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.configResultsEtag !== "") {
            writer.uint32(10).string(message.configResultsEtag);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.join();
        if (message.ghostId !== "") {
            writer.uint32(26).string(message.ghostId);
        }
        if (message.countryCode !== "") {
            writer.uint32(34).string(message.countryCode);
        }
        if (message.screenWidth !== 0) {
            writer.uint32(40).int32(message.screenWidth);
        }
        if (message.screenHeight !== 0) {
            writer.uint32(48).int32(message.screenHeight);
        }
        if (message.connectivity !== undefined) {
            Connectivity.encode(message.connectivity, writer.uint32(58).fork()).join();
        }
        if (message.maxVideoWidthPx !== 0) {
            writer.uint32(64).int32(message.maxVideoWidthPx);
        }
        if (message.maxVideoHeightPx !== 0) {
            writer.uint32(72).int32(message.maxVideoHeightPx);
        }
        for (const v of message.benchmarkResults) {
            BenchmarkResult.encode(v, writer.uint32(82).fork()).join();
        }
        if (message.deltaSync !== false) {
            writer.uint32(88).bool(message.deltaSync);
        }
        if (message.userAgent !== "") {
            writer.uint32(98).string(message.userAgent);
        }
        if (message.triggerEventType !== 0) {
            writer.uint32(104).int32(message.triggerEventType);
        }
        if (message.appState !== 0) {
            writer.uint32(112).int32(message.appState);
        }
        if (message.locale !== "") {
            writer.uint32(122).string(message.locale);
        }
        if (message.deviceId !== "") {
            writer.uint32(130).string(message.deviceId);
        }
        if (message.userId !== "") {
            writer.uint32(138).string(message.userId);
        }
        if (message.clientIp !== "") {
            writer.uint32(146).string(message.clientIp);
        }
        if (message.isUnAuthorized !== false) {
            writer.uint32(152).bool(message.isUnAuthorized);
        }
        if (message.appLocale !== "") {
            writer.uint32(162).string(message.appLocale);
        }
        if (message.instrumentation !== 0) {
            writer.uint32(168).int32(message.instrumentation);
        }
        if (message.lastSuccessfulSync !== "0") {
            writer.uint32(176).int64(message.lastSuccessfulSync);
        }
        if (message.isLogout !== false) {
            writer.uint32(184).bool(message.isLogout);
        }
        if (message.packageInstaller !== "") {
            writer.uint32(194).string(message.packageInstaller);
        }
        if (message.syncTriggerBlizzardSessionId !== "") {
            writer.uint32(202).string(message.syncTriggerBlizzardSessionId);
        }
        if (message.syncExecutionBlizzardSessionId !== "") {
            writer.uint32(210).string(message.syncExecutionBlizzardSessionId);
        }
        if (message.cofSyncTriggerDelayFromStartupMs !== 0) {
            writer.uint32(216).int32(message.cofSyncTriggerDelayFromStartupMs);
        }
        if (message.cofSyncExecutionDelayFromStartupMs !== 0) {
            writer.uint32(224).int32(message.cofSyncExecutionDelayFromStartupMs);
        }
        if (message.syncTriggerTime !== "0") {
            writer.uint32(232).int64(message.syncTriggerTime);
        }
        if (message.decoderEncoderAvailability !== undefined) {
            DecoderEncoderAvailablity.encode(message.decoderEncoderAvailability, writer.uint32(242).fork()).join();
        }
        if (message.snapkitAppId !== "") {
            writer.uint32(250).string(message.snapkitAppId);
        }
        if (message.lenscoreVersion !== 0) {
            writer.uint32(256).int32(message.lenscoreVersion);
        }
        if (message.ruid !== undefined) {
            Ruid.encode(message.ruid, writer.uint32(266).fork()).join();
        }
        for (const v of message.configNames) {
            writer.uint32(274).string(v);
        }
        if (message.includeTestUserTreatments !== false) {
            writer.uint32(288).bool(message.includeTestUserTreatments);
        }
        if (message.disableExposureLogging !== false) {
            writer.uint32(296).bool(message.disableExposureLogging);
        }
        if (message.lensClusterOrig4 !== 0) {
            writer.uint32(304).int32(message.lensClusterOrig4);
        }
        if (message.clientId !== "") {
            writer.uint32(314).string(message.clientId);
        }
        if (message.propertyOverrides !== undefined) {
            PropertyOverrides.encode(message.propertyOverrides, writer.uint32(322).fork()).join();
        }
        if (message.forLockscreenMode !== false) {
            writer.uint32(328).bool(message.forLockscreenMode);
        }
        if (message.osBuildVersion !== "") {
            writer.uint32(338).string(message.osBuildVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResultsEtag = reader.string();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.namespaces.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ghostId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.countryCode = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.screenWidth = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.screenHeight = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.connectivity = Connectivity.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.maxVideoWidthPx = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.maxVideoHeightPx = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.benchmarkResults.push(BenchmarkResult.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.deltaSync = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.userAgent = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.triggerEventType = reader.int32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.appState = reader.int32();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.deviceId = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.clientIp = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.isUnAuthorized = reader.bool();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.appLocale = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.instrumentation = reader.int32();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.lastSuccessfulSync = reader.int64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.isLogout = reader.bool();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.packageInstaller = reader.string();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.syncTriggerBlizzardSessionId = reader.string();
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.syncExecutionBlizzardSessionId = reader.string();
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.cofSyncTriggerDelayFromStartupMs = reader.int32();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.cofSyncExecutionDelayFromStartupMs = reader.int32();
                    continue;
                }
                case 29: {
                    if (tag !== 232) {
                        break;
                    }
                    message.syncTriggerTime = reader.int64().toString();
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.decoderEncoderAvailability = DecoderEncoderAvailablity.decode(reader, reader.uint32());
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.snapkitAppId = reader.string();
                    continue;
                }
                case 32: {
                    if (tag !== 256) {
                        break;
                    }
                    message.lenscoreVersion = reader.int32();
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.ruid = Ruid.decode(reader, reader.uint32());
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.configNames.push(reader.string());
                    continue;
                }
                case 36: {
                    if (tag !== 288) {
                        break;
                    }
                    message.includeTestUserTreatments = reader.bool();
                    continue;
                }
                case 37: {
                    if (tag !== 296) {
                        break;
                    }
                    message.disableExposureLogging = reader.bool();
                    continue;
                }
                case 38: {
                    if (tag !== 304) {
                        break;
                    }
                    message.lensClusterOrig4 = reader.int32();
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.propertyOverrides = PropertyOverrides.decode(reader, reader.uint32());
                    continue;
                }
                case 41: {
                    if (tag !== 328) {
                        break;
                    }
                    message.forLockscreenMode = reader.bool();
                    continue;
                }
                case 42: {
                    if (tag !== 338) {
                        break;
                    }
                    message.osBuildVersion = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigTargetingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;
        const message = createBaseConfigTargetingRequest();
        message.configResultsEtag = (_a = object.configResultsEtag) !== null && _a !== void 0 ? _a : "";
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.ghostId = (_c = object.ghostId) !== null && _c !== void 0 ? _c : "";
        message.countryCode = (_d = object.countryCode) !== null && _d !== void 0 ? _d : "";
        message.screenWidth = (_e = object.screenWidth) !== null && _e !== void 0 ? _e : 0;
        message.screenHeight = (_f = object.screenHeight) !== null && _f !== void 0 ? _f : 0;
        message.connectivity = (object.connectivity !== undefined && object.connectivity !== null)
            ? Connectivity.fromPartial(object.connectivity)
            : undefined;
        message.maxVideoWidthPx = (_g = object.maxVideoWidthPx) !== null && _g !== void 0 ? _g : 0;
        message.maxVideoHeightPx = (_h = object.maxVideoHeightPx) !== null && _h !== void 0 ? _h : 0;
        message.benchmarkResults = ((_j = object.benchmarkResults) === null || _j === void 0 ? void 0 : _j.map((e) => BenchmarkResult.fromPartial(e))) || [];
        message.deltaSync = (_k = object.deltaSync) !== null && _k !== void 0 ? _k : false;
        message.userAgent = (_l = object.userAgent) !== null && _l !== void 0 ? _l : "";
        message.triggerEventType = (_m = object.triggerEventType) !== null && _m !== void 0 ? _m : 0;
        message.appState = (_o = object.appState) !== null && _o !== void 0 ? _o : 0;
        message.locale = (_p = object.locale) !== null && _p !== void 0 ? _p : "";
        message.deviceId = (_q = object.deviceId) !== null && _q !== void 0 ? _q : "";
        message.userId = (_r = object.userId) !== null && _r !== void 0 ? _r : "";
        message.clientIp = (_s = object.clientIp) !== null && _s !== void 0 ? _s : "";
        message.isUnAuthorized = (_t = object.isUnAuthorized) !== null && _t !== void 0 ? _t : false;
        message.appLocale = (_u = object.appLocale) !== null && _u !== void 0 ? _u : "";
        message.instrumentation = (_v = object.instrumentation) !== null && _v !== void 0 ? _v : 0;
        message.lastSuccessfulSync = (_w = object.lastSuccessfulSync) !== null && _w !== void 0 ? _w : "0";
        message.isLogout = (_x = object.isLogout) !== null && _x !== void 0 ? _x : false;
        message.packageInstaller = (_y = object.packageInstaller) !== null && _y !== void 0 ? _y : "";
        message.syncTriggerBlizzardSessionId = (_z = object.syncTriggerBlizzardSessionId) !== null && _z !== void 0 ? _z : "";
        message.syncExecutionBlizzardSessionId = (_0 = object.syncExecutionBlizzardSessionId) !== null && _0 !== void 0 ? _0 : "";
        message.cofSyncTriggerDelayFromStartupMs = (_1 = object.cofSyncTriggerDelayFromStartupMs) !== null && _1 !== void 0 ? _1 : 0;
        message.cofSyncExecutionDelayFromStartupMs = (_2 = object.cofSyncExecutionDelayFromStartupMs) !== null && _2 !== void 0 ? _2 : 0;
        message.syncTriggerTime = (_3 = object.syncTriggerTime) !== null && _3 !== void 0 ? _3 : "0";
        message.decoderEncoderAvailability =
            (object.decoderEncoderAvailability !== undefined && object.decoderEncoderAvailability !== null)
                ? DecoderEncoderAvailablity.fromPartial(object.decoderEncoderAvailability)
                : undefined;
        message.snapkitAppId = (_4 = object.snapkitAppId) !== null && _4 !== void 0 ? _4 : "";
        message.lenscoreVersion = (_5 = object.lenscoreVersion) !== null && _5 !== void 0 ? _5 : 0;
        message.ruid = (object.ruid !== undefined && object.ruid !== null) ? Ruid.fromPartial(object.ruid) : undefined;
        message.configNames = ((_6 = object.configNames) === null || _6 === void 0 ? void 0 : _6.map((e) => e)) || [];
        message.includeTestUserTreatments = (_7 = object.includeTestUserTreatments) !== null && _7 !== void 0 ? _7 : false;
        message.disableExposureLogging = (_8 = object.disableExposureLogging) !== null && _8 !== void 0 ? _8 : false;
        message.lensClusterOrig4 = (_9 = object.lensClusterOrig4) !== null && _9 !== void 0 ? _9 : 0;
        message.clientId = (_10 = object.clientId) !== null && _10 !== void 0 ? _10 : "";
        message.propertyOverrides = (object.propertyOverrides !== undefined && object.propertyOverrides !== null)
            ? PropertyOverrides.fromPartial(object.propertyOverrides)
            : undefined;
        message.forLockscreenMode = (_11 = object.forLockscreenMode) !== null && _11 !== void 0 ? _11 : false;
        message.osBuildVersion = (_12 = object.osBuildVersion) !== null && _12 !== void 0 ? _12 : "";
        return message;
    },
};
function createBasePropertyOverrides() {
    return { isWeb: false };
}
const PropertyOverrides = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isWeb !== false) {
            writer.uint32(8).bool(message.isWeb);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePropertyOverrides();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isWeb = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PropertyOverrides.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePropertyOverrides();
        message.isWeb = (_a = object.isWeb) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseConnectivity() {
    return { networkType: 0, isMetered: undefined, isRoaming: undefined, carrier: "" };
}
const Connectivity = {
    encode(message, writer = new BinaryWriter()) {
        if (message.networkType !== 0) {
            writer.uint32(8).int32(message.networkType);
        }
        if (message.isMetered !== undefined) {
            BoolValue.encode({ value: message.isMetered }, writer.uint32(18).fork()).join();
        }
        if (message.isRoaming !== undefined) {
            BoolValue.encode({ value: message.isRoaming }, writer.uint32(26).fork()).join();
        }
        if (message.carrier !== "") {
            writer.uint32(34).string(message.carrier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnectivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.networkType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.isMetered = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.isRoaming = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.carrier = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Connectivity.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseConnectivity();
        message.networkType = (_a = object.networkType) !== null && _a !== void 0 ? _a : 0;
        message.isMetered = (_b = object.isMetered) !== null && _b !== void 0 ? _b : undefined;
        message.isRoaming = (_c = object.isRoaming) !== null && _c !== void 0 ? _c : undefined;
        message.carrier = (_d = object.carrier) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDecoderEncoderAvailablity() {
    return { isSnapVp9DecoderAvailable: false, isSnapAv1DecoderAvailable: false };
}
const DecoderEncoderAvailablity = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isSnapVp9DecoderAvailable !== false) {
            writer.uint32(8).bool(message.isSnapVp9DecoderAvailable);
        }
        if (message.isSnapAv1DecoderAvailable !== false) {
            writer.uint32(16).bool(message.isSnapAv1DecoderAvailable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecoderEncoderAvailablity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isSnapVp9DecoderAvailable = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isSnapAv1DecoderAvailable = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DecoderEncoderAvailablity.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDecoderEncoderAvailablity();
        message.isSnapVp9DecoderAvailable = (_a = object.isSnapVp9DecoderAvailable) !== null && _a !== void 0 ? _a : false;
        message.isSnapAv1DecoderAvailable = (_b = object.isSnapAv1DecoderAvailable) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
//# sourceMappingURL=config_request.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/common/value.js


const value_protobufPackage = "snapchat.common";
function createBaseMapRecord() {
    return { key: "", value: "" };
}
const MapRecord = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MapRecord.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMapRecord();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMapRecords() {
    return { records: [] };
}
const MapRecords = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.records) {
            MapRecord.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapRecords();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.records.push(MapRecord.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MapRecords.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMapRecords();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map((e) => MapRecord.fromPartial(e))) || [];
        return message;
    },
};
function createBaseStringArray() {
    return { value: [] };
}
const StringArray = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.value) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStringArray();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return StringArray.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStringArray();
        message.value = ((_a = object.value) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseValue() {
    return {
        intValue: undefined,
        longValue: undefined,
        floatValue: undefined,
        doubleValue: undefined,
        boolValue: undefined,
        stringValue: undefined,
        anyValue: undefined,
        mapValue: undefined,
        intPairValue: undefined,
        stringArrayValue: undefined,
    };
}
const Value = {
    encode(message, writer = new BinaryWriter()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(29).float(message.floatValue);
        }
        if (message.doubleValue !== undefined) {
            writer.uint32(73).double(message.doubleValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(32).bool(message.boolValue);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(42).string(message.stringValue);
        }
        if (message.anyValue !== undefined) {
            Any.encode(message.anyValue, writer.uint32(50).fork()).join();
        }
        if (message.mapValue !== undefined) {
            MapRecords.encode(message.mapValue, writer.uint32(58).fork()).join();
        }
        if (message.intPairValue !== undefined) {
            writer.uint32(65).fixed64(message.intPairValue);
        }
        if (message.stringArrayValue !== undefined) {
            StringArray.encode(message.stringArrayValue, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.intValue = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.longValue = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.floatValue = reader.float();
                    continue;
                }
                case 9: {
                    if (tag !== 73) {
                        break;
                    }
                    message.doubleValue = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.anyValue = Any.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.mapValue = MapRecords.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 65) {
                        break;
                    }
                    message.intPairValue = reader.fixed64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.stringArrayValue = StringArray.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.floatValue = (_c = object.floatValue) !== null && _c !== void 0 ? _c : undefined;
        message.doubleValue = (_d = object.doubleValue) !== null && _d !== void 0 ? _d : undefined;
        message.boolValue = (_e = object.boolValue) !== null && _e !== void 0 ? _e : undefined;
        message.stringValue = (_f = object.stringValue) !== null && _f !== void 0 ? _f : undefined;
        message.anyValue = (object.anyValue !== undefined && object.anyValue !== null)
            ? Any.fromPartial(object.anyValue)
            : undefined;
        message.mapValue = (object.mapValue !== undefined && object.mapValue !== null)
            ? MapRecords.fromPartial(object.mapValue)
            : undefined;
        message.intPairValue = (_g = object.intPairValue) !== null && _g !== void 0 ? _g : undefined;
        message.stringArrayValue = (object.stringArrayValue !== undefined && object.stringArrayValue !== null)
            ? StringArray.fromPartial(object.stringArrayValue)
            : undefined;
        return message;
    },
};
//# sourceMappingURL=value.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/config_result.js


const config_result_protobufPackage = "snapchat.cdp.cof";
var ConfigResult_ServePlatform;
(function (ConfigResult_ServePlatform) {
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNKNOWN_CONTEXT_PLATFORM"] = 0] = "UNKNOWN_CONTEXT_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["IOS_PLATFORM"] = 1] = "IOS_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["ANDROID_PLATFORM"] = 2] = "ANDROID_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["SERVER_PLATFORM"] = 3] = "SERVER_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigResult_ServePlatform || (ConfigResult_ServePlatform = {}));
var ClientTargetingExpression_Operator;
(function (ClientTargetingExpression_Operator) {
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNKNOWN_OPERATOR"] = 0] = "UNKNOWN_OPERATOR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["AND"] = 1] = "AND";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["OR"] = 2] = "OR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_Operator || (ClientTargetingExpression_Operator = {}));
var ClientTargetingExpression_PredicateOperator;
(function (ClientTargetingExpression_PredicateOperator) {
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNKNOWN_PREDICATE_OPERATOR"] = 0] = "UNKNOWN_PREDICATE_OPERATOR";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["EQUAL"] = 1] = "EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["NOT_EQUAL"] = 2] = "NOT_EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["GREATER_THAN_OR_EQUAL_TO"] = 3] = "GREATER_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["LESS_THAN_OR_EQUAL_TO"] = 4] = "LESS_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_PredicateOperator || (ClientTargetingExpression_PredicateOperator = {}));
var ClientTargetingExpression_EvaluationSite;
(function (ClientTargetingExpression_EvaluationSite) {
    ClientTargetingExpression_EvaluationSite[ClientTargetingExpression_EvaluationSite["UNSET"] = 0] = "UNSET";
    ClientTargetingExpression_EvaluationSite[ClientTargetingExpression_EvaluationSite["CLIENT"] = 1] = "CLIENT";
    ClientTargetingExpression_EvaluationSite[ClientTargetingExpression_EvaluationSite["SERVER"] = 2] = "SERVER";
    ClientTargetingExpression_EvaluationSite[ClientTargetingExpression_EvaluationSite["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_EvaluationSite || (ClientTargetingExpression_EvaluationSite = {}));
var ClientTargetingExpression_Property;
(function (ClientTargetingExpression_Property) {
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNKNOWN_PROPERTY"] = 0] = "UNKNOWN_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BATTERY_LEVEL"] = 1] = "BATTERY_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFLINE"] = 2] = "IS_OFFLINE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_CHARGING"] = 3] = "IS_CHARGING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BANDWIDTH"] = 4] = "BANDWIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_SIZE"] = 5] = "DISK_SIZE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_AVAILABLE"] = 6] = "DISK_AVAILABLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE_DEPRECATED"] = 7] = "MEDIA_TYPE_DEPRECATED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_PUBLIC_STORY"] = 8] = "IS_PUBLIC_STORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFICIAL_STORY"] = 9] = "IS_OFFICIAL_STORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_DIRECTION"] = 10] = "CAMERA_DIRECTION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_CONTEXT"] = 11] = "CAMERA_CONTEXT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_API"] = 12] = "CAMERA_API";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_FLASH_STATE"] = 13] = "CAMERA_FLASH_STATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_SOURCE"] = 14] = "SNAP_SOURCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LEGACY_MUSHROOM_CONTENT_TYPE"] = 15] = "LEGACY_MUSHROOM_CONTENT_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UPLOAD_BANDWIDTH"] = 16] = "UPLOAD_BANDWIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_LEVEL"] = 17] = "CAMERA2_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_NIGHT_MODE_STATE"] = 18] = "CAMERA_NIGHT_MODE_STATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_LANGUAGE"] = 19] = "USER_LANGUAGE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VIDEO_DURATION"] = 20] = "VIDEO_DURATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_MOBILE_NETWORK_GENERATION"] = 21] = "REALTIME_MOBILE_NETWORK_GENERATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_TYPE"] = 22] = "REALTIME_NETWORK_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_METERED"] = 23] = "REALTIME_NETWORK_IS_METERED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_ROAMING"] = 24] = "REALTIME_NETWORK_IS_ROAMING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_IS_FIRST_CAPTURE"] = 25] = "CAMERA_IS_FIRST_CAPTURE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PICTURE_MODE"] = 26] = "PICTURE_MODE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_USE_CASE"] = 27] = "BOLT_USE_CASE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CDN_EXPERIMENTATION_ID"] = 28] = "BOLT_CDN_EXPERIMENTATION_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_LENS_ACTIVATION"] = 29] = "MINS_SINCE_LAST_LENS_ACTIVATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION"] = 30] = "MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_LOGIN_OR_OPEN"] = 31] = "DAYS_SINCE_LAST_LOGIN_OR_OPEN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPECTACLES_VERSION"] = 32] = "SPECTACLES_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STICKY_MAX_CONNECTION_TYPE"] = 33] = "STICKY_MAX_CONNECTION_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_ANIMATED_OVERLAY"] = 34] = "WITH_ANIMATED_OVERLAY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ESTIMATED_DURATION_FOR_EVENT_MS"] = 35] = "ESTIMATED_DURATION_FOR_EVENT_MS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["URL"] = 36] = "URL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_SOURCE"] = 37] = "MEDIA_SOURCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ASSET_TYPE"] = 38] = "ASSET_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_IS_CONTENT_POPULAR"] = 39] = "BOLT_IS_CONTENT_POPULAR";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAPTURE_MODE"] = 40] = "CAPTURE_MODE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VP9_SOFTWARE_DECODING_SUPPORTED"] = 41] = "VP9_SOFTWARE_DECODING_SUPPORTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_SOFTWARE_DECODING_SUPPORTED"] = 42] = "AV1_SOFTWARE_DECODING_SUPPORTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_MUSIC"] = 43] = "WITH_MUSIC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FEATURE_PROVIDED_SIZE"] = 44] = "FEATURE_PROVIDED_SIZE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE"] = 45] = "MEDIA_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCANNED_CATEGORY_IDS"] = 46] = "SCANNED_CATEGORY_IDS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTENT_VIEW_SOURCE"] = 47] = "CONTENT_VIEW_SOURCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_HEVC"] = 48] = "RECIPIENTS_SUPPORT_HEVC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COGNAC_APP_ID"] = 49] = "COGNAC_APP_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_VERIFIED"] = 50] = "EMAIL_VERIFIED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PHONE_VERIFIED"] = 51] = "PHONE_VERIFIED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NOTIFICATION_PERM_GRANTED"] = 52] = "NOTIFICATION_PERM_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_GRANTED"] = 53] = "CONTACT_PERM_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_COUNT"] = 54] = "MUTUAL_FRIENDS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GROUPS_COUNT"] = 55] = "GROUPS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS"] = 56] = "HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PLAYBACK_ITEM_TYPE"] = 57] = "PLAYBACK_ITEM_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_BOOLEAN_PROPERTY"] = 58] = "SUP_BOOLEAN_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_INTEGER_PROPERTY"] = 59] = "SUP_INTEGER_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_LONG_PROPERTY"] = 60] = "SUP_LONG_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_STRING_PROPERTY"] = 61] = "SUP_STRING_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_DOUBLE_PROPERTY"] = 62] = "SUP_DOUBLE_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_MILLIS_PROPERTY_TO_NOW"] = 63] = "SUP_MILLIS_PROPERTY_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USED_SPECTACLES"] = 64] = "HAS_USED_SPECTACLES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_SECS_PROPERTY_TO_NOW"] = 65] = "SUP_SECS_PROPERTY_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CLIENT_APP_STATE"] = 66] = "BOLT_CLIENT_APP_STATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_SET"] = 67] = "EMAIL_SET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BITMOJI_SET"] = 68] = "BITMOJI_SET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["QUICK_TAP_CAMERA_SUPPORTED_ENABLED"] = 69] = "QUICK_TAP_CAMERA_SUPPORTED_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ADD_FRIENDS_REQUEST"] = 70] = "HAS_ADD_FRIENDS_REQUEST";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_FROM_PUSH"] = 71] = "APP_LAUNCH_FROM_PUSH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_TYPE"] = 72] = "APP_LAUNCH_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT"] = 73] = "BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 74] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT"] = 75] = "BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_NUM_IN_APP_WARNINGS"] = 76] = "FST_NUM_IN_APP_WARNINGS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_SHOULD_CHANGE_PASSWORD"] = 77] = "FST_SHOULD_CHANGE_PASSWORD";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_IS_BACKGROUND_CHECK"] = 78] = "FST_IS_BACKGROUND_CHECK";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AUDIO_RECORD_PERM_GRANTED"] = 79] = "AUDIO_RECORD_PERM_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT"] = 80] = "MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT"] = 81] = "BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USE_VERTICAL_NAVIGATION"] = 82] = "USE_VERTICAL_NAVIGATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FREEABLE_DISK_AVAILABLE"] = 83] = "FREEABLE_DISK_AVAILABLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEMORIES_COUNT"] = 84] = "MEMORIES_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MODEL"] = 85] = "DEVICE_MODEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COUNTRY"] = 86] = "COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS"] = 87] = "OS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS_VERSION"] = 88] = "OS_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_VERSION"] = 89] = "APP_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_FLAVOR"] = 90] = "BUILD_FLAVOR";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_ID"] = 91] = "USER_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LOCALE"] = 92] = "LOCALE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_CLUSTER"] = 93] = "DEVICE_CLUSTER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_BRAND"] = 94] = "DEVICE_BRAND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_EMPLOYEE"] = 95] = "IS_EMPLOYEE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USERNAME"] = 96] = "USERNAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TEST_USER"] = 97] = "IS_TEST_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PROFILE"] = 98] = "USER_PROFILE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_WIDTH"] = 99] = "SCREEN_WIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_HEIGHT"] = 100] = "SCREEN_HEIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SUPPORT"] = 101] = "HEVC_SUPPORT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_TYPE"] = 102] = "NETWORK_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_WIDTH"] = 103] = "MAX_VIDEO_WIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_HEIGHT"] = 104] = "MAX_VIDEO_HEIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_NETWORK_METERED"] = 105] = "IS_NETWORK_METERED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ROAMING"] = 106] = "IS_ROAMING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_ENGAGEMENT_LEVEL"] = 107] = "APP_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_ENGAGEMENT_LEVEL"] = 108] = "COMMUNICATION_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FRIEND_STORY_ENGAGEMENT_LEVEL"] = 109] = "FRIEND_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLIC_USER_STORY_ENGAGEMENT_LEVEL"] = 110] = "PUBLIC_USER_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLISHER_STORY_ENGAGEMENT_LEVEL"] = 111] = "PUBLISHER_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_ENGAGEMENT_LEVEL"] = 112] = "LENS_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NON_FRIEND_STORY_ENGAGEMENT_LEVEL"] = 113] = "NON_FRIEND_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FOLLOWER_SIZE_LEVEL"] = 114] = "FOLLOWER_SIZE_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION"] = 115] = "DAYS_SINCE_CREATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA"] = 116] = "USER_PERSONA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_CREATION_TIME"] = 117] = "USER_CREATION_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MOBILE_NETWORK_TYPE"] = 118] = "MOBILE_NETWORK_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AGGREGATED_USER_BANDWIDTH"] = 119] = "AGGREGATED_USER_BANDWIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED"] = 120] = "LENS_CLUSTER_BIASED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_LOG"] = 121] = "LENS_CLUSTER_LOG";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG"] = 122] = "LENS_CLUSTER_ORIG";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG_4"] = 123] = "LENS_CLUSTER_ORIG_4";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED_LOG"] = 124] = "LENS_CLUSTER_BIASED_LOG";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LOCALE"] = 125] = "APP_LOCALE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_COMMON_NAME"] = 126] = "DEVICE_COMMON_NAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_FRIEND_COUNT"] = 127] = "USER_FRIEND_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["L90_COUNTRY"] = 128] = "L90_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STUB"] = 129] = "STUB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TRUE"] = 130] = "IS_TRUE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_RATIO"] = 131] = "STORY_POST_RATIO";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GENDER"] = 132] = "GENDER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INFERRED_AGE_BUCKET"] = 133] = "INFERRED_AGE_BUCKET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORIES"] = 134] = "STORIES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SENDS"] = 135] = "SENDS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_CREATE_L7"] = 136] = "SNAP_CREATE_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_L7"] = 137] = "STORY_POST_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_L7"] = 138] = "COMMUNICATION_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DF_L7"] = 139] = "DF_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_L7"] = 140] = "APP_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION_BUCKET"] = 141] = "DAYS_SINCE_CREATION_BUCKET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS"] = 142] = "BIDIRECTIONAL_FRIEND_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_PREDICTION"] = 143] = "STORY_POST_PREDICTION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPENS"] = 144] = "APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES"] = 145] = "LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SNAPS"] = 146] = "LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_OPS"] = 147] = "LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_APP_OPENS"] = 148] = "W1_APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SWIPES"] = 149] = "W1_LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SNAPS"] = 150] = "W1_LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_OPS"] = 151] = "W1_LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_APP_OPENS"] = 152] = "W2_APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SWIPES"] = 153] = "W2_LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SNAPS"] = 154] = "W2_LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_OPS"] = 155] = "W2_LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_APP_OPENS"] = 156] = "W34_APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SWIPES"] = 157] = "W34_LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SNAPS"] = 158] = "W34_LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_OPS"] = 159] = "W34_LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES_PREDICTION"] = 160] = "LENS_SWIPES_PREDICTION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REGISTRATION_COUNTRY"] = 161] = "REGISTRATION_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_ASN"] = 162] = "IP_ASN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_REGION"] = 163] = "IP_REGION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_CITY"] = 164] = "IP_CITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USER_ID"] = 165] = "HAS_USER_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BITMOJI"] = 166] = "HAS_BITMOJI";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_APP_OPENS_LAST_8_DAYS"] = 167] = "NUM_APP_OPENS_LAST_8_DAYS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_VIEW_DAYS_L7"] = 168] = "NUM_FEATURE_STORY_VIEW_DAYS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_SYNC_DAYS_L7"] = 169] = "NUM_FEATURE_STORY_SYNC_DAYS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEXAGON_NN_SUPPORTED_VERSION"] = 170] = "HEXAGON_NN_SUPPORTED_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_QUALITY"] = 171] = "NETWORK_QUALITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MEMORY_MB"] = 172] = "DEVICE_MEMORY_MB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_GL_VERSION"] = 173] = "DEVICE_GL_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRO_STATUS"] = 174] = "SNAP_PRO_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_VP9_DECODING_SUPPORT"] = 175] = "DEVICE_VP9_DECODING_SUPPORT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AVG_FRIEND_STORY_VIEW_COUNT_L7"] = 176] = "AVG_FRIEND_STORY_VIEW_COUNT_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_JOIN_TIME"] = 177] = "GAME_JOIN_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_LAST_ACTIVE_TIME"] = 178] = "GAME_LAST_ACTIVE_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_GAME_ACTIVITY"] = 179] = "DAYS_SINCE_FIRST_GAME_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_GAME_ACTIVITY"] = 180] = "DAYS_SINCE_LAST_GAME_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PF_PAGE_SESSIONS_WITH_LONG_IMP"] = 181] = "PF_PAGE_SESSIONS_WITH_LONG_IMP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WIRELESS_CARRIER"] = 182] = "WIRELESS_CARRIER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_JOIN_TIME"] = 183] = "MINIS_JOIN_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_LAST_ACTIVE_TIME"] = 184] = "MINIS_LAST_ACTIVE_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_MINIS_ACTIVITY"] = 185] = "DAYS_SINCE_FIRST_MINIS_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_MINIS_ACTIVITY"] = 186] = "DAYS_SINCE_LAST_MINIS_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_AV1_DECODING_SUPPORT"] = 187] = "DEVICE_AV1_DECODING_SUPPORT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_PACKAGE_INSTALLER"] = 188] = "APP_PACKAGE_INSTALLER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL"] = 189] = "STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REPORTED_AGE"] = 190] = "REPORTED_AGE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ANDROID_MOBILE_SERVICES_PROVIDER"] = 191] = "ANDROID_MOBILE_SERVICES_PROVIDER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACQUIRED_USER"] = 192] = "IS_ACQUIRED_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["YDPI"] = 193] = "YDPI";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS_VELLUM"] = 194] = "BIDIRECTIONAL_FRIEND_STATUS_VELLUM";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORIGIN"] = 195] = "ORIGIN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENSCORE_VERSION"] = 196] = "LENSCORE_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPKIT_APP_ID"] = 197] = "SNAPKIT_APP_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GPU"] = 198] = "GPU";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_NAME"] = 199] = "CHIPSET_NAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_VERSION"] = 200] = "CHIPSET_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ZERO_IDFA"] = 201] = "HAS_ZERO_IDFA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LIMIT_AD_TRACKING"] = 202] = "LIMIT_AD_TRACKING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATT_AUTH_STATUS"] = 203] = "ATT_AUTH_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_FRONT_SS_GAIN_OVER_TPA"] = 204] = "CAMERA2_FRONT_SS_GAIN_OVER_TPA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATTACHMENT_TOOL_V2"] = 205] = "ATTACHMENT_TOOL_V2";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA_V3"] = 206] = "USER_PERSONA_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITH_HEVC"] = 207] = "SNAPS_SEND_WITH_HEVC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITHOUT_HEVC"] = 208] = "SNAPS_SEND_WITHOUT_HEVC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_NATIVE_CRASH_OVER_CAMERA1"] = 209] = "CAMERA2_NATIVE_CRASH_OVER_CAMERA1";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_G2S_LATENCY_OVER_CAMERA1"] = 210] = "CAMERA2_G2S_LATENCY_OVER_CAMERA1";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_INTERNAL"] = 211] = "IS_INTERNAL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_WEB"] = 212] = "IS_WEB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MAP"] = 213] = "APP_OPEN_TO_MAP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_FRIENDSFEED"] = 214] = "APP_OPEN_TO_FRIENDSFEED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_LENSES"] = 215] = "APP_OPEN_TO_LENSES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MEMORIES"] = 216] = "APP_OPEN_TO_MEMORIES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_COMMUNITY"] = 217] = "APP_OPEN_TO_COMMUNITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_SPOTLIGHT"] = 218] = "APP_OPEN_TO_SPOTLIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_IMPACTED_BY_PINC_893"] = 219] = "IS_IMPACTED_BY_PINC_893";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_BEFORE_BIRTHDAY"] = 220] = "DAYS_BEFORE_BIRTHDAY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BIPA"] = 221] = "HAS_BIPA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_STORY_ENGAGEMENT_STATUS"] = 222] = "SPOTLIGHT_STORY_ENGAGEMENT_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INCLUSION_PANEL_MEMBER"] = 223] = "INCLUSION_PANEL_MEMBER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_HW_DECODER"] = 224] = "HEVC_HW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SW_DECODER"] = 225] = "HEVC_SW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HASH_MURMUR3_128_MOD_100"] = 226] = "HASH_MURMUR3_128_MOD_100";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ACTIVE_SNAPCHAT_PLUS"] = 227] = "HAS_ACTIVE_SNAPCHAT_PLUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_KIT_OAUTH_ID"] = 228] = "SNAP_KIT_OAUTH_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_TYPE"] = 229] = "ORGANIZATION_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHUNK_UPLOAD_SUPPORT_REQUIRED"] = 230] = "CHUNK_UPLOAD_SUPPORT_REQUIRED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CLOUDFRONT_POP"] = 231] = "CLOUDFRONT_POP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 232] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT"] = 233] = "BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT"] = 234] = "BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 235] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH"] = 236] = "FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_WIDTH"] = 237] = "WEB_SCREEN_WIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_HEIGHT"] = 238] = "WEB_SCREEN_HEIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED"] = 239] = "SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRIVACY"] = 240] = "SNAP_PRIVACY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADS_INTERFACES_IS_NEW_ORGANIZATION"] = 241] = "ADS_INTERFACES_IS_NEW_ORGANIZATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SERVER_ONLY"] = 242] = "SERVER_ONLY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_ORGANIZATION"] = 243] = "GHE_ORGANIZATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_REPOSITORY"] = 244] = "GHE_REPOSITORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_USER_EMAIL"] = 245] = "GHE_USER_EMAIL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_ID"] = 246] = "BUILD_DEFINITION_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_NAME"] = 247] = "BUILD_DEFINITION_NAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LCA_PRINCIPAL"] = 248] = "LCA_PRINCIPAL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_PERFORMANCE_CLASS"] = 249] = "MEDIA_PERFORMANCE_CLASS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNITY_COUNT"] = 250] = "COMMUNITY_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_FMP4"] = 251] = "RECIPIENTS_SUPPORT_FMP4";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_ASPECT_RATIO"] = 252] = "SCREEN_ASPECT_RATIO";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_GROUP"] = 253] = "USER_GROUP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_HAS_DENIED_CAMERA_PERM"] = 254] = "USER_HAS_DENIED_CAMERA_PERM";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMEOS_ENGAGEMENT_LEVEL"] = 255] = "CAMEOS_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CAMEOS"] = 256] = "HAS_CAMEOS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACTIVE_LENS_VIDEO_CHAT_USER"] = 257] = "IS_ACTIVE_LENS_VIDEO_CHAT_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_SPOTLIGHT_POSTS_L7"] = 258] = "NUM_SPOTLIGHT_POSTS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_MAP_POSTS_L7"] = 259] = "NUM_MAP_POSTS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CREATED_PUBLIC_PROFILE"] = 260] = "HAS_CREATED_PUBLIC_PROFILE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE"] = 261] = "HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_CAMERA_PERM_DENY"] = 262] = "DAYS_SINCE_LAST_CAMERA_PERM_DENY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_AD_ORG_JOIN"] = 263] = "DAYS_SINCE_AD_ORG_JOIN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_AD_CREATE"] = 264] = "DAYS_SINCE_FIRST_AD_CREATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_COUNTRY"] = 265] = "ORGANIZATION_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_DWEB_VISIT"] = 266] = "DAYS_SINCE_FIRST_DWEB_VISIT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_DWEB_VISIT"] = 267] = "DAYS_SINCE_LAST_DWEB_VISIT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEEKS_SINCE_USING_DWEB"] = 268] = "WEEKS_SINCE_USING_DWEB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_LENS"] = 269] = "HAS_LENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_IMPRESSION_COUNT"] = 270] = "BILLBOARD_SERVER_IMPRESSION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CLICK_COUNT"] = 271] = "BILLBOARD_SERVER_CLICK_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_DISMISS_COUNT"] = 272] = "BILLBOARD_SERVER_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_INTERACTION_COUNT"] = 273] = "BILLBOARD_SERVER_INTERACTION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 274] = "BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 275] = "BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW"] = 276] = "BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW"] = 277] = "BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 278] = "BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW"] = 279] = "BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 280] = "BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 281] = "BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT"] = 282] = "BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW"] = 283] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW"] = 284] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 285] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW"] = 286] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 287] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_AD_SPEND"] = 288] = "DAYS_SINCE_FIRST_AD_SPEND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_AD_SPEND"] = 289] = "DAYS_SINCE_LAST_AD_SPEND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_2_PLUS_STORY_SESSION_7D_STATUS_DETAILED"] = 290] = "SPOTLIGHT_2_PLUS_STORY_SESSION_7D_STATUS_DETAILED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_5_PLUS_STORY_SESSION_7D_STATUS_DETAILED"] = 291] = "SPOTLIGHT_5_PLUS_STORY_SESSION_7D_STATUS_DETAILED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_STORY_VIEW_7D_STATUS_DETAILED"] = 292] = "SPOTLIGHT_STORY_VIEW_7D_STATUS_DETAILED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LAST_USER_ACCEPTED_TOS"] = 293] = "LAST_USER_ACCEPTED_TOS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UPDATED_DEVICE_CLUSTER"] = 294] = "UPDATED_DEVICE_CLUSTER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CREATOR_TIER"] = 295] = "CREATOR_TIER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_SW_DECODER"] = 296] = "AV1_SW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_HW_DECODER"] = 297] = "AV1_HW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_EXPLICIT_PUBLIC_PROFILE"] = 298] = "HAS_EXPLICIT_PUBLIC_PROFILE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LARGER_TEXT_DISPLAY_OPTION_ENABLED"] = 299] = "LARGER_TEXT_DISPLAY_OPTION_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_PUBLIC_POSTING_PREFERRED_USER"] = 300] = "IS_PUBLIC_POSTING_PREFERRED_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RUID"] = 301] = "RUID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTABLE_USERNAME"] = 302] = "MUTABLE_USERNAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUDGET_GROUP_ID"] = 303] = "BUDGET_GROUP_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AB_POPULATION_RANGE_HASH_FUNC"] = 304] = "AB_POPULATION_RANGE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AB_TREATMENT_RANGE_HASH_FUNC"] = 305] = "AB_TREATMENT_RANGE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REGISTRATION_IP_REGION"] = 306] = "REGISTRATION_IP_REGION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RUID_TYPE"] = 307] = "RUID_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PLUS_INTERNAL_ONLY"] = 308] = "PLUS_INTERNAL_ONLY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COF_ROLLOUT_RANGE_HASH_FUNC"] = 309] = "COF_ROLLOUT_RANGE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_HAS_AI_SELFIE"] = 341] = "SUP_HAS_AI_SELFIE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_HAS_DREAMS"] = 342] = "SUP_HAS_DREAMS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_ACTIVITY"] = 343] = "DAYS_SINCE_LAST_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_OS_GRANTED"] = 344] = "CONTACT_PERM_OS_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_USER_GRANTED"] = 345] = "CONTACT_PERM_USER_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_GPU_V2"] = 346] = "LENS_CLUSTER_GPU_V2";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAN_ACCESS_ADS_TAB"] = 347] = "CAN_ACCESS_ADS_TAB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GOOGLE_CDN_POP"] = 348] = "GOOGLE_CDN_POP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_STRONG_RELATIONSHIPS_V3"] = 349] = "NUM_STRONG_RELATIONSHIPS_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_CLOSE_PLUS_RELATIONSHIPS_V3"] = 350] = "NUM_CLOSE_PLUS_RELATIONSHIPS_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_ACQUAINTANCE_PLUS_RELATIONSHIPS_V3"] = 351] = "NUM_ACQUAINTANCE_PLUS_RELATIONSHIPS_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DREAMS_ENGAGEMENT_STATUS"] = 352] = "DREAMS_ENGAGEMENT_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_LOW_LIGHT"] = 353] = "IS_LOW_LIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GALLERY_HAS_2023_YEAR_END_STORY"] = 354] = "GALLERY_HAS_2023_YEAR_END_STORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHUNK_UPLOAD_PREFERENCE"] = 355] = "CHUNK_UPLOAD_PREFERENCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADMIN_USE_ONLY_IN_AB_TRAFFIC_SPLIT"] = 356] = "ADMIN_USE_ONLY_IN_AB_TRAFFIC_SPLIT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_IPHONE"] = 357] = "IS_IPHONE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_S11_COUNTRY"] = 358] = "IS_S11_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_S11_L90_COUNTRY"] = 359] = "IS_S11_L90_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_ACTIVE_FRIENDS_L7"] = 360] = "NUM_ACTIVE_FRIENDS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_BIDIRECTIONAL_COMMUNICATION_FRIENDS_L7"] = 361] = "NUM_BIDIRECTIONAL_COMMUNICATION_FRIENDS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FULLY_ROLLED_OUT_STUDIES_OPTIMIZATION_ENABLED"] = 362] = "FULLY_ROLLED_OUT_STUDIES_OPTIMIZATION_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USER_ONBOARDED"] = 367] = "HAS_USER_ONBOARDED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADS_STANDARD_AB_HASH_FUNC"] = 368] = "ADS_STANDARD_AB_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TOP_STORY_POSTER"] = 369] = "IS_TOP_STORY_POSTER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNITY_COUNT_SERVER"] = 370] = "COMMUNITY_COUNT_SERVER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REPORT_VOLUME_LAST_14_DAYS"] = 371] = "REPORT_VOLUME_LAST_14_DAYS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_CONCURRENT_CAMERA_SUPPORTED"] = 372] = "IS_CONCURRENT_CAMERA_SUPPORTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_AUTHORIZATION_STATUS"] = 373] = "CONTACT_AUTHORIZATION_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISCOVER_FEED_TYPE"] = 374] = "DISCOVER_FEED_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["JOINED_VIA_USER_INVITE"] = 377] = "JOINED_VIA_USER_INVITE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STICKY_REGION"] = 378] = "STICKY_REGION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIPA_REGION"] = 379] = "BIPA_REGION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GRADUAL_ROLLOUT_HASH_FUNC"] = 380] = "GRADUAL_ROLLOUT_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_COF_EDGE_CLIENT"] = 381] = "IS_COF_EDGE_CLIENT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COF_EDGE_CLIENT_VERSION"] = 382] = "COF_EDGE_CLIENT_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_DORMANT"] = 383] = "IS_DORMANT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_FORMER_PHONE_NUMBER"] = 384] = "HAS_FORMER_PHONE_NUMBER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS_BUILD_VERSION"] = 385] = "OS_BUILD_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_DAYS_SINCE_FIRST_AD_CREATE"] = 386] = "SNAP_PROMOTE_DAYS_SINCE_FIRST_AD_CREATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_DAYS_SINCE_LAST_AD_CREATE"] = 387] = "SNAP_PROMOTE_DAYS_SINCE_LAST_AD_CREATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_DAYS_SINCE_FIRST_SPEND"] = 388] = "SNAP_PROMOTE_DAYS_SINCE_FIRST_SPEND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_DAYS_SINCE_LAST_SPEND"] = 389] = "SNAP_PROMOTE_DAYS_SINCE_LAST_SPEND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_TOTAL_SPEND_USD"] = 390] = "SNAP_PROMOTE_TOTAL_SPEND_USD";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_AVG_DAILY_SPEND_USD"] = 391] = "SNAP_PROMOTE_AVG_DAILY_SPEND_USD";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_LAST_OBJECTIVE"] = 392] = "SNAP_PROMOTE_LAST_OBJECTIVE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PROMOTE_BUDGET_REMAINING"] = 393] = "SNAP_PROMOTE_BUDGET_REMAINING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_MONETIZATION_ELIGIBLE"] = 394] = "IS_MONETIZATION_ELIGIBLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OPTED_IN_DATA_SHARING"] = 395] = "IS_OPTED_IN_DATA_SHARING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADS_BUDGET_AB_MACROSTATE_HASH_FUNC"] = 396] = "ADS_BUDGET_AB_MACROSTATE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AB_TREATMENT"] = 397] = "AB_TREATMENT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DREAMS_IN_SNAPFEED_VIEW_ACTIVE_DAYS_L7"] = 398] = "DREAMS_IN_SNAPFEED_VIEW_ACTIVE_DAYS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_Property || (ClientTargetingExpression_Property = {}));
var ClientTargetingExpression_PropertyMetadata_SignalToHash;
(function (ClientTargetingExpression_PropertyMetadata_SignalToHash) {
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNKNOWN_SIGNAL_TO_HASH"] = 0] = "UNKNOWN_SIGNAL_TO_HASH";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_SEED_AND_USER_ID"] = 1] = "HASH_SEED_AND_USER_ID";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_USER_ID_AND_NAMESPACE"] = 2] = "HASH_USER_ID_AND_NAMESPACE";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_PropertyMetadata_SignalToHash || (ClientTargetingExpression_PropertyMetadata_SignalToHash = {}));
function createBaseConfigResult() {
    return {
        configId: "",
        value: undefined,
        targetingExpression: undefined,
        ttlSeconds: "0",
        configRuleUuidBytes: new Uint8Array(0),
        priority: 0,
        namespace: 0,
        studyName: "",
        experimentId: 0,
        delete: false,
        servePlatforms: [],
        sequenceId: 0,
        ruidType: 0,
        segmentOrdinal: 0,
        generatedFromAbAllowlists: false,
        internalFields: undefined,
        configIntId: 0,
    };
}
const ConfigResult = {
    encode(message, writer = new BinaryWriter()) {
        if (message.configId !== "") {
            writer.uint32(10).string(message.configId);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(18).fork()).join();
        }
        if (message.targetingExpression !== undefined) {
            ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(26).fork()).join();
        }
        if (message.ttlSeconds !== "0") {
            writer.uint32(32).int64(message.ttlSeconds);
        }
        if (message.configRuleUuidBytes.length !== 0) {
            writer.uint32(42).bytes(message.configRuleUuidBytes);
        }
        if (message.priority !== 0) {
            writer.uint32(48).int32(message.priority);
        }
        if (message.namespace !== 0) {
            writer.uint32(56).int32(message.namespace);
        }
        if (message.studyName !== "") {
            writer.uint32(66).string(message.studyName);
        }
        if (message.experimentId !== 0) {
            writer.uint32(72).int32(message.experimentId);
        }
        if (message.delete !== false) {
            writer.uint32(80).bool(message.delete);
        }
        writer.uint32(90).fork();
        for (const v of message.servePlatforms) {
            writer.int32(v);
        }
        writer.join();
        if (message.sequenceId !== 0) {
            writer.uint32(96).int32(message.sequenceId);
        }
        if (message.ruidType !== 0) {
            writer.uint32(104).int32(message.ruidType);
        }
        if (message.segmentOrdinal !== 0) {
            writer.uint32(112).int32(message.segmentOrdinal);
        }
        if (message.generatedFromAbAllowlists !== false) {
            writer.uint32(120).bool(message.generatedFromAbAllowlists);
        }
        if (message.internalFields !== undefined) {
            ConfigResult_InternalFields.encode(message.internalFields, writer.uint32(130).fork()).join();
        }
        if (message.configIntId !== 0) {
            writer.uint32(149).sfixed32(message.configIntId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Value.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.targetingExpression = ClientTargetingExpression.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.ttlSeconds = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.configRuleUuidBytes = reader.bytes();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.priority = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.namespace = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.studyName = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.experimentId = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.delete = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag === 88) {
                        message.servePlatforms.push(reader.int32());
                        continue;
                    }
                    if (tag === 90) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.servePlatforms.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.sequenceId = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.ruidType = reader.int32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.segmentOrdinal = reader.int32();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.generatedFromAbAllowlists = reader.bool();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.internalFields = ConfigResult_InternalFields.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 149) {
                        break;
                    }
                    message.configIntId = reader.sfixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseConfigResult();
        message.configId = (_a = object.configId) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
        message.targetingExpression = (object.targetingExpression !== undefined && object.targetingExpression !== null)
            ? ClientTargetingExpression.fromPartial(object.targetingExpression)
            : undefined;
        message.ttlSeconds = (_b = object.ttlSeconds) !== null && _b !== void 0 ? _b : "0";
        message.configRuleUuidBytes = (_c = object.configRuleUuidBytes) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.priority = (_d = object.priority) !== null && _d !== void 0 ? _d : 0;
        message.namespace = (_e = object.namespace) !== null && _e !== void 0 ? _e : 0;
        message.studyName = (_f = object.studyName) !== null && _f !== void 0 ? _f : "";
        message.experimentId = (_g = object.experimentId) !== null && _g !== void 0 ? _g : 0;
        message.delete = (_h = object.delete) !== null && _h !== void 0 ? _h : false;
        message.servePlatforms = ((_j = object.servePlatforms) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : 0;
        message.ruidType = (_l = object.ruidType) !== null && _l !== void 0 ? _l : 0;
        message.segmentOrdinal = (_m = object.segmentOrdinal) !== null && _m !== void 0 ? _m : 0;
        message.generatedFromAbAllowlists = (_o = object.generatedFromAbAllowlists) !== null && _o !== void 0 ? _o : false;
        message.internalFields = (object.internalFields !== undefined && object.internalFields !== null)
            ? ConfigResult_InternalFields.fromPartial(object.internalFields)
            : undefined;
        message.configIntId = (_p = object.configIntId) !== null && _p !== void 0 ? _p : 0;
        return message;
    },
};
function createBaseConfigResult_InternalFields() {
    return {
        configBitmapIndex: 0,
        configResultBitmapIndex: 0,
        hasServerPropertiesOnly: false,
        globalPriority: 0,
        sequenceIds: [],
        studySegmentOrdinal: 0,
        experimentGuid: "0",
        isAbStudyStatusCompleted: false,
        gradualRolloutId: "",
        gradualRolloutIsControl: false,
        gradualRolloutIsDeleted: false,
    };
}
const ConfigResult_InternalFields = {
    encode(message, writer = new BinaryWriter()) {
        if (message.configBitmapIndex !== 0) {
            writer.uint32(8).int32(message.configBitmapIndex);
        }
        if (message.configResultBitmapIndex !== 0) {
            writer.uint32(16).int32(message.configResultBitmapIndex);
        }
        if (message.hasServerPropertiesOnly !== false) {
            writer.uint32(24).bool(message.hasServerPropertiesOnly);
        }
        if (message.globalPriority !== 0) {
            writer.uint32(32).int32(message.globalPriority);
        }
        for (const v of message.sequenceIds) {
            ConfigResult_InternalFields_SequenceIdCandidate.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.studySegmentOrdinal !== 0) {
            writer.uint32(48).int32(message.studySegmentOrdinal);
        }
        if (message.experimentGuid !== "0") {
            writer.uint32(56).uint64(message.experimentGuid);
        }
        if (message.isAbStudyStatusCompleted !== false) {
            writer.uint32(64).bool(message.isAbStudyStatusCompleted);
        }
        if (message.gradualRolloutId !== "") {
            writer.uint32(74).string(message.gradualRolloutId);
        }
        if (message.gradualRolloutIsControl !== false) {
            writer.uint32(80).bool(message.gradualRolloutIsControl);
        }
        if (message.gradualRolloutIsDeleted !== false) {
            writer.uint32(88).bool(message.gradualRolloutIsDeleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResult_InternalFields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.configBitmapIndex = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.configResultBitmapIndex = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.hasServerPropertiesOnly = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.globalPriority = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.sequenceIds.push(ConfigResult_InternalFields_SequenceIdCandidate.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.studySegmentOrdinal = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.experimentGuid = reader.uint64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.isAbStudyStatusCompleted = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.gradualRolloutId = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.gradualRolloutIsControl = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.gradualRolloutIsDeleted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigResult_InternalFields.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseConfigResult_InternalFields();
        message.configBitmapIndex = (_a = object.configBitmapIndex) !== null && _a !== void 0 ? _a : 0;
        message.configResultBitmapIndex = (_b = object.configResultBitmapIndex) !== null && _b !== void 0 ? _b : 0;
        message.hasServerPropertiesOnly = (_c = object.hasServerPropertiesOnly) !== null && _c !== void 0 ? _c : false;
        message.globalPriority = (_d = object.globalPriority) !== null && _d !== void 0 ? _d : 0;
        message.sequenceIds =
            ((_e = object.sequenceIds) === null || _e === void 0 ? void 0 : _e.map((e) => ConfigResult_InternalFields_SequenceIdCandidate.fromPartial(e))) || [];
        message.studySegmentOrdinal = (_f = object.studySegmentOrdinal) !== null && _f !== void 0 ? _f : 0;
        message.experimentGuid = (_g = object.experimentGuid) !== null && _g !== void 0 ? _g : "0";
        message.isAbStudyStatusCompleted = (_h = object.isAbStudyStatusCompleted) !== null && _h !== void 0 ? _h : false;
        message.gradualRolloutId = (_j = object.gradualRolloutId) !== null && _j !== void 0 ? _j : "";
        message.gradualRolloutIsControl = (_k = object.gradualRolloutIsControl) !== null && _k !== void 0 ? _k : false;
        message.gradualRolloutIsDeleted = (_l = object.gradualRolloutIsDeleted) !== null && _l !== void 0 ? _l : false;
        return message;
    },
};
function createBaseConfigResult_InternalFields_SequenceIdCandidate() {
    return { targetingExpression: undefined, sequenceId: 0 };
}
const ConfigResult_InternalFields_SequenceIdCandidate = {
    encode(message, writer = new BinaryWriter()) {
        if (message.targetingExpression !== undefined) {
            ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(10).fork()).join();
        }
        if (message.sequenceId !== 0) {
            writer.uint32(16).int32(message.sequenceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResult_InternalFields_SequenceIdCandidate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.targetingExpression = ClientTargetingExpression.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sequenceId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigResult_InternalFields_SequenceIdCandidate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigResult_InternalFields_SequenceIdCandidate();
        message.targetingExpression = (object.targetingExpression !== undefined && object.targetingExpression !== null)
            ? ClientTargetingExpression.fromPartial(object.targetingExpression)
            : undefined;
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseConfigResultBundle() {
    return { etag: "", configResults: [] };
}
const ConfigResultBundle = {
    encode(message, writer = new BinaryWriter()) {
        if (message.etag !== "") {
            writer.uint32(10).string(message.etag);
        }
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResultBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.etag = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigResultBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConfigResultBundle();
        message.etag = (_a = object.etag) !== null && _a !== void 0 ? _a : "";
        message.configResults = ((_b = object.configResults) === null || _b === void 0 ? void 0 : _b.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSequenceIdCandidate() {
    return { targetingExpression: undefined, sequenceId: 0 };
}
const SequenceIdCandidate = {
    encode(message, writer = new BinaryWriter()) {
        if (message.targetingExpression !== undefined) {
            ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(10).fork()).join();
        }
        if (message.sequenceId !== 0) {
            writer.uint32(16).int32(message.sequenceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSequenceIdCandidate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.targetingExpression = ClientTargetingExpression.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sequenceId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SequenceIdCandidate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSequenceIdCandidate();
        message.targetingExpression = (object.targetingExpression !== undefined && object.targetingExpression !== null)
            ? ClientTargetingExpression.fromPartial(object.targetingExpression)
            : undefined;
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseClientTargetingExpression() {
    return {
        operator: 0,
        children: [],
        property: 0,
        predicateOperator: 0,
        value: undefined,
        propertyMetadata: undefined,
    };
}
const ClientTargetingExpression = {
    encode(message, writer = new BinaryWriter()) {
        if (message.operator !== 0) {
            writer.uint32(8).int32(message.operator);
        }
        for (const v of message.children) {
            ClientTargetingExpression.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.property !== 0) {
            writer.uint32(24).int32(message.property);
        }
        if (message.predicateOperator !== 0) {
            writer.uint32(32).int32(message.predicateOperator);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(42).fork()).join();
        }
        if (message.propertyMetadata !== undefined) {
            ClientTargetingExpression_PropertyMetadata.encode(message.propertyMetadata, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientTargetingExpression();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.operator = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.children.push(ClientTargetingExpression.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.property = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.predicateOperator = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.value = Value.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.propertyMetadata = ClientTargetingExpression_PropertyMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ClientTargetingExpression.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClientTargetingExpression();
        message.operator = (_a = object.operator) !== null && _a !== void 0 ? _a : 0;
        message.children = ((_b = object.children) === null || _b === void 0 ? void 0 : _b.map((e) => ClientTargetingExpression.fromPartial(e))) || [];
        message.property = (_c = object.property) !== null && _c !== void 0 ? _c : 0;
        message.predicateOperator = (_d = object.predicateOperator) !== null && _d !== void 0 ? _d : 0;
        message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
        message.propertyMetadata = (object.propertyMetadata !== undefined && object.propertyMetadata !== null)
            ? ClientTargetingExpression_PropertyMetadata.fromPartial(object.propertyMetadata)
            : undefined;
        return message;
    },
};
function createBaseClientTargetingExpression_PropertyMetadata() {
    return {
        itemId: 0,
        signalToHash: 0,
        abNamespaceForHashing: "",
        abSeedForHashing: "",
        ruidType: undefined,
        cofRolloutSeedForHashing: "",
        adsNonBudgetSegmentLayer: 0,
        adsBudgetAbMacrostateName: "",
    };
}
const ClientTargetingExpression_PropertyMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.itemId !== 0) {
            writer.uint32(8).int32(message.itemId);
        }
        if (message.signalToHash !== 0) {
            writer.uint32(16).int32(message.signalToHash);
        }
        if (message.abNamespaceForHashing !== "") {
            writer.uint32(26).string(message.abNamespaceForHashing);
        }
        if (message.abSeedForHashing !== "") {
            writer.uint32(34).string(message.abSeedForHashing);
        }
        if (message.ruidType !== undefined) {
            writer.uint32(40).int32(message.ruidType);
        }
        if (message.cofRolloutSeedForHashing !== "") {
            writer.uint32(50).string(message.cofRolloutSeedForHashing);
        }
        if (message.adsNonBudgetSegmentLayer !== 0) {
            writer.uint32(56).int32(message.adsNonBudgetSegmentLayer);
        }
        if (message.adsBudgetAbMacrostateName !== "") {
            writer.uint32(66).string(message.adsBudgetAbMacrostateName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientTargetingExpression_PropertyMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.signalToHash = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.abNamespaceForHashing = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.abSeedForHashing = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.ruidType = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.cofRolloutSeedForHashing = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.adsNonBudgetSegmentLayer = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.adsBudgetAbMacrostateName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ClientTargetingExpression_PropertyMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseClientTargetingExpression_PropertyMetadata();
        message.itemId = (_a = object.itemId) !== null && _a !== void 0 ? _a : 0;
        message.signalToHash = (_b = object.signalToHash) !== null && _b !== void 0 ? _b : 0;
        message.abNamespaceForHashing = (_c = object.abNamespaceForHashing) !== null && _c !== void 0 ? _c : "";
        message.abSeedForHashing = (_d = object.abSeedForHashing) !== null && _d !== void 0 ? _d : "";
        message.ruidType = (_e = object.ruidType) !== null && _e !== void 0 ? _e : undefined;
        message.cofRolloutSeedForHashing = (_f = object.cofRolloutSeedForHashing) !== null && _f !== void 0 ? _f : "";
        message.adsNonBudgetSegmentLayer = (_g = object.adsNonBudgetSegmentLayer) !== null && _g !== void 0 ? _g : 0;
        message.adsBudgetAbMacrostateName = (_h = object.adsBudgetAbMacrostateName) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
//# sourceMappingURL=config_result.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/config_response.js



const config_response_protobufPackage = "snapchat.cdp.cof";
function createBaseConfigTargetingResponseDebugData() {
    return { abResultChecksumInput: "" };
}
const ConfigTargetingResponseDebugData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.abResultChecksumInput !== "") {
            writer.uint32(10).string(message.abResultChecksumInput);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponseDebugData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.abResultChecksumInput = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigTargetingResponseDebugData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigTargetingResponseDebugData();
        message.abResultChecksumInput = (_a = object.abResultChecksumInput) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCofGradualRollout() {
    return { uuid: new Uint8Array(0), isControl: false };
}
const CofGradualRollout = {
    encode(message, writer = new BinaryWriter()) {
        if (message.uuid.length !== 0) {
            writer.uint32(10).bytes(message.uuid);
        }
        if (message.isControl !== false) {
            writer.uint32(16).bool(message.isControl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCofGradualRollout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uuid = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isControl = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CofGradualRollout.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCofGradualRollout();
        message.uuid = (_a = object.uuid) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.isControl = (_b = object.isControl) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseConfigTargetingResponse() {
    return {
        configResults: [],
        configResultsEtag: "",
        benchmarkRequest: undefined,
        fullResults: false,
        abResultChecksum: 0,
        iso3166Alpha2CountryCodeFromRequestIp: "",
        debugData: undefined,
        cofGrapheneContext: new Uint8Array(0),
    };
}
const ConfigTargetingResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.configResultsEtag !== "") {
            writer.uint32(18).string(message.configResultsEtag);
        }
        if (message.benchmarkRequest !== undefined) {
            BenchmarkRequest.encode(message.benchmarkRequest, writer.uint32(26).fork()).join();
        }
        if (message.fullResults !== false) {
            writer.uint32(32).bool(message.fullResults);
        }
        if (message.abResultChecksum !== 0) {
            writer.uint32(40).int32(message.abResultChecksum);
        }
        if (message.iso3166Alpha2CountryCodeFromRequestIp !== "") {
            writer.uint32(50).string(message.iso3166Alpha2CountryCodeFromRequestIp);
        }
        if (message.debugData !== undefined) {
            ConfigTargetingResponseDebugData.encode(message.debugData, writer.uint32(58).fork()).join();
        }
        if (message.cofGrapheneContext.length !== 0) {
            writer.uint32(106).bytes(message.cofGrapheneContext);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.configResultsEtag = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.benchmarkRequest = BenchmarkRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.fullResults = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.abResultChecksum = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.iso3166Alpha2CountryCodeFromRequestIp = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.debugData = ConfigTargetingResponseDebugData.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.cofGrapheneContext = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigTargetingResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseConfigTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        message.configResultsEtag = (_b = object.configResultsEtag) !== null && _b !== void 0 ? _b : "";
        message.benchmarkRequest = (object.benchmarkRequest !== undefined && object.benchmarkRequest !== null)
            ? BenchmarkRequest.fromPartial(object.benchmarkRequest)
            : undefined;
        message.fullResults = (_c = object.fullResults) !== null && _c !== void 0 ? _c : false;
        message.abResultChecksum = (_d = object.abResultChecksum) !== null && _d !== void 0 ? _d : 0;
        message.iso3166Alpha2CountryCodeFromRequestIp = (_e = object.iso3166Alpha2CountryCodeFromRequestIp) !== null && _e !== void 0 ? _e : "";
        message.debugData = (object.debugData !== undefined && object.debugData !== null)
            ? ConfigTargetingResponseDebugData.fromPartial(object.debugData)
            : undefined;
        message.cofGrapheneContext = (_f = object.cofGrapheneContext) !== null && _f !== void 0 ? _f : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=config_response.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/debug_info.js

const debug_info_protobufPackage = "snapchat.cdp.cof";
var AbStep;
(function (AbStep) {
    AbStep[AbStep["USER_WHITELISTED"] = 0] = "USER_WHITELISTED";
    AbStep[AbStep["USER_GROUP_WHITELISTED"] = 1] = "USER_GROUP_WHITELISTED";
    AbStep[AbStep["FILTER_CONDITIONS"] = 2] = "FILTER_CONDITIONS";
    AbStep[AbStep["SLICE_RANGE"] = 3] = "SLICE_RANGE";
    AbStep[AbStep["TRAFFIC_ALLOCATED"] = 4] = "TRAFFIC_ALLOCATED";
    AbStep[AbStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AbStep || (AbStep = {}));
var CofStep;
(function (CofStep) {
    CofStep[CofStep["VALIDATE_REQUEST"] = 0] = "VALIDATE_REQUEST";
    CofStep[CofStep["REQUEST_ATLAS"] = 1] = "REQUEST_ATLAS";
    CofStep[CofStep["BUILD_TARGETING_INFO"] = 2] = "BUILD_TARGETING_INFO";
    CofStep[CofStep["QUERY_INDEX"] = 3] = "QUERY_INDEX";
    CofStep[CofStep["REQUEST_AB"] = 4] = "REQUEST_AB";
    CofStep[CofStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CofStep || (CofStep = {}));
function createBaseAbStepInfo() {
    return { abStep: 0, info: "" };
}
const AbStepInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.abStep !== 0) {
            writer.uint32(8).int32(message.abStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.abStep = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.info = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return AbStepInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAbStepInfo();
        message.abStep = (_a = object.abStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCofStepInfo() {
    return { cofStep: 0, info: "" };
}
const CofStepInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cofStep !== 0) {
            writer.uint32(8).int32(message.cofStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCofStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cofStep = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.info = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CofStepInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCofStepInfo();
        message.cofStep = (_a = object.cofStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDebugTrace() {
    return { lastCofStep: undefined, lastAbStep: undefined, budgetGroupId: 0 };
}
const DebugTrace = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lastCofStep !== undefined) {
            CofStepInfo.encode(message.lastCofStep, writer.uint32(10).fork()).join();
        }
        if (message.lastAbStep !== undefined) {
            AbStepInfo.encode(message.lastAbStep, writer.uint32(18).fork()).join();
        }
        if (message.budgetGroupId !== 0) {
            writer.uint32(24).uint32(message.budgetGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lastCofStep = CofStepInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastAbStep = AbStepInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.budgetGroupId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DebugTrace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDebugTrace();
        message.lastCofStep = (object.lastCofStep !== undefined && object.lastCofStep !== null)
            ? CofStepInfo.fromPartial(object.lastCofStep)
            : undefined;
        message.lastAbStep = (object.lastAbStep !== undefined && object.lastAbStep !== null)
            ? AbStepInfo.fromPartial(object.lastAbStep)
            : undefined;
        message.budgetGroupId = (_a = object.budgetGroupId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
//# sourceMappingURL=debug_info.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/content/media_reference.js

const media_reference_protobufPackage = "snapchat.content";
var VideoDescription_MediaQualityType;
(function (VideoDescription_MediaQualityType) {
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_UNKNOWN"] = 0] = "MEDIA_QUALITY_TYPE_UNKNOWN";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_1"] = 100] = "MEDIA_QUALITY_TYPE_LEVEL_1";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_2"] = 200] = "MEDIA_QUALITY_TYPE_LEVEL_2";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_3"] = 300] = "MEDIA_QUALITY_TYPE_LEVEL_3";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_4"] = 400] = "MEDIA_QUALITY_TYPE_LEVEL_4";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_5"] = 500] = "MEDIA_QUALITY_TYPE_LEVEL_5";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_6"] = 600] = "MEDIA_QUALITY_TYPE_LEVEL_6";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_7"] = 700] = "MEDIA_QUALITY_TYPE_LEVEL_7";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_MAX"] = 5000] = "MEDIA_QUALITY_TYPE_LEVEL_MAX";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_4_5"] = 450] = "MEDIA_QUALITY_TYPE_LEVEL_4_5";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_2_1"] = 210] = "MEDIA_QUALITY_TYPE_LEVEL_2_1";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_2_2"] = 220] = "MEDIA_QUALITY_TYPE_LEVEL_2_2";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_2_5"] = 250] = "MEDIA_QUALITY_TYPE_LEVEL_2_5";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_3_2"] = 320] = "MEDIA_QUALITY_TYPE_LEVEL_3_2";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_3_5"] = 350] = "MEDIA_QUALITY_TYPE_LEVEL_3_5";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_2_7"] = 270] = "MEDIA_QUALITY_TYPE_LEVEL_2_7";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["MEDIA_QUALITY_TYPE_LEVEL_6_5"] = 650] = "MEDIA_QUALITY_TYPE_LEVEL_6_5";
    VideoDescription_MediaQualityType[VideoDescription_MediaQualityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VideoDescription_MediaQualityType || (VideoDescription_MediaQualityType = {}));
var VideoDescription_VideoPlaybackType;
(function (VideoDescription_VideoPlaybackType) {
    VideoDescription_VideoPlaybackType[VideoDescription_VideoPlaybackType["UNKNOWN_VIDEO_PLAYBACK_TYPE"] = 0] = "UNKNOWN_VIDEO_PLAYBACK_TYPE";
    VideoDescription_VideoPlaybackType[VideoDescription_VideoPlaybackType["FASTSTART_DISABLED"] = 1] = "FASTSTART_DISABLED";
    VideoDescription_VideoPlaybackType[VideoDescription_VideoPlaybackType["FASTSTART_ENABLED"] = 2] = "FASTSTART_ENABLED";
    VideoDescription_VideoPlaybackType[VideoDescription_VideoPlaybackType["HTTP_STREAMING_DASH"] = 3] = "HTTP_STREAMING_DASH";
    VideoDescription_VideoPlaybackType[VideoDescription_VideoPlaybackType["HTTP_STREAMING_HLS"] = 4] = "HTTP_STREAMING_HLS";
    VideoDescription_VideoPlaybackType[VideoDescription_VideoPlaybackType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VideoDescription_VideoPlaybackType || (VideoDescription_VideoPlaybackType = {}));
var MediaReference_ClaimBehavior;
(function (MediaReference_ClaimBehavior) {
    MediaReference_ClaimBehavior[MediaReference_ClaimBehavior["CAN_EXTEND_MEDIA_CLAIM"] = 0] = "CAN_EXTEND_MEDIA_CLAIM";
    MediaReference_ClaimBehavior[MediaReference_ClaimBehavior["DO_NOT_CLAIM"] = 1] = "DO_NOT_CLAIM";
    MediaReference_ClaimBehavior[MediaReference_ClaimBehavior["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaReference_ClaimBehavior || (MediaReference_ClaimBehavior = {}));
function createBaseVideoDescription() {
    return { mediaQualityType: 0, videoPlaybackType: 0 };
}
const VideoDescription = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaQualityType !== 0) {
            writer.uint32(16).int32(message.mediaQualityType);
        }
        if (message.videoPlaybackType !== 0) {
            writer.uint32(8).int32(message.videoPlaybackType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.mediaQualityType = reader.int32();
                    continue;
                }
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.videoPlaybackType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return VideoDescription.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVideoDescription();
        message.mediaQualityType = (_a = object.mediaQualityType) !== null && _a !== void 0 ? _a : 0;
        message.videoPlaybackType = (_b = object.videoPlaybackType) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMediaReference() {
    return {
        mediaListId: "0",
        claimBehavior: 0,
        url: "",
        contentObject: new Uint8Array(0),
        localContentKey: "",
        localCacheKey: "",
        videoDescription: undefined,
        mediaType: 0,
    };
}
const MediaReference = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaListId !== "0") {
            writer.uint32(48).int64(message.mediaListId);
        }
        if (message.claimBehavior !== 0) {
            writer.uint32(56).int32(message.claimBehavior);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        if (message.contentObject.length !== 0) {
            writer.uint32(26).bytes(message.contentObject);
        }
        if (message.localContentKey !== "") {
            writer.uint32(74).string(message.localContentKey);
        }
        if (message.localCacheKey !== "") {
            writer.uint32(82).string(message.localCacheKey);
        }
        if (message.videoDescription !== undefined) {
            VideoDescription.encode(message.videoDescription, writer.uint32(42).fork()).join();
        }
        if (message.mediaType !== 0) {
            writer.uint32(64).int32(message.mediaType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaReference();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.mediaListId = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.claimBehavior = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.contentObject = reader.bytes();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.localContentKey = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.localCacheKey = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.videoDescription = VideoDescription.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.mediaType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaReference.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMediaReference();
        message.mediaListId = (_a = object.mediaListId) !== null && _a !== void 0 ? _a : "0";
        message.claimBehavior = (_b = object.claimBehavior) !== null && _b !== void 0 ? _b : 0;
        message.url = (_c = object.url) !== null && _c !== void 0 ? _c : "";
        message.contentObject = (_d = object.contentObject) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.localContentKey = (_e = object.localContentKey) !== null && _e !== void 0 ? _e : "";
        message.localCacheKey = (_f = object.localCacheKey) !== null && _f !== void 0 ? _f : "";
        message.videoDescription = (object.videoDescription !== undefined && object.videoDescription !== null)
            ? VideoDescription.fromPartial(object.videoDescription)
            : undefined;
        message.mediaType = (_g = object.mediaType) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
//# sourceMappingURL=media_reference.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/snapdoc/capture_characteristics.js

const capture_characteristics_protobufPackage = "snapchat.snapdoc";
function createBaseCaptureCharacteristics() {
    return { flashOn: false, frontFacing: false };
}
const CaptureCharacteristics = {
    encode(message, writer = new BinaryWriter()) {
        if (message.flashOn !== false) {
            writer.uint32(8).bool(message.flashOn);
        }
        if (message.frontFacing !== false) {
            writer.uint32(16).bool(message.frontFacing);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCaptureCharacteristics();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.flashOn = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.frontFacing = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CaptureCharacteristics.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCaptureCharacteristics();
        message.flashOn = (_a = object.flashOn) !== null && _a !== void 0 ? _a : false;
        message.frontFacing = (_b = object.frontFacing) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
//# sourceMappingURL=capture_characteristics.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/snapdoc/media_id.js

const media_id_protobufPackage = "snapchat.snapdoc";
function createBaseMediaId() {
    return { mediaListId: "0" };
}
const MediaId = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaListId !== "0") {
            writer.uint32(8).int64(message.mediaListId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mediaListId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMediaId();
        message.mediaListId = (_a = object.mediaListId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
//# sourceMappingURL=media_id.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/snapdoc/media.js




const media_protobufPackage = "snapchat.snapdoc";
var MediaMetadata_Orientation;
(function (MediaMetadata_Orientation) {
    MediaMetadata_Orientation[MediaMetadata_Orientation["VERTICAL"] = 0] = "VERTICAL";
    MediaMetadata_Orientation[MediaMetadata_Orientation["HORIZONTAL"] = 1] = "HORIZONTAL";
    MediaMetadata_Orientation[MediaMetadata_Orientation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_Orientation || (MediaMetadata_Orientation = {}));
var MediaMetadata_DisplayOrientation;
(function (MediaMetadata_DisplayOrientation) {
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UNSET"] = 0] = "UNSET";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UP"] = 1] = "UP";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["DOWN"] = 2] = "DOWN";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["LEFT"] = 3] = "LEFT";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["RIGHT"] = 4] = "RIGHT";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UP_MIRRORED"] = 5] = "UP_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["DOWN_MIRRORED"] = 6] = "DOWN_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["LEFT_MIRRORED"] = 7] = "LEFT_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["RIGHT_MIRRORED"] = 8] = "RIGHT_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_DisplayOrientation || (MediaMetadata_DisplayOrientation = {}));
var MediaMetadata_MediaType;
(function (MediaMetadata_MediaType) {
    MediaMetadata_MediaType[MediaMetadata_MediaType["IMAGE"] = 0] = "IMAGE";
    MediaMetadata_MediaType[MediaMetadata_MediaType["VIDEO"] = 1] = "VIDEO";
    MediaMetadata_MediaType[MediaMetadata_MediaType["GIF"] = 2] = "GIF";
    MediaMetadata_MediaType[MediaMetadata_MediaType["AUDIO"] = 3] = "AUDIO";
    MediaMetadata_MediaType[MediaMetadata_MediaType["UNKNOWN"] = 4] = "UNKNOWN";
    MediaMetadata_MediaType[MediaMetadata_MediaType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_MediaType || (MediaMetadata_MediaType = {}));
var MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType;
(function (MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType) {
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["GCS"] = 0] = "GCS";
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["S3"] = 1] = "S3";
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["UNRECOGNIZED_VALUE"] = 2] = "UNRECOGNIZED_VALUE";
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType || (MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType = {}));
var MediaOriginExternalStorage_ExternalMediaSource;
(function (MediaOriginExternalStorage_ExternalMediaSource) {
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["UNSET"] = 0] = "UNSET";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["NONE"] = 1] = "NONE";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["UNKNOWN"] = 2] = "UNKNOWN";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["SNAPCHAT"] = 3] = "SNAPCHAT";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["TIKTOK"] = 4] = "TIKTOK";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["INSTAGRAM"] = 5] = "INSTAGRAM";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["CAPCUT"] = 6] = "CAPCUT";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaOriginExternalStorage_ExternalMediaSource || (MediaOriginExternalStorage_ExternalMediaSource = {}));
var DreamsMetadata_LensContentType;
(function (DreamsMetadata_LensContentType) {
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["UNSET"] = 0] = "UNSET";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["NONE"] = 1] = "NONE";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["GEN_ML"] = 2] = "GEN_ML";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["UCO"] = 3] = "UCO";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DreamsMetadata_LensContentType || (DreamsMetadata_LensContentType = {}));
function createBaseAudioMetadata() {
    return { codecFormat: 0 };
}
const AudioMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.codecFormat !== 0) {
            writer.uint32(8).int32(message.codecFormat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAudioMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.codecFormat = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return AudioMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAudioMetadata();
        message.codecFormat = (_a = object.codecFormat) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseImageMetadata() {
    return { codecFormat: 0 };
}
const ImageMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.codecFormat !== 0) {
            writer.uint32(8).int32(message.codecFormat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImageMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.codecFormat = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ImageMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImageMetadata();
        message.codecFormat = (_a = object.codecFormat) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseVideoMetadata() {
    return { codecFormat: 0, containerFormat: 0 };
}
const VideoMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.codecFormat !== 0) {
            writer.uint32(8).int32(message.codecFormat);
        }
        if (message.containerFormat !== 0) {
            writer.uint32(16).int32(message.containerFormat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.codecFormat = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.containerFormat = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return VideoMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVideoMetadata();
        message.codecFormat = (_a = object.codecFormat) !== null && _a !== void 0 ? _a : 0;
        message.containerFormat = (_b = object.containerFormat) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMediaMetadata() {
    return {
        orientation: 0,
        dimensions: undefined,
        mediaDurationMs: 0,
        mediaId: undefined,
        encryptionInfoV1: undefined,
        encryptionInfoV2: undefined,
        masterKeyEncryptedEncryptionInfo: undefined,
        assetType: 0,
        captureCharacteristics: undefined,
        mediaOriginCamera: undefined,
        mediaOriginExternalStorage: undefined,
        mediaOriginPixy: undefined,
        mediaOriginSpectacles: undefined,
        mediaOriginAi: undefined,
        dreamsMetadata: undefined,
        additionalOrigins: [],
        displayOrientation: 0,
        audio: undefined,
        image: undefined,
        video: undefined,
        type: 0,
        legacyMediaSource: undefined,
        contentDescriptor: undefined,
        mediaUrl: "",
        hasSound: false,
        zipped: false,
        frontFacing: false,
        mediaReference: undefined,
    };
}
const MediaMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orientation !== 0) {
            writer.uint32(24).int32(message.orientation);
        }
        if (message.dimensions !== undefined) {
            MediaMetadata_MediaDimensions.encode(message.dimensions, writer.uint32(42).fork()).join();
        }
        if (message.mediaDurationMs !== 0) {
            writer.uint32(120).uint32(message.mediaDurationMs);
        }
        if (message.mediaId !== undefined) {
            MediaId.encode(message.mediaId, writer.uint32(146).fork()).join();
        }
        if (message.encryptionInfoV1 !== undefined) {
            MediaMetadata_MediaEncryptionInfo.encode(message.encryptionInfoV1, writer.uint32(34).fork()).join();
        }
        if (message.encryptionInfoV2 !== undefined) {
            MediaMetadata_MediaEncryptionInfo.encode(message.encryptionInfoV2, writer.uint32(154).fork()).join();
        }
        if (message.masterKeyEncryptedEncryptionInfo !== undefined) {
            MediaMetadata_MediaEncryptionInfo.encode(message.masterKeyEncryptedEncryptionInfo, writer.uint32(250).fork())
                .join();
        }
        if (message.assetType !== 0) {
            writer.uint32(160).int32(message.assetType);
        }
        if (message.captureCharacteristics !== undefined) {
            CaptureCharacteristics.encode(message.captureCharacteristics, writer.uint32(170).fork()).join();
        }
        if (message.mediaOriginCamera !== undefined) {
            MediaOriginCamera.encode(message.mediaOriginCamera, writer.uint32(210).fork()).join();
        }
        if (message.mediaOriginExternalStorage !== undefined) {
            MediaOriginExternalStorage.encode(message.mediaOriginExternalStorage, writer.uint32(218).fork()).join();
        }
        if (message.mediaOriginPixy !== undefined) {
            MediaOriginPixy.encode(message.mediaOriginPixy, writer.uint32(226).fork()).join();
        }
        if (message.mediaOriginSpectacles !== undefined) {
            MediaOriginSpectacles.encode(message.mediaOriginSpectacles, writer.uint32(234).fork()).join();
        }
        if (message.mediaOriginAi !== undefined) {
            MediaOriginAI.encode(message.mediaOriginAi, writer.uint32(242).fork()).join();
        }
        if (message.dreamsMetadata !== undefined) {
            DreamsMetadata.encode(message.dreamsMetadata, writer.uint32(258).fork()).join();
        }
        for (const v of message.additionalOrigins) {
            MediaOrigin.encode(v, writer.uint32(266).fork()).join();
        }
        if (message.displayOrientation !== 0) {
            writer.uint32(176).int32(message.displayOrientation);
        }
        if (message.audio !== undefined) {
            AudioMetadata.encode(message.audio, writer.uint32(186).fork()).join();
        }
        if (message.image !== undefined) {
            ImageMetadata.encode(message.image, writer.uint32(194).fork()).join();
        }
        if (message.video !== undefined) {
            VideoMetadata.encode(message.video, writer.uint32(202).fork()).join();
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.legacyMediaSource !== undefined) {
            MediaMetadata_LegacyMediaSource.encode(message.legacyMediaSource, writer.uint32(50).fork()).join();
        }
        if (message.contentDescriptor !== undefined) {
            writer.uint32(58).bytes(message.contentDescriptor);
        }
        if (message.mediaUrl !== "") {
            writer.uint32(74).string(message.mediaUrl);
        }
        if (message.hasSound !== false) {
            writer.uint32(96).bool(message.hasSound);
        }
        if (message.zipped !== false) {
            writer.uint32(104).bool(message.zipped);
        }
        if (message.frontFacing !== false) {
            writer.uint32(112).bool(message.frontFacing);
        }
        if (message.mediaReference !== undefined) {
            MediaReference.encode(message.mediaReference, writer.uint32(138).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.orientation = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.dimensions = MediaMetadata_MediaDimensions.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.mediaDurationMs = reader.uint32();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.mediaId = MediaId.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.encryptionInfoV1 = MediaMetadata_MediaEncryptionInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.encryptionInfoV2 = MediaMetadata_MediaEncryptionInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.masterKeyEncryptedEncryptionInfo = MediaMetadata_MediaEncryptionInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.assetType = reader.int32();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.captureCharacteristics = CaptureCharacteristics.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.mediaOriginCamera = MediaOriginCamera.decode(reader, reader.uint32());
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.mediaOriginExternalStorage = MediaOriginExternalStorage.decode(reader, reader.uint32());
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.mediaOriginPixy = MediaOriginPixy.decode(reader, reader.uint32());
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.mediaOriginSpectacles = MediaOriginSpectacles.decode(reader, reader.uint32());
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.mediaOriginAi = MediaOriginAI.decode(reader, reader.uint32());
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.dreamsMetadata = DreamsMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.additionalOrigins.push(MediaOrigin.decode(reader, reader.uint32()));
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.displayOrientation = reader.int32();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.audio = AudioMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.image = ImageMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.video = VideoMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.legacyMediaSource = MediaMetadata_LegacyMediaSource.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.contentDescriptor = reader.bytes();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.mediaUrl = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.hasSound = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.zipped = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.frontFacing = reader.bool();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.mediaReference = MediaReference.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseMediaMetadata();
        message.orientation = (_a = object.orientation) !== null && _a !== void 0 ? _a : 0;
        message.dimensions = (object.dimensions !== undefined && object.dimensions !== null)
            ? MediaMetadata_MediaDimensions.fromPartial(object.dimensions)
            : undefined;
        message.mediaDurationMs = (_b = object.mediaDurationMs) !== null && _b !== void 0 ? _b : 0;
        message.mediaId = (object.mediaId !== undefined && object.mediaId !== null)
            ? MediaId.fromPartial(object.mediaId)
            : undefined;
        message.encryptionInfoV1 = (object.encryptionInfoV1 !== undefined && object.encryptionInfoV1 !== null)
            ? MediaMetadata_MediaEncryptionInfo.fromPartial(object.encryptionInfoV1)
            : undefined;
        message.encryptionInfoV2 = (object.encryptionInfoV2 !== undefined && object.encryptionInfoV2 !== null)
            ? MediaMetadata_MediaEncryptionInfo.fromPartial(object.encryptionInfoV2)
            : undefined;
        message.masterKeyEncryptedEncryptionInfo =
            (object.masterKeyEncryptedEncryptionInfo !== undefined && object.masterKeyEncryptedEncryptionInfo !== null)
                ? MediaMetadata_MediaEncryptionInfo.fromPartial(object.masterKeyEncryptedEncryptionInfo)
                : undefined;
        message.assetType = (_c = object.assetType) !== null && _c !== void 0 ? _c : 0;
        message.captureCharacteristics =
            (object.captureCharacteristics !== undefined && object.captureCharacteristics !== null)
                ? CaptureCharacteristics.fromPartial(object.captureCharacteristics)
                : undefined;
        message.mediaOriginCamera = (object.mediaOriginCamera !== undefined && object.mediaOriginCamera !== null)
            ? MediaOriginCamera.fromPartial(object.mediaOriginCamera)
            : undefined;
        message.mediaOriginExternalStorage =
            (object.mediaOriginExternalStorage !== undefined && object.mediaOriginExternalStorage !== null)
                ? MediaOriginExternalStorage.fromPartial(object.mediaOriginExternalStorage)
                : undefined;
        message.mediaOriginPixy = (object.mediaOriginPixy !== undefined && object.mediaOriginPixy !== null)
            ? MediaOriginPixy.fromPartial(object.mediaOriginPixy)
            : undefined;
        message.mediaOriginSpectacles =
            (object.mediaOriginSpectacles !== undefined && object.mediaOriginSpectacles !== null)
                ? MediaOriginSpectacles.fromPartial(object.mediaOriginSpectacles)
                : undefined;
        message.mediaOriginAi = (object.mediaOriginAi !== undefined && object.mediaOriginAi !== null)
            ? MediaOriginAI.fromPartial(object.mediaOriginAi)
            : undefined;
        message.dreamsMetadata = (object.dreamsMetadata !== undefined && object.dreamsMetadata !== null)
            ? DreamsMetadata.fromPartial(object.dreamsMetadata)
            : undefined;
        message.additionalOrigins = ((_d = object.additionalOrigins) === null || _d === void 0 ? void 0 : _d.map((e) => MediaOrigin.fromPartial(e))) || [];
        message.displayOrientation = (_e = object.displayOrientation) !== null && _e !== void 0 ? _e : 0;
        message.audio = (object.audio !== undefined && object.audio !== null)
            ? AudioMetadata.fromPartial(object.audio)
            : undefined;
        message.image = (object.image !== undefined && object.image !== null)
            ? ImageMetadata.fromPartial(object.image)
            : undefined;
        message.video = (object.video !== undefined && object.video !== null)
            ? VideoMetadata.fromPartial(object.video)
            : undefined;
        message.type = (_f = object.type) !== null && _f !== void 0 ? _f : 0;
        message.legacyMediaSource = (object.legacyMediaSource !== undefined && object.legacyMediaSource !== null)
            ? MediaMetadata_LegacyMediaSource.fromPartial(object.legacyMediaSource)
            : undefined;
        message.contentDescriptor = (_g = object.contentDescriptor) !== null && _g !== void 0 ? _g : undefined;
        message.mediaUrl = (_h = object.mediaUrl) !== null && _h !== void 0 ? _h : "";
        message.hasSound = (_j = object.hasSound) !== null && _j !== void 0 ? _j : false;
        message.zipped = (_k = object.zipped) !== null && _k !== void 0 ? _k : false;
        message.frontFacing = (_l = object.frontFacing) !== null && _l !== void 0 ? _l : false;
        message.mediaReference = (object.mediaReference !== undefined && object.mediaReference !== null)
            ? MediaReference.fromPartial(object.mediaReference)
            : undefined;
        return message;
    },
};
function createBaseMediaMetadata_MediaDimensions() {
    return { width: 0, height: 0 };
}
const MediaMetadata_MediaDimensions = {
    encode(message, writer = new BinaryWriter()) {
        if (message.width !== 0) {
            writer.uint32(8).uint32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(16).uint32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_MediaDimensions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.width = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_MediaDimensions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMediaMetadata_MediaDimensions();
        message.width = (_a = object.width) !== null && _a !== void 0 ? _a : 0;
        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMediaMetadata_MediaEncryptionInfo() {
    return { key: new Uint8Array(0), iv: new Uint8Array(0) };
}
const MediaMetadata_MediaEncryptionInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.iv.length !== 0) {
            writer.uint32(18).bytes(message.iv);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_MediaEncryptionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.iv = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_MediaEncryptionInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMediaMetadata_MediaEncryptionInfo();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.iv = (_b = object.iv) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseMediaMetadata_LegacyMediaSource() {
    return { sourceMediaId: "", directDownloadUrl: undefined };
}
const MediaMetadata_LegacyMediaSource = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sourceMediaId !== "") {
            writer.uint32(10).string(message.sourceMediaId);
        }
        if (message.directDownloadUrl !== undefined) {
            MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.encode(message.directDownloadUrl, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_LegacyMediaSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sourceMediaId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.directDownloadUrl = MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_LegacyMediaSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMediaMetadata_LegacyMediaSource();
        message.sourceMediaId = (_a = object.sourceMediaId) !== null && _a !== void 0 ? _a : "";
        message.directDownloadUrl = (object.directDownloadUrl !== undefined && object.directDownloadUrl !== null)
            ? MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.fromPartial(object.directDownloadUrl)
            : undefined;
        return message;
    },
};
function createBaseMediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl() {
    return { url: "", expirySeconds: "0", type: 0, region: "" };
}
const MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.expirySeconds !== "0") {
            writer.uint32(16).uint64(message.expirySeconds);
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        if (message.region !== "") {
            writer.uint32(34).string(message.region);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.expirySeconds = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.expirySeconds = (_b = object.expirySeconds) !== null && _b !== void 0 ? _b : "0";
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : 0;
        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMediaOrigin() {
    return {
        mediaOriginCamera: undefined,
        mediaOriginExternalStorage: undefined,
        mediaOriginPixy: undefined,
        mediaOriginSpectacles: undefined,
        mediaOriginAi: undefined,
        dreamsMetadata: undefined,
    };
}
const MediaOrigin = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaOriginCamera !== undefined) {
            MediaOriginCamera.encode(message.mediaOriginCamera, writer.uint32(10).fork()).join();
        }
        if (message.mediaOriginExternalStorage !== undefined) {
            MediaOriginExternalStorage.encode(message.mediaOriginExternalStorage, writer.uint32(18).fork()).join();
        }
        if (message.mediaOriginPixy !== undefined) {
            MediaOriginPixy.encode(message.mediaOriginPixy, writer.uint32(26).fork()).join();
        }
        if (message.mediaOriginSpectacles !== undefined) {
            MediaOriginSpectacles.encode(message.mediaOriginSpectacles, writer.uint32(34).fork()).join();
        }
        if (message.mediaOriginAi !== undefined) {
            MediaOriginAI.encode(message.mediaOriginAi, writer.uint32(42).fork()).join();
        }
        if (message.dreamsMetadata !== undefined) {
            DreamsMetadata.encode(message.dreamsMetadata, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOrigin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mediaOriginCamera = MediaOriginCamera.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mediaOriginExternalStorage = MediaOriginExternalStorage.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.mediaOriginPixy = MediaOriginPixy.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.mediaOriginSpectacles = MediaOriginSpectacles.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.mediaOriginAi = MediaOriginAI.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.dreamsMetadata = DreamsMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOrigin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMediaOrigin();
        message.mediaOriginCamera = (object.mediaOriginCamera !== undefined && object.mediaOriginCamera !== null)
            ? MediaOriginCamera.fromPartial(object.mediaOriginCamera)
            : undefined;
        message.mediaOriginExternalStorage =
            (object.mediaOriginExternalStorage !== undefined && object.mediaOriginExternalStorage !== null)
                ? MediaOriginExternalStorage.fromPartial(object.mediaOriginExternalStorage)
                : undefined;
        message.mediaOriginPixy = (object.mediaOriginPixy !== undefined && object.mediaOriginPixy !== null)
            ? MediaOriginPixy.fromPartial(object.mediaOriginPixy)
            : undefined;
        message.mediaOriginSpectacles =
            (object.mediaOriginSpectacles !== undefined && object.mediaOriginSpectacles !== null)
                ? MediaOriginSpectacles.fromPartial(object.mediaOriginSpectacles)
                : undefined;
        message.mediaOriginAi = (object.mediaOriginAi !== undefined && object.mediaOriginAi !== null)
            ? MediaOriginAI.fromPartial(object.mediaOriginAi)
            : undefined;
        message.dreamsMetadata = (object.dreamsMetadata !== undefined && object.dreamsMetadata !== null)
            ? DreamsMetadata.fromPartial(object.dreamsMetadata)
            : undefined;
        return message;
    },
};
function createBaseMediaOriginCamera() {
    return {};
}
const MediaOriginCamera = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginCamera();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginCamera.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginCamera();
        return message;
    },
};
function createBaseMediaOriginPixy() {
    return {};
}
const MediaOriginPixy = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginPixy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginPixy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginPixy();
        return message;
    },
};
function createBaseMediaOriginSpectacles() {
    return {};
}
const MediaOriginSpectacles = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginSpectacles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginSpectacles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginSpectacles();
        return message;
    },
};
function createBaseMediaOriginExternalStorage() {
    return { creationTimestamp: "0", mediaSource: 0, insecureFileMetadata: undefined, originalLocalIds: [] };
}
const MediaOriginExternalStorage = {
    encode(message, writer = new BinaryWriter()) {
        if (message.creationTimestamp !== "0") {
            writer.uint32(8).uint64(message.creationTimestamp);
        }
        if (message.mediaSource !== 0) {
            writer.uint32(16).int32(message.mediaSource);
        }
        if (message.insecureFileMetadata !== undefined) {
            InsecureFileMetadata.encode(message.insecureFileMetadata, writer.uint32(42).fork()).join();
        }
        for (const v of message.originalLocalIds) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginExternalStorage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.creationTimestamp = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.mediaSource = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.insecureFileMetadata = InsecureFileMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.originalLocalIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginExternalStorage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMediaOriginExternalStorage();
        message.creationTimestamp = (_a = object.creationTimestamp) !== null && _a !== void 0 ? _a : "0";
        message.mediaSource = (_b = object.mediaSource) !== null && _b !== void 0 ? _b : 0;
        message.insecureFileMetadata = (object.insecureFileMetadata !== undefined && object.insecureFileMetadata !== null)
            ? InsecureFileMetadata.fromPartial(object.insecureFileMetadata)
            : undefined;
        message.originalLocalIds = ((_c = object.originalLocalIds) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseInsecureFileMetadata() {
    return { lensId: [], musicTrackId: "0" };
}
const InsecureFileMetadata = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.lensId) {
            writer.uint64(v);
        }
        writer.join();
        if (message.musicTrackId !== "0") {
            writer.uint32(16).uint64(message.musicTrackId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsecureFileMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.lensId.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.lensId.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.musicTrackId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return InsecureFileMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseInsecureFileMetadata();
        message.lensId = ((_a = object.lensId) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.musicTrackId = (_b = object.musicTrackId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseMediaOriginAI() {
    return {};
}
const MediaOriginAI = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginAI();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginAI.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginAI();
        return message;
    },
};
function createBaseDreamsMetadata() {
    return { packId: "", templateId: "", contentType: [] };
}
const DreamsMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.packId !== "") {
            writer.uint32(10).string(message.packId);
        }
        if (message.templateId !== "") {
            writer.uint32(18).string(message.templateId);
        }
        writer.uint32(26).fork();
        for (const v of message.contentType) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDreamsMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.packId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.templateId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.contentType.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.contentType.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DreamsMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDreamsMetadata();
        message.packId = (_a = object.packId) !== null && _a !== void 0 ? _a : "";
        message.templateId = (_b = object.templateId) !== null && _b !== void 0 ? _b : "";
        message.contentType = ((_c = object.contentType) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
//# sourceMappingURL=media.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/billboard_provided_signals.js

const billboard_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseBillboardSignals() {
    return {
        emailVerified: false,
        phoneVerified: false,
        notificationPermGranted: false,
        contactPermGranted: false,
        mutualFriendsCount: 0,
        groupsCount: 0,
        hasNonTeamSnapchatConversations: false,
        emailSet: false,
        bitmojiSet: false,
        hasAddFriendsRequest: false,
        appLaunchFromPush: false,
        appLaunchType: 0,
        campaignLocalImpressionCount: 0,
        campaignLocalLastImpressionTimeSecsToNow: "0",
        campaignLocalContinuousDismissCount: 0,
        fstNumInAppWarnings: 0,
        fstShouldChangePassword: false,
        audioRecordPermGranted: false,
        mutualFriendsWithBirthdayCount: 0,
        campaignLocalDismissCount: 0,
        memoriesCount: 0,
        campaignLocalFirstImpressionTimeSecsToNow: "0",
        campaignLocalClickCount: 0,
        campaignLocalInteractionCount: 0,
        campaignLocalLastInteractionTimeSecsToNow: "0",
        lockScreenWidgetAppOpenFromPush: false,
        communityCount: 0,
        campaignLocalFirstClickTimeSecsToNow: "0",
        campaignLocalLastClickTimeSecsToNow: "0",
        campaignLocalFirstDismissTimeSecsToNow: "0",
        campaignLocalLastDismissTimeSecsToNow: "0",
        campaignLocalFirstInteractionTimeSecsToNow: "0",
        serverImpressionCount: 0,
        serverClickCount: 0,
        serverDismissCount: 0,
        serverInteractionCount: 0,
        serverFirstImpressionTimeSecsToNow: "0",
        serverLastImpressionTimeSecsToNow: "0",
        serverFirstClickTimeSecsToNow: "0",
        serverLastClickTimeSecsToNow: "0",
        serverFirstDismissTimeSecsToNow: "0",
        serverLastDismissTimeSecsToNow: "0",
        serverFirstInteractionTimeSecsToNow: "0",
        serverLastInteractionTimeSecsToNow: "0",
        serverContinuousDismissCount: 0,
        contactPermOsGranted: false,
        contactPermUserGranted: false,
        contactPermOsAuthorizationStatus: 0,
    };
}
const BillboardSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.emailVerified !== false) {
            writer.uint32(8).bool(message.emailVerified);
        }
        if (message.phoneVerified !== false) {
            writer.uint32(16).bool(message.phoneVerified);
        }
        if (message.notificationPermGranted !== false) {
            writer.uint32(24).bool(message.notificationPermGranted);
        }
        if (message.contactPermGranted !== false) {
            writer.uint32(32).bool(message.contactPermGranted);
        }
        if (message.mutualFriendsCount !== 0) {
            writer.uint32(40).int32(message.mutualFriendsCount);
        }
        if (message.groupsCount !== 0) {
            writer.uint32(48).int32(message.groupsCount);
        }
        if (message.hasNonTeamSnapchatConversations !== false) {
            writer.uint32(56).bool(message.hasNonTeamSnapchatConversations);
        }
        if (message.emailSet !== false) {
            writer.uint32(64).bool(message.emailSet);
        }
        if (message.bitmojiSet !== false) {
            writer.uint32(72).bool(message.bitmojiSet);
        }
        if (message.hasAddFriendsRequest !== false) {
            writer.uint32(80).bool(message.hasAddFriendsRequest);
        }
        if (message.appLaunchFromPush !== false) {
            writer.uint32(88).bool(message.appLaunchFromPush);
        }
        if (message.appLaunchType !== 0) {
            writer.uint32(96).int32(message.appLaunchType);
        }
        if (message.campaignLocalImpressionCount !== 0) {
            writer.uint32(104).int32(message.campaignLocalImpressionCount);
        }
        if (message.campaignLocalLastImpressionTimeSecsToNow !== "0") {
            writer.uint32(112).int64(message.campaignLocalLastImpressionTimeSecsToNow);
        }
        if (message.campaignLocalContinuousDismissCount !== 0) {
            writer.uint32(120).int32(message.campaignLocalContinuousDismissCount);
        }
        if (message.fstNumInAppWarnings !== 0) {
            writer.uint32(128).int32(message.fstNumInAppWarnings);
        }
        if (message.fstShouldChangePassword !== false) {
            writer.uint32(136).bool(message.fstShouldChangePassword);
        }
        if (message.audioRecordPermGranted !== false) {
            writer.uint32(144).bool(message.audioRecordPermGranted);
        }
        if (message.mutualFriendsWithBirthdayCount !== 0) {
            writer.uint32(152).int32(message.mutualFriendsWithBirthdayCount);
        }
        if (message.campaignLocalDismissCount !== 0) {
            writer.uint32(160).int32(message.campaignLocalDismissCount);
        }
        if (message.memoriesCount !== 0) {
            writer.uint32(168).int32(message.memoriesCount);
        }
        if (message.campaignLocalFirstImpressionTimeSecsToNow !== "0") {
            writer.uint32(176).int64(message.campaignLocalFirstImpressionTimeSecsToNow);
        }
        if (message.campaignLocalClickCount !== 0) {
            writer.uint32(184).int32(message.campaignLocalClickCount);
        }
        if (message.campaignLocalInteractionCount !== 0) {
            writer.uint32(192).int32(message.campaignLocalInteractionCount);
        }
        if (message.campaignLocalLastInteractionTimeSecsToNow !== "0") {
            writer.uint32(200).int64(message.campaignLocalLastInteractionTimeSecsToNow);
        }
        if (message.lockScreenWidgetAppOpenFromPush !== false) {
            writer.uint32(208).bool(message.lockScreenWidgetAppOpenFromPush);
        }
        if (message.communityCount !== 0) {
            writer.uint32(216).int32(message.communityCount);
        }
        if (message.campaignLocalFirstClickTimeSecsToNow !== "0") {
            writer.uint32(224).int64(message.campaignLocalFirstClickTimeSecsToNow);
        }
        if (message.campaignLocalLastClickTimeSecsToNow !== "0") {
            writer.uint32(232).int64(message.campaignLocalLastClickTimeSecsToNow);
        }
        if (message.campaignLocalFirstDismissTimeSecsToNow !== "0") {
            writer.uint32(240).int64(message.campaignLocalFirstDismissTimeSecsToNow);
        }
        if (message.campaignLocalLastDismissTimeSecsToNow !== "0") {
            writer.uint32(248).int64(message.campaignLocalLastDismissTimeSecsToNow);
        }
        if (message.campaignLocalFirstInteractionTimeSecsToNow !== "0") {
            writer.uint32(256).int64(message.campaignLocalFirstInteractionTimeSecsToNow);
        }
        if (message.serverImpressionCount !== 0) {
            writer.uint32(264).int32(message.serverImpressionCount);
        }
        if (message.serverClickCount !== 0) {
            writer.uint32(272).int32(message.serverClickCount);
        }
        if (message.serverDismissCount !== 0) {
            writer.uint32(280).int32(message.serverDismissCount);
        }
        if (message.serverInteractionCount !== 0) {
            writer.uint32(288).int32(message.serverInteractionCount);
        }
        if (message.serverFirstImpressionTimeSecsToNow !== "0") {
            writer.uint32(296).int64(message.serverFirstImpressionTimeSecsToNow);
        }
        if (message.serverLastImpressionTimeSecsToNow !== "0") {
            writer.uint32(304).int64(message.serverLastImpressionTimeSecsToNow);
        }
        if (message.serverFirstClickTimeSecsToNow !== "0") {
            writer.uint32(312).int64(message.serverFirstClickTimeSecsToNow);
        }
        if (message.serverLastClickTimeSecsToNow !== "0") {
            writer.uint32(320).int64(message.serverLastClickTimeSecsToNow);
        }
        if (message.serverFirstDismissTimeSecsToNow !== "0") {
            writer.uint32(328).int64(message.serverFirstDismissTimeSecsToNow);
        }
        if (message.serverLastDismissTimeSecsToNow !== "0") {
            writer.uint32(336).int64(message.serverLastDismissTimeSecsToNow);
        }
        if (message.serverFirstInteractionTimeSecsToNow !== "0") {
            writer.uint32(344).int64(message.serverFirstInteractionTimeSecsToNow);
        }
        if (message.serverLastInteractionTimeSecsToNow !== "0") {
            writer.uint32(352).int64(message.serverLastInteractionTimeSecsToNow);
        }
        if (message.serverContinuousDismissCount !== 0) {
            writer.uint32(360).int32(message.serverContinuousDismissCount);
        }
        if (message.contactPermOsGranted !== false) {
            writer.uint32(368).bool(message.contactPermOsGranted);
        }
        if (message.contactPermUserGranted !== false) {
            writer.uint32(376).bool(message.contactPermUserGranted);
        }
        if (message.contactPermOsAuthorizationStatus !== 0) {
            writer.uint32(384).int32(message.contactPermOsAuthorizationStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBillboardSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.emailVerified = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.phoneVerified = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.notificationPermGranted = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.contactPermGranted = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.mutualFriendsCount = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.groupsCount = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.hasNonTeamSnapchatConversations = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.emailSet = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.bitmojiSet = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.hasAddFriendsRequest = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.appLaunchFromPush = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.appLaunchType = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.campaignLocalImpressionCount = reader.int32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.campaignLocalLastImpressionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.campaignLocalContinuousDismissCount = reader.int32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.fstNumInAppWarnings = reader.int32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.fstShouldChangePassword = reader.bool();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.audioRecordPermGranted = reader.bool();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.mutualFriendsWithBirthdayCount = reader.int32();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.campaignLocalDismissCount = reader.int32();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.memoriesCount = reader.int32();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.campaignLocalFirstImpressionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.campaignLocalClickCount = reader.int32();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.campaignLocalInteractionCount = reader.int32();
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.campaignLocalLastInteractionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.lockScreenWidgetAppOpenFromPush = reader.bool();
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.communityCount = reader.int32();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.campaignLocalFirstClickTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 29: {
                    if (tag !== 232) {
                        break;
                    }
                    message.campaignLocalLastClickTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 30: {
                    if (tag !== 240) {
                        break;
                    }
                    message.campaignLocalFirstDismissTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 31: {
                    if (tag !== 248) {
                        break;
                    }
                    message.campaignLocalLastDismissTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 32: {
                    if (tag !== 256) {
                        break;
                    }
                    message.campaignLocalFirstInteractionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 33: {
                    if (tag !== 264) {
                        break;
                    }
                    message.serverImpressionCount = reader.int32();
                    continue;
                }
                case 34: {
                    if (tag !== 272) {
                        break;
                    }
                    message.serverClickCount = reader.int32();
                    continue;
                }
                case 35: {
                    if (tag !== 280) {
                        break;
                    }
                    message.serverDismissCount = reader.int32();
                    continue;
                }
                case 36: {
                    if (tag !== 288) {
                        break;
                    }
                    message.serverInteractionCount = reader.int32();
                    continue;
                }
                case 37: {
                    if (tag !== 296) {
                        break;
                    }
                    message.serverFirstImpressionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 38: {
                    if (tag !== 304) {
                        break;
                    }
                    message.serverLastImpressionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 39: {
                    if (tag !== 312) {
                        break;
                    }
                    message.serverFirstClickTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 40: {
                    if (tag !== 320) {
                        break;
                    }
                    message.serverLastClickTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 41: {
                    if (tag !== 328) {
                        break;
                    }
                    message.serverFirstDismissTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 42: {
                    if (tag !== 336) {
                        break;
                    }
                    message.serverLastDismissTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 43: {
                    if (tag !== 344) {
                        break;
                    }
                    message.serverFirstInteractionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 44: {
                    if (tag !== 352) {
                        break;
                    }
                    message.serverLastInteractionTimeSecsToNow = reader.int64().toString();
                    continue;
                }
                case 45: {
                    if (tag !== 360) {
                        break;
                    }
                    message.serverContinuousDismissCount = reader.int32();
                    continue;
                }
                case 46: {
                    if (tag !== 368) {
                        break;
                    }
                    message.contactPermOsGranted = reader.bool();
                    continue;
                }
                case 47: {
                    if (tag !== 376) {
                        break;
                    }
                    message.contactPermUserGranted = reader.bool();
                    continue;
                }
                case 48: {
                    if (tag !== 384) {
                        break;
                    }
                    message.contactPermOsAuthorizationStatus = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BillboardSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23;
        const message = createBaseBillboardSignals();
        message.emailVerified = (_a = object.emailVerified) !== null && _a !== void 0 ? _a : false;
        message.phoneVerified = (_b = object.phoneVerified) !== null && _b !== void 0 ? _b : false;
        message.notificationPermGranted = (_c = object.notificationPermGranted) !== null && _c !== void 0 ? _c : false;
        message.contactPermGranted = (_d = object.contactPermGranted) !== null && _d !== void 0 ? _d : false;
        message.mutualFriendsCount = (_e = object.mutualFriendsCount) !== null && _e !== void 0 ? _e : 0;
        message.groupsCount = (_f = object.groupsCount) !== null && _f !== void 0 ? _f : 0;
        message.hasNonTeamSnapchatConversations = (_g = object.hasNonTeamSnapchatConversations) !== null && _g !== void 0 ? _g : false;
        message.emailSet = (_h = object.emailSet) !== null && _h !== void 0 ? _h : false;
        message.bitmojiSet = (_j = object.bitmojiSet) !== null && _j !== void 0 ? _j : false;
        message.hasAddFriendsRequest = (_k = object.hasAddFriendsRequest) !== null && _k !== void 0 ? _k : false;
        message.appLaunchFromPush = (_l = object.appLaunchFromPush) !== null && _l !== void 0 ? _l : false;
        message.appLaunchType = (_m = object.appLaunchType) !== null && _m !== void 0 ? _m : 0;
        message.campaignLocalImpressionCount = (_o = object.campaignLocalImpressionCount) !== null && _o !== void 0 ? _o : 0;
        message.campaignLocalLastImpressionTimeSecsToNow = (_p = object.campaignLocalLastImpressionTimeSecsToNow) !== null && _p !== void 0 ? _p : "0";
        message.campaignLocalContinuousDismissCount = (_q = object.campaignLocalContinuousDismissCount) !== null && _q !== void 0 ? _q : 0;
        message.fstNumInAppWarnings = (_r = object.fstNumInAppWarnings) !== null && _r !== void 0 ? _r : 0;
        message.fstShouldChangePassword = (_s = object.fstShouldChangePassword) !== null && _s !== void 0 ? _s : false;
        message.audioRecordPermGranted = (_t = object.audioRecordPermGranted) !== null && _t !== void 0 ? _t : false;
        message.mutualFriendsWithBirthdayCount = (_u = object.mutualFriendsWithBirthdayCount) !== null && _u !== void 0 ? _u : 0;
        message.campaignLocalDismissCount = (_v = object.campaignLocalDismissCount) !== null && _v !== void 0 ? _v : 0;
        message.memoriesCount = (_w = object.memoriesCount) !== null && _w !== void 0 ? _w : 0;
        message.campaignLocalFirstImpressionTimeSecsToNow = (_x = object.campaignLocalFirstImpressionTimeSecsToNow) !== null && _x !== void 0 ? _x : "0";
        message.campaignLocalClickCount = (_y = object.campaignLocalClickCount) !== null && _y !== void 0 ? _y : 0;
        message.campaignLocalInteractionCount = (_z = object.campaignLocalInteractionCount) !== null && _z !== void 0 ? _z : 0;
        message.campaignLocalLastInteractionTimeSecsToNow = (_0 = object.campaignLocalLastInteractionTimeSecsToNow) !== null && _0 !== void 0 ? _0 : "0";
        message.lockScreenWidgetAppOpenFromPush = (_1 = object.lockScreenWidgetAppOpenFromPush) !== null && _1 !== void 0 ? _1 : false;
        message.communityCount = (_2 = object.communityCount) !== null && _2 !== void 0 ? _2 : 0;
        message.campaignLocalFirstClickTimeSecsToNow = (_3 = object.campaignLocalFirstClickTimeSecsToNow) !== null && _3 !== void 0 ? _3 : "0";
        message.campaignLocalLastClickTimeSecsToNow = (_4 = object.campaignLocalLastClickTimeSecsToNow) !== null && _4 !== void 0 ? _4 : "0";
        message.campaignLocalFirstDismissTimeSecsToNow = (_5 = object.campaignLocalFirstDismissTimeSecsToNow) !== null && _5 !== void 0 ? _5 : "0";
        message.campaignLocalLastDismissTimeSecsToNow = (_6 = object.campaignLocalLastDismissTimeSecsToNow) !== null && _6 !== void 0 ? _6 : "0";
        message.campaignLocalFirstInteractionTimeSecsToNow = (_7 = object.campaignLocalFirstInteractionTimeSecsToNow) !== null && _7 !== void 0 ? _7 : "0";
        message.serverImpressionCount = (_8 = object.serverImpressionCount) !== null && _8 !== void 0 ? _8 : 0;
        message.serverClickCount = (_9 = object.serverClickCount) !== null && _9 !== void 0 ? _9 : 0;
        message.serverDismissCount = (_10 = object.serverDismissCount) !== null && _10 !== void 0 ? _10 : 0;
        message.serverInteractionCount = (_11 = object.serverInteractionCount) !== null && _11 !== void 0 ? _11 : 0;
        message.serverFirstImpressionTimeSecsToNow = (_12 = object.serverFirstImpressionTimeSecsToNow) !== null && _12 !== void 0 ? _12 : "0";
        message.serverLastImpressionTimeSecsToNow = (_13 = object.serverLastImpressionTimeSecsToNow) !== null && _13 !== void 0 ? _13 : "0";
        message.serverFirstClickTimeSecsToNow = (_14 = object.serverFirstClickTimeSecsToNow) !== null && _14 !== void 0 ? _14 : "0";
        message.serverLastClickTimeSecsToNow = (_15 = object.serverLastClickTimeSecsToNow) !== null && _15 !== void 0 ? _15 : "0";
        message.serverFirstDismissTimeSecsToNow = (_16 = object.serverFirstDismissTimeSecsToNow) !== null && _16 !== void 0 ? _16 : "0";
        message.serverLastDismissTimeSecsToNow = (_17 = object.serverLastDismissTimeSecsToNow) !== null && _17 !== void 0 ? _17 : "0";
        message.serverFirstInteractionTimeSecsToNow = (_18 = object.serverFirstInteractionTimeSecsToNow) !== null && _18 !== void 0 ? _18 : "0";
        message.serverLastInteractionTimeSecsToNow = (_19 = object.serverLastInteractionTimeSecsToNow) !== null && _19 !== void 0 ? _19 : "0";
        message.serverContinuousDismissCount = (_20 = object.serverContinuousDismissCount) !== null && _20 !== void 0 ? _20 : 0;
        message.contactPermOsGranted = (_21 = object.contactPermOsGranted) !== null && _21 !== void 0 ? _21 : false;
        message.contactPermUserGranted = (_22 = object.contactPermUserGranted) !== null && _22 !== void 0 ? _22 : false;
        message.contactPermOsAuthorizationStatus = (_23 = object.contactPermOsAuthorizationStatus) !== null && _23 !== void 0 ? _23 : 0;
        return message;
    },
};
//# sourceMappingURL=billboard_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/bolt_provided_signals.js

const bolt_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseBoltSignals() {
    return { boltUseCase: 0, boltCdnExperimentationId: 0, boltIsContentPopular: false, boltClientAppState: 0 };
}
const BoltSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.boltUseCase !== 0) {
            writer.uint32(8).uint32(message.boltUseCase);
        }
        if (message.boltCdnExperimentationId !== 0) {
            writer.uint32(16).uint32(message.boltCdnExperimentationId);
        }
        if (message.boltIsContentPopular !== false) {
            writer.uint32(24).bool(message.boltIsContentPopular);
        }
        if (message.boltClientAppState !== 0) {
            writer.uint32(32).int32(message.boltClientAppState);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBoltSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.boltUseCase = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.boltCdnExperimentationId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.boltIsContentPopular = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.boltClientAppState = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BoltSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBoltSignals();
        message.boltUseCase = (_a = object.boltUseCase) !== null && _a !== void 0 ? _a : 0;
        message.boltCdnExperimentationId = (_b = object.boltCdnExperimentationId) !== null && _b !== void 0 ? _b : 0;
        message.boltIsContentPopular = (_c = object.boltIsContentPopular) !== null && _c !== void 0 ? _c : false;
        message.boltClientAppState = (_d = object.boltClientAppState) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
//# sourceMappingURL=bolt_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/camera_provided_signals.js

const camera_provided_signals_protobufPackage = "snapchat.cdp.cof";
var CameraDirection;
(function (CameraDirection) {
    CameraDirection[CameraDirection["UNKNOWN_CAMERA_DIRECTION"] = 0] = "UNKNOWN_CAMERA_DIRECTION";
    CameraDirection[CameraDirection["FRONT"] = 1] = "FRONT";
    CameraDirection[CameraDirection["BACK"] = 2] = "BACK";
    CameraDirection[CameraDirection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraDirection || (CameraDirection = {}));
var CameraContext;
(function (CameraContext) {
    CameraContext[CameraContext["UNKNOWN_CAMERA_CONTEXT"] = 0] = "UNKNOWN_CAMERA_CONTEXT";
    CameraContext[CameraContext["MAIN"] = 1] = "MAIN";
    CameraContext[CameraContext["REPLY"] = 2] = "REPLY";
    CameraContext[CameraContext["PROFILE"] = 3] = "PROFILE";
    CameraContext[CameraContext["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraContext || (CameraContext = {}));
var CameraApi;
(function (CameraApi) {
    CameraApi[CameraApi["UNKNOWN_CAMERA_API"] = 0] = "UNKNOWN_CAMERA_API";
    CameraApi[CameraApi["CAMERA_1"] = 1] = "CAMERA_1";
    CameraApi[CameraApi["CAMERA_2"] = 2] = "CAMERA_2";
    CameraApi[CameraApi["ARCORE"] = 3] = "ARCORE";
    CameraApi[CameraApi["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraApi || (CameraApi = {}));
var FlashState;
(function (FlashState) {
    FlashState[FlashState["UNKNOWN_FLASH_STATE"] = 0] = "UNKNOWN_FLASH_STATE";
    FlashState[FlashState["FLASH_ON"] = 1] = "FLASH_ON";
    FlashState[FlashState["FLASH_OFF"] = 2] = "FLASH_OFF";
    FlashState[FlashState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FlashState || (FlashState = {}));
var NightModeState;
(function (NightModeState) {
    NightModeState[NightModeState["UNKNOWN_NIGHT_MODE_STATE"] = 0] = "UNKNOWN_NIGHT_MODE_STATE";
    NightModeState[NightModeState["NIGHT_MODE_ON"] = 1] = "NIGHT_MODE_ON";
    NightModeState[NightModeState["NIGHT_MODE_OFF"] = 2] = "NIGHT_MODE_OFF";
    NightModeState[NightModeState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NightModeState || (NightModeState = {}));
var PictureMode;
(function (PictureMode) {
    PictureMode[PictureMode["UNKNOWN_PICTURE_MODE"] = 0] = "UNKNOWN_PICTURE_MODE";
    PictureMode[PictureMode["JPEG_PICTURE_MODE"] = 1] = "JPEG_PICTURE_MODE";
    PictureMode[PictureMode["GPU_PICTURE_MODE"] = 2] = "GPU_PICTURE_MODE";
    PictureMode[PictureMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PictureMode || (PictureMode = {}));
var CaptureMode;
(function (CaptureMode) {
    CaptureMode[CaptureMode["UNKNOWN_CAPTURE_MODE"] = 0] = "UNKNOWN_CAPTURE_MODE";
    CaptureMode[CaptureMode["DEFAULT_CAPTURE_MODE"] = 1] = "DEFAULT_CAPTURE_MODE";
    CaptureMode[CaptureMode["TIMELINE_CAPTURE_MODE"] = 2] = "TIMELINE_CAPTURE_MODE";
    CaptureMode[CaptureMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CaptureMode || (CaptureMode = {}));
var Camera2Level;
(function (Camera2Level) {
    Camera2Level[Camera2Level["UNKNOWN_CAMERA2_LEVEL"] = 0] = "UNKNOWN_CAMERA2_LEVEL";
    Camera2Level[Camera2Level["LEGACY"] = 1] = "LEGACY";
    Camera2Level[Camera2Level["LIMITED"] = 2] = "LIMITED";
    Camera2Level[Camera2Level["FULL"] = 3] = "FULL";
    Camera2Level[Camera2Level["LEVEL_3"] = 4] = "LEVEL_3";
    Camera2Level[Camera2Level["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Camera2Level || (Camera2Level = {}));
function createBaseCameraSignals() {
    return {
        cameraDirection: 0,
        cameraContext: 0,
        cameraApi: 0,
        flashState: 0,
        camera2Level: 0,
        nightModeState: 0,
        isFirstCapture: false,
        pictureMode: 0,
        captureMode: 0,
        hasLens: false,
        isLowLight: false,
        isConcurrentCameraSupported: false,
    };
}
const CameraSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraDirection !== 0) {
            writer.uint32(8).int32(message.cameraDirection);
        }
        if (message.cameraContext !== 0) {
            writer.uint32(16).int32(message.cameraContext);
        }
        if (message.cameraApi !== 0) {
            writer.uint32(24).int32(message.cameraApi);
        }
        if (message.flashState !== 0) {
            writer.uint32(32).int32(message.flashState);
        }
        if (message.camera2Level !== 0) {
            writer.uint32(40).int32(message.camera2Level);
        }
        if (message.nightModeState !== 0) {
            writer.uint32(48).int32(message.nightModeState);
        }
        if (message.isFirstCapture !== false) {
            writer.uint32(56).bool(message.isFirstCapture);
        }
        if (message.pictureMode !== 0) {
            writer.uint32(64).int32(message.pictureMode);
        }
        if (message.captureMode !== 0) {
            writer.uint32(72).int32(message.captureMode);
        }
        if (message.hasLens !== false) {
            writer.uint32(80).bool(message.hasLens);
        }
        if (message.isLowLight !== false) {
            writer.uint32(88).bool(message.isLowLight);
        }
        if (message.isConcurrentCameraSupported !== false) {
            writer.uint32(96).bool(message.isConcurrentCameraSupported);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCameraSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cameraDirection = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.cameraContext = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.cameraApi = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.flashState = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.camera2Level = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.nightModeState = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isFirstCapture = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.pictureMode = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.captureMode = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.hasLens = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.isLowLight = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.isConcurrentCameraSupported = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CameraSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseCameraSignals();
        message.cameraDirection = (_a = object.cameraDirection) !== null && _a !== void 0 ? _a : 0;
        message.cameraContext = (_b = object.cameraContext) !== null && _b !== void 0 ? _b : 0;
        message.cameraApi = (_c = object.cameraApi) !== null && _c !== void 0 ? _c : 0;
        message.flashState = (_d = object.flashState) !== null && _d !== void 0 ? _d : 0;
        message.camera2Level = (_e = object.camera2Level) !== null && _e !== void 0 ? _e : 0;
        message.nightModeState = (_f = object.nightModeState) !== null && _f !== void 0 ? _f : 0;
        message.isFirstCapture = (_g = object.isFirstCapture) !== null && _g !== void 0 ? _g : false;
        message.pictureMode = (_h = object.pictureMode) !== null && _h !== void 0 ? _h : 0;
        message.captureMode = (_j = object.captureMode) !== null && _j !== void 0 ? _j : 0;
        message.hasLens = (_k = object.hasLens) !== null && _k !== void 0 ? _k : false;
        message.isLowLight = (_l = object.isLowLight) !== null && _l !== void 0 ? _l : false;
        message.isConcurrentCameraSupported = (_m = object.isConcurrentCameraSupported) !== null && _m !== void 0 ? _m : false;
        return message;
    },
};
//# sourceMappingURL=camera_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/cognac_provided_signals.js

const cognac_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseCognacSignals() {
    return { cognacId: [] };
}
const CognacSignals = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.cognacId) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCognacSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.cognacId.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CognacSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCognacSignals();
        message.cognacId = ((_a = object.cognacId) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
//# sourceMappingURL=cognac_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/content_manager_provided_signals.js

const content_manager_provided_signals_protobufPackage = "snapchat.cdp.cof";
var LegacyMushroomContentType;
(function (LegacyMushroomContentType) {
    LegacyMushroomContentType[LegacyMushroomContentType["UNKNOWN_ASSET_TYPE"] = 0] = "UNKNOWN_ASSET_TYPE";
    LegacyMushroomContentType[LegacyMushroomContentType["GENERIC_LARGE_ASSET_TYPE"] = 1] = "GENERIC_LARGE_ASSET_TYPE";
    LegacyMushroomContentType[LegacyMushroomContentType["GENERIC_SMALL_ASSET_TYPE"] = 2] = "GENERIC_SMALL_ASSET_TYPE";
    LegacyMushroomContentType[LegacyMushroomContentType["AD_REMOTE_ASSET"] = 3] = "AD_REMOTE_ASSET";
    LegacyMushroomContentType[LegacyMushroomContentType["AD_SNAP"] = 4] = "AD_SNAP";
    LegacyMushroomContentType[LegacyMushroomContentType["AD_WEB_VIEW_RESOURCE_CONTENT"] = 5] = "AD_WEB_VIEW_RESOURCE_CONTENT";
    LegacyMushroomContentType[LegacyMushroomContentType["ATTACHMENT_INFO"] = 6] = "ATTACHMENT_INFO";
    LegacyMushroomContentType[LegacyMushroomContentType["BITMOJI"] = 7] = "BITMOJI";
    LegacyMushroomContentType[LegacyMushroomContentType["BITMOJI_LENS_AVATAR_ASSET"] = 8] = "BITMOJI_LENS_AVATAR_ASSET";
    LegacyMushroomContentType[LegacyMushroomContentType["BITMOJI_LENS_METADATA"] = 9] = "BITMOJI_LENS_METADATA";
    LegacyMushroomContentType[LegacyMushroomContentType["CAPTION_METADATA"] = 10] = "CAPTION_METADATA";
    LegacyMushroomContentType[LegacyMushroomContentType["CAPTION_TYPEFACE"] = 11] = "CAPTION_TYPEFACE";
    LegacyMushroomContentType[LegacyMushroomContentType["CAPTION_VIEW_BITMAP"] = 12] = "CAPTION_VIEW_BITMAP";
    LegacyMushroomContentType[LegacyMushroomContentType["CHAT_MEDIA_THUMBNAIL"] = 13] = "CHAT_MEDIA_THUMBNAIL";
    LegacyMushroomContentType[LegacyMushroomContentType["COGNAC"] = 14] = "COGNAC";
    LegacyMushroomContentType[LegacyMushroomContentType["COGNAC_WEBVIEW"] = 15] = "COGNAC_WEBVIEW";
    LegacyMushroomContentType[LegacyMushroomContentType["COMMERCE"] = 16] = "COMMERCE";
    LegacyMushroomContentType[LegacyMushroomContentType["CONTEXT_FILTER_METADATA"] = 17] = "CONTEXT_FILTER_METADATA";
    LegacyMushroomContentType[LegacyMushroomContentType["CUSTOM_STICKERS"] = 18] = "CUSTOM_STICKERS";
    LegacyMushroomContentType[LegacyMushroomContentType["DISCOVER_FEED_THUMBNAIL"] = 19] = "DISCOVER_FEED_THUMBNAIL";
    LegacyMushroomContentType[LegacyMushroomContentType["DISCOVER_PUBLISHER_SNAP"] = 20] = "DISCOVER_PUBLISHER_SNAP";
    LegacyMushroomContentType[LegacyMushroomContentType["DISCOVER_STORY_SNAP"] = 21] = "DISCOVER_STORY_SNAP";
    LegacyMushroomContentType[LegacyMushroomContentType["DISCOVER_STORY_STREAMING_SNAP"] = 22] = "DISCOVER_STORY_STREAMING_SNAP";
    LegacyMushroomContentType[LegacyMushroomContentType["EMOJI"] = 23] = "EMOJI";
    LegacyMushroomContentType[LegacyMushroomContentType["EMOJI_BRUSH"] = 24] = "EMOJI_BRUSH";
    LegacyMushroomContentType[LegacyMushroomContentType["EXTERNAL_GEOFILTER"] = 25] = "EXTERNAL_GEOFILTER";
    LegacyMushroomContentType[LegacyMushroomContentType["EXTERNAL_STICKER"] = 26] = "EXTERNAL_STICKER";
    LegacyMushroomContentType[LegacyMushroomContentType["GEOFILTER_OVERLAY"] = 27] = "GEOFILTER_OVERLAY";
    LegacyMushroomContentType[LegacyMushroomContentType["IMAGELOADING_URL"] = 28] = "IMAGELOADING_URL";
    LegacyMushroomContentType[LegacyMushroomContentType["HELVETICA"] = 29] = "HELVETICA";
    LegacyMushroomContentType[LegacyMushroomContentType["INFO_STICKER"] = 30] = "INFO_STICKER";
    LegacyMushroomContentType[LegacyMushroomContentType["LENS_CONTENT"] = 31] = "LENS_CONTENT";
    LegacyMushroomContentType[LegacyMushroomContentType["LENS_ICON"] = 32] = "LENS_ICON";
    LegacyMushroomContentType[LegacyMushroomContentType["LENS_OVERLAY_IMAGE"] = 33] = "LENS_OVERLAY_IMAGE";
    LegacyMushroomContentType[LegacyMushroomContentType["LENS_REMOTE_ASSET"] = 34] = "LENS_REMOTE_ASSET";
    LegacyMushroomContentType[LegacyMushroomContentType["LOGIN_KIT_PRIVACT"] = 35] = "LOGIN_KIT_PRIVACT";
    LegacyMushroomContentType[LegacyMushroomContentType["MAPS_EGGHUNT"] = 36] = "MAPS_EGGHUNT";
    LegacyMushroomContentType[LegacyMushroomContentType["MAPS_KASHMIR"] = 37] = "MAPS_KASHMIR";
    LegacyMushroomContentType[LegacyMushroomContentType["MAPS_WORLDEFFECTS"] = 38] = "MAPS_WORLDEFFECTS";
    LegacyMushroomContentType[LegacyMushroomContentType["MEDIA_PACKAGE_COMPOSITE"] = 39] = "MEDIA_PACKAGE_COMPOSITE";
    LegacyMushroomContentType[LegacyMushroomContentType["MEDIA_PACKAGE_THUMB"] = 40] = "MEDIA_PACKAGE_THUMB";
    LegacyMushroomContentType[LegacyMushroomContentType["MEMORIES_EDITS"] = 41] = "MEMORIES_EDITS";
    LegacyMushroomContentType[LegacyMushroomContentType["MEMORIES_MEDIA"] = 42] = "MEMORIES_MEDIA";
    LegacyMushroomContentType[LegacyMushroomContentType["MEMORIES_MINI_THUMBNAIL"] = 43] = "MEMORIES_MINI_THUMBNAIL";
    LegacyMushroomContentType[LegacyMushroomContentType["MEMORIES_OVERLAY"] = 44] = "MEMORIES_OVERLAY";
    LegacyMushroomContentType[LegacyMushroomContentType["MEMORIES_THUMBNAIL"] = 45] = "MEMORIES_THUMBNAIL";
    LegacyMushroomContentType[LegacyMushroomContentType["NON_USER_BITMOJI"] = 46] = "NON_USER_BITMOJI";
    LegacyMushroomContentType[LegacyMushroomContentType["PAYMENTS"] = 47] = "PAYMENTS";
    LegacyMushroomContentType[LegacyMushroomContentType["PUBLISHER_SNAP_MEDIA"] = 48] = "PUBLISHER_SNAP_MEDIA";
    LegacyMushroomContentType[LegacyMushroomContentType["SHAZAM"] = 49] = "SHAZAM";
    LegacyMushroomContentType[LegacyMushroomContentType["SKY_MODEL"] = 50] = "SKY_MODEL";
    LegacyMushroomContentType[LegacyMushroomContentType["SNAP"] = 51] = "SNAP";
    LegacyMushroomContentType[LegacyMushroomContentType["SNAP_FIRST_FRAME"] = 52] = "SNAP_FIRST_FRAME";
    LegacyMushroomContentType[LegacyMushroomContentType["SNAP_LOADING_FRAME"] = 53] = "SNAP_LOADING_FRAME";
    LegacyMushroomContentType[LegacyMushroomContentType["SNAP_STICKER"] = 54] = "SNAP_STICKER";
    LegacyMushroomContentType[LegacyMushroomContentType["SPECTACLES"] = 55] = "SPECTACLES";
    LegacyMushroomContentType[LegacyMushroomContentType["STICKER_TAG"] = 56] = "STICKER_TAG";
    LegacyMushroomContentType[LegacyMushroomContentType["STICKERS_METADATA"] = 57] = "STICKERS_METADATA";
    LegacyMushroomContentType[LegacyMushroomContentType["STORY_SNAP"] = 58] = "STORY_SNAP";
    LegacyMushroomContentType[LegacyMushroomContentType["STORY_THUMB"] = 59] = "STORY_THUMB";
    LegacyMushroomContentType[LegacyMushroomContentType["TRACKING_DATA"] = 60] = "TRACKING_DATA";
    LegacyMushroomContentType[LegacyMushroomContentType["USER_GENERATED_ASSETS"] = 61] = "USER_GENERATED_ASSETS";
    LegacyMushroomContentType[LegacyMushroomContentType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LegacyMushroomContentType || (LegacyMushroomContentType = {}));
function createBaseContentManagerSignals() {
    return { legacyMushroomContentType: 0 };
}
const ContentManagerSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.legacyMushroomContentType !== 0) {
            writer.uint32(8).int32(message.legacyMushroomContentType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContentManagerSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.legacyMushroomContentType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ContentManagerSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContentManagerSignals();
        message.legacyMushroomContentType = (_a = object.legacyMushroomContentType) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
//# sourceMappingURL=content_manager_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/creative_tools_provided_signals.js

const creative_tools_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseCreativeToolsSignals() {
    return { withAnimatedOverlay: false, withMusic: false };
}
const CreativeToolsSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.withAnimatedOverlay !== false) {
            writer.uint32(8).bool(message.withAnimatedOverlay);
        }
        if (message.withMusic !== false) {
            writer.uint32(16).bool(message.withMusic);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreativeToolsSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.withAnimatedOverlay = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.withMusic = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CreativeToolsSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCreativeToolsSignals();
        message.withAnimatedOverlay = (_a = object.withAnimatedOverlay) !== null && _a !== void 0 ? _a : false;
        message.withMusic = (_b = object.withMusic) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
//# sourceMappingURL=creative_tools_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/discover_feed_provided_signals.js

const discover_feed_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseDiscoverFeedSignals() {
    return { discoverFeedSectionCacheInfo: undefined };
}
const DiscoverFeedSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.discoverFeedSectionCacheInfo !== undefined) {
            DiscoverFeedSignals_DiscoverFeedSectionCacheInfo.encode(message.discoverFeedSectionCacheInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDiscoverFeedSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.discoverFeedSectionCacheInfo = DiscoverFeedSignals_DiscoverFeedSectionCacheInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DiscoverFeedSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDiscoverFeedSignals();
        message.discoverFeedSectionCacheInfo =
            (object.discoverFeedSectionCacheInfo !== undefined && object.discoverFeedSectionCacheInfo !== null)
                ? DiscoverFeedSignals_DiscoverFeedSectionCacheInfo.fromPartial(object.discoverFeedSectionCacheInfo)
                : undefined;
        return message;
    },
};
function createBaseDiscoverFeedSignals_DiscoverFeedSectionCacheInfo() {
    return { feedType: 0 };
}
const DiscoverFeedSignals_DiscoverFeedSectionCacheInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.feedType !== 0) {
            writer.uint32(8).int32(message.feedType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDiscoverFeedSignals_DiscoverFeedSectionCacheInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.feedType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DiscoverFeedSignals_DiscoverFeedSectionCacheInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDiscoverFeedSignals_DiscoverFeedSectionCacheInfo();
        message.feedType = (_a = object.feedType) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
//# sourceMappingURL=discover_feed_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/lenses_provided_signals.js

const lenses_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseLensesSignals() {
    return { lastLensActivatedTime: "0", lastSnappableLensActivatedTime: "0", isAnyEffectApplied: false };
}
const LensesSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lastLensActivatedTime !== "0") {
            writer.uint32(8).uint64(message.lastLensActivatedTime);
        }
        if (message.lastSnappableLensActivatedTime !== "0") {
            writer.uint32(16).uint64(message.lastSnappableLensActivatedTime);
        }
        if (message.isAnyEffectApplied !== false) {
            writer.uint32(24).bool(message.isAnyEffectApplied);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensesSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lastLensActivatedTime = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.lastSnappableLensActivatedTime = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isAnyEffectApplied = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LensesSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseLensesSignals();
        message.lastLensActivatedTime = (_a = object.lastLensActivatedTime) !== null && _a !== void 0 ? _a : "0";
        message.lastSnappableLensActivatedTime = (_b = object.lastSnappableLensActivatedTime) !== null && _b !== void 0 ? _b : "0";
        message.isAnyEffectApplied = (_c = object.isAnyEffectApplied) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
//# sourceMappingURL=lenses_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/mdp_media_attribution.js

const mdp_media_attribution_protobufPackage = "snapchat.cdp.cof";
function createBaseMdpMediaAttribution() {
    return { mediaSource: 0, assetType: 0 };
}
const MdpMediaAttribution = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaSource !== 0) {
            writer.uint32(8).int32(message.mediaSource);
        }
        if (message.assetType !== 0) {
            writer.uint32(16).int32(message.assetType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMdpMediaAttribution();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mediaSource = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.assetType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MdpMediaAttribution.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMdpMediaAttribution();
        message.mediaSource = (_a = object.mediaSource) !== null && _a !== void 0 ? _a : 0;
        message.assetType = (_b = object.assetType) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
//# sourceMappingURL=mdp_media_attribution.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/media_provided_signals.js

const media_provided_signals_protobufPackage = "snapchat.cdp.cof";
var MediaType;
(function (MediaType) {
    MediaType[MediaType["MEDIA_TYPE_UNSET"] = 0] = "MEDIA_TYPE_UNSET";
    MediaType[MediaType["IMAGE"] = 1] = "IMAGE";
    MediaType[MediaType["VIDEO"] = 2] = "VIDEO";
    MediaType[MediaType["GIF"] = 3] = "GIF";
    MediaType[MediaType["AUDIO"] = 4] = "AUDIO";
    MediaType[MediaType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaType || (MediaType = {}));
function createBaseMediaSignals() {
    return { mediaDurationMs: 0, mediaType: 0 };
}
const MediaSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaDurationMs !== 0) {
            writer.uint32(8).uint32(message.mediaDurationMs);
        }
        if (message.mediaType !== 0) {
            writer.uint32(16).int32(message.mediaType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mediaDurationMs = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.mediaType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMediaSignals();
        message.mediaDurationMs = (_a = object.mediaDurationMs) !== null && _a !== void 0 ? _a : 0;
        message.mediaType = (_b = object.mediaType) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
//# sourceMappingURL=media_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/opera_provided_signals.js

const opera_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseOperaSignals() {
    return { contentViewSource: 0, playbackItemType: 0, useVerticalNavigation: false };
}
const OperaSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contentViewSource !== 0) {
            writer.uint32(8).int32(message.contentViewSource);
        }
        if (message.playbackItemType !== 0) {
            writer.uint32(16).int32(message.playbackItemType);
        }
        if (message.useVerticalNavigation !== false) {
            writer.uint32(24).bool(message.useVerticalNavigation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperaSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.contentViewSource = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.playbackItemType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.useVerticalNavigation = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return OperaSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseOperaSignals();
        message.contentViewSource = (_a = object.contentViewSource) !== null && _a !== void 0 ? _a : 0;
        message.playbackItemType = (_b = object.playbackItemType) !== null && _b !== void 0 ? _b : 0;
        message.useVerticalNavigation = (_c = object.useVerticalNavigation) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
//# sourceMappingURL=opera_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/perception_provided_signals.js

const perception_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBasePerceptionSignals() {
    return { scannedCategoryIds: [] };
}
const PerceptionSignals = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.scannedCategoryIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerceptionSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scannedCategoryIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerceptionSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePerceptionSignals();
        message.scannedCategoryIds = ((_a = object.scannedCategoryIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
//# sourceMappingURL=perception_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/recipients_provided_signals.js

const recipients_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseRecipientsSignals() {
    return { userIds: [] };
}
const RecipientsSignals = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.userIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecipientsSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RecipientsSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRecipientsSignals();
        message.userIds = ((_a = object.userIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
//# sourceMappingURL=recipients_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/routing_provided_signals.js

const routing_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseRoutingSignals() {
    return { url: "" };
}
const RoutingSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoutingSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RoutingSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRoutingSignals();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
//# sourceMappingURL=routing_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/snap_kit_provided_signals.js

const snap_kit_provided_signals_protobufPackage = "snapchat.cdp.cof";
function createBaseSnapKitSignals() {
    return { oauthClientId: "" };
}
const SnapKitSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.oauthClientId !== "") {
            writer.uint32(10).string(message.oauthClientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnapKitSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.oauthClientId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SnapKitSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSnapKitSignals();
        message.oauthClientId = (_a = object.oauthClientId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
//# sourceMappingURL=snap_kit_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/upload_provided_signals.js

const upload_provided_signals_protobufPackage = "snapchat.cdp.cof";
var ChunkUploadPreference;
(function (ChunkUploadPreference) {
    ChunkUploadPreference[ChunkUploadPreference["PREFERENCE_UNSET"] = 0] = "PREFERENCE_UNSET";
    ChunkUploadPreference[ChunkUploadPreference["GCS"] = 1] = "GCS";
    ChunkUploadPreference[ChunkUploadPreference["S3"] = 2] = "S3";
    ChunkUploadPreference[ChunkUploadPreference["AUTO"] = 3] = "AUTO";
    ChunkUploadPreference[ChunkUploadPreference["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ChunkUploadPreference || (ChunkUploadPreference = {}));
function createBaseUploadSignals() {
    return { chunkUploadSupportRequired: false, cloudfrontPop: "", gcdnPop: "", chunkUploadPreference: 0 };
}
const UploadSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.chunkUploadSupportRequired !== false) {
            writer.uint32(8).bool(message.chunkUploadSupportRequired);
        }
        if (message.cloudfrontPop !== "") {
            writer.uint32(18).string(message.cloudfrontPop);
        }
        if (message.gcdnPop !== "") {
            writer.uint32(26).string(message.gcdnPop);
        }
        if (message.chunkUploadPreference !== 0) {
            writer.uint32(32).int32(message.chunkUploadPreference);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.chunkUploadSupportRequired = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cloudfrontPop = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gcdnPop = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.chunkUploadPreference = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UploadSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUploadSignals();
        message.chunkUploadSupportRequired = (_a = object.chunkUploadSupportRequired) !== null && _a !== void 0 ? _a : false;
        message.cloudfrontPop = (_b = object.cloudfrontPop) !== null && _b !== void 0 ? _b : "";
        message.gcdnPop = (_c = object.gcdnPop) !== null && _c !== void 0 ? _c : "";
        message.chunkUploadPreference = (_d = object.chunkUploadPreference) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
//# sourceMappingURL=upload_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/feature_provided_signals.js




















const feature_provided_signals_protobufPackage = "snapchat.cdp.cof";
var FeatureProvidedSignals_StoryType;
(function (FeatureProvidedSignals_StoryType) {
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["UNKNOWN_STORY_TYPE"] = 0] = "UNKNOWN_STORY_TYPE";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["PUBLIC_USER_STORY"] = 1] = "PUBLIC_USER_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["OUR_STORY"] = 2] = "OUR_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["PUBLISHER_STORY"] = 3] = "PUBLISHER_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["FRIEND_STORY"] = 4] = "FRIEND_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureProvidedSignals_StoryType || (FeatureProvidedSignals_StoryType = {}));
var FeatureProvidedSignals_SpectaclesVersion;
(function (FeatureProvidedSignals_SpectaclesVersion) {
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["UNKNOWN_SPECTACLES_VERSION"] = 0] = "UNKNOWN_SPECTACLES_VERSION";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V1"] = 1] = "V1";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V2"] = 2] = "V2";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V3"] = 3] = "V3";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V4"] = 4] = "V4";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureProvidedSignals_SpectaclesVersion || (FeatureProvidedSignals_SpectaclesVersion = {}));
function createBaseFeatureProvidedSignals() {
    return {
        mediaMetadata: undefined,
        storyMetadata: undefined,
        cameraSignals: undefined,
        snapSource: 0,
        contentManagerProvidedSignals: undefined,
        spectacleMetadata: undefined,
        boltSignals: undefined,
        lensesSignals: undefined,
        creativeToolsSignals: undefined,
        estimatedDurationForEventMs: 0,
        routingSignals: undefined,
        mdpMediaAttribution: undefined,
        size: 0,
        mediaSignals: undefined,
        perceptionSignals: undefined,
        operaSignals: undefined,
        recipientsSignals: undefined,
        billboardSignals: undefined,
        cognacSignals: undefined,
        hashSignals: undefined,
        edgeSignals: {},
        snapKitSignals: undefined,
        uploadSignals: undefined,
        ruids: [],
        discoverFeedSignals: undefined,
    };
}
const FeatureProvidedSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaMetadata !== undefined) {
            MediaMetadata.encode(message.mediaMetadata, writer.uint32(10).fork()).join();
        }
        if (message.storyMetadata !== undefined) {
            FeatureProvidedSignals_StoryMetadata.encode(message.storyMetadata, writer.uint32(18).fork()).join();
        }
        if (message.cameraSignals !== undefined) {
            CameraSignals.encode(message.cameraSignals, writer.uint32(26).fork()).join();
        }
        if (message.snapSource !== 0) {
            writer.uint32(32).int32(message.snapSource);
        }
        if (message.contentManagerProvidedSignals !== undefined) {
            ContentManagerSignals.encode(message.contentManagerProvidedSignals, writer.uint32(42).fork()).join();
        }
        if (message.spectacleMetadata !== undefined) {
            FeatureProvidedSignals_SpectacleMetadata.encode(message.spectacleMetadata, writer.uint32(50).fork()).join();
        }
        if (message.boltSignals !== undefined) {
            BoltSignals.encode(message.boltSignals, writer.uint32(58).fork()).join();
        }
        if (message.lensesSignals !== undefined) {
            LensesSignals.encode(message.lensesSignals, writer.uint32(66).fork()).join();
        }
        if (message.creativeToolsSignals !== undefined) {
            CreativeToolsSignals.encode(message.creativeToolsSignals, writer.uint32(74).fork()).join();
        }
        if (message.estimatedDurationForEventMs !== 0) {
            writer.uint32(80).uint32(message.estimatedDurationForEventMs);
        }
        if (message.routingSignals !== undefined) {
            RoutingSignals.encode(message.routingSignals, writer.uint32(90).fork()).join();
        }
        if (message.mdpMediaAttribution !== undefined) {
            MdpMediaAttribution.encode(message.mdpMediaAttribution, writer.uint32(98).fork()).join();
        }
        if (message.size !== 0) {
            writer.uint32(104).uint32(message.size);
        }
        if (message.mediaSignals !== undefined) {
            MediaSignals.encode(message.mediaSignals, writer.uint32(114).fork()).join();
        }
        if (message.perceptionSignals !== undefined) {
            PerceptionSignals.encode(message.perceptionSignals, writer.uint32(122).fork()).join();
        }
        if (message.operaSignals !== undefined) {
            OperaSignals.encode(message.operaSignals, writer.uint32(130).fork()).join();
        }
        if (message.recipientsSignals !== undefined) {
            RecipientsSignals.encode(message.recipientsSignals, writer.uint32(138).fork()).join();
        }
        if (message.billboardSignals !== undefined) {
            BillboardSignals.encode(message.billboardSignals, writer.uint32(146).fork()).join();
        }
        if (message.cognacSignals !== undefined) {
            CognacSignals.encode(message.cognacSignals, writer.uint32(154).fork()).join();
        }
        if (message.hashSignals !== undefined) {
            FeatureProvidedSignals_HashSignals.encode(message.hashSignals, writer.uint32(162).fork()).join();
        }
        Object.entries(message.edgeSignals).forEach(([key, value]) => {
            FeatureProvidedSignals_EdgeSignalsEntry.encode({ key: key, value }, writer.uint32(170).fork()).join();
        });
        if (message.snapKitSignals !== undefined) {
            SnapKitSignals.encode(message.snapKitSignals, writer.uint32(178).fork()).join();
        }
        if (message.uploadSignals !== undefined) {
            UploadSignals.encode(message.uploadSignals, writer.uint32(186).fork()).join();
        }
        for (const v of message.ruids) {
            Ruid.encode(v, writer.uint32(194).fork()).join();
        }
        if (message.discoverFeedSignals !== undefined) {
            DiscoverFeedSignals.encode(message.discoverFeedSignals, writer.uint32(202).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mediaMetadata = MediaMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.storyMetadata = FeatureProvidedSignals_StoryMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.cameraSignals = CameraSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.snapSource = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.contentManagerProvidedSignals = ContentManagerSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.spectacleMetadata = FeatureProvidedSignals_SpectacleMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.boltSignals = BoltSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lensesSignals = LensesSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.creativeToolsSignals = CreativeToolsSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.estimatedDurationForEventMs = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.routingSignals = RoutingSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.mdpMediaAttribution = MdpMediaAttribution.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.size = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.mediaSignals = MediaSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.perceptionSignals = PerceptionSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.operaSignals = OperaSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.recipientsSignals = RecipientsSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.billboardSignals = BillboardSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.cognacSignals = CognacSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.hashSignals = FeatureProvidedSignals_HashSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    const entry21 = FeatureProvidedSignals_EdgeSignalsEntry.decode(reader, reader.uint32());
                    if (entry21.value !== undefined) {
                        message.edgeSignals[entry21.key] = entry21.value;
                    }
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.snapKitSignals = SnapKitSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.uploadSignals = UploadSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.ruids.push(Ruid.decode(reader, reader.uint32()));
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.discoverFeedSignals = DiscoverFeedSignals.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseFeatureProvidedSignals();
        message.mediaMetadata = (object.mediaMetadata !== undefined && object.mediaMetadata !== null)
            ? MediaMetadata.fromPartial(object.mediaMetadata)
            : undefined;
        message.storyMetadata = (object.storyMetadata !== undefined && object.storyMetadata !== null)
            ? FeatureProvidedSignals_StoryMetadata.fromPartial(object.storyMetadata)
            : undefined;
        message.cameraSignals = (object.cameraSignals !== undefined && object.cameraSignals !== null)
            ? CameraSignals.fromPartial(object.cameraSignals)
            : undefined;
        message.snapSource = (_a = object.snapSource) !== null && _a !== void 0 ? _a : 0;
        message.contentManagerProvidedSignals =
            (object.contentManagerProvidedSignals !== undefined && object.contentManagerProvidedSignals !== null)
                ? ContentManagerSignals.fromPartial(object.contentManagerProvidedSignals)
                : undefined;
        message.spectacleMetadata = (object.spectacleMetadata !== undefined && object.spectacleMetadata !== null)
            ? FeatureProvidedSignals_SpectacleMetadata.fromPartial(object.spectacleMetadata)
            : undefined;
        message.boltSignals = (object.boltSignals !== undefined && object.boltSignals !== null)
            ? BoltSignals.fromPartial(object.boltSignals)
            : undefined;
        message.lensesSignals = (object.lensesSignals !== undefined && object.lensesSignals !== null)
            ? LensesSignals.fromPartial(object.lensesSignals)
            : undefined;
        message.creativeToolsSignals = (object.creativeToolsSignals !== undefined && object.creativeToolsSignals !== null)
            ? CreativeToolsSignals.fromPartial(object.creativeToolsSignals)
            : undefined;
        message.estimatedDurationForEventMs = (_b = object.estimatedDurationForEventMs) !== null && _b !== void 0 ? _b : 0;
        message.routingSignals = (object.routingSignals !== undefined && object.routingSignals !== null)
            ? RoutingSignals.fromPartial(object.routingSignals)
            : undefined;
        message.mdpMediaAttribution = (object.mdpMediaAttribution !== undefined && object.mdpMediaAttribution !== null)
            ? MdpMediaAttribution.fromPartial(object.mdpMediaAttribution)
            : undefined;
        message.size = (_c = object.size) !== null && _c !== void 0 ? _c : 0;
        message.mediaSignals = (object.mediaSignals !== undefined && object.mediaSignals !== null)
            ? MediaSignals.fromPartial(object.mediaSignals)
            : undefined;
        message.perceptionSignals = (object.perceptionSignals !== undefined && object.perceptionSignals !== null)
            ? PerceptionSignals.fromPartial(object.perceptionSignals)
            : undefined;
        message.operaSignals = (object.operaSignals !== undefined && object.operaSignals !== null)
            ? OperaSignals.fromPartial(object.operaSignals)
            : undefined;
        message.recipientsSignals = (object.recipientsSignals !== undefined && object.recipientsSignals !== null)
            ? RecipientsSignals.fromPartial(object.recipientsSignals)
            : undefined;
        message.billboardSignals = (object.billboardSignals !== undefined && object.billboardSignals !== null)
            ? BillboardSignals.fromPartial(object.billboardSignals)
            : undefined;
        message.cognacSignals = (object.cognacSignals !== undefined && object.cognacSignals !== null)
            ? CognacSignals.fromPartial(object.cognacSignals)
            : undefined;
        message.hashSignals = (object.hashSignals !== undefined && object.hashSignals !== null)
            ? FeatureProvidedSignals_HashSignals.fromPartial(object.hashSignals)
            : undefined;
        message.edgeSignals = Object.entries((_d = object.edgeSignals) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[globalThis.Number(key)] = Value.fromPartial(value);
            }
            return acc;
        }, {});
        message.snapKitSignals = (object.snapKitSignals !== undefined && object.snapKitSignals !== null)
            ? SnapKitSignals.fromPartial(object.snapKitSignals)
            : undefined;
        message.uploadSignals = (object.uploadSignals !== undefined && object.uploadSignals !== null)
            ? UploadSignals.fromPartial(object.uploadSignals)
            : undefined;
        message.ruids = ((_e = object.ruids) === null || _e === void 0 ? void 0 : _e.map((e) => Ruid.fromPartial(e))) || [];
        message.discoverFeedSignals = (object.discoverFeedSignals !== undefined && object.discoverFeedSignals !== null)
            ? DiscoverFeedSignals.fromPartial(object.discoverFeedSignals)
            : undefined;
        return message;
    },
};
function createBaseFeatureProvidedSignals_StoryMetadata() {
    return { isPublicStory: false, isOfficialStory: false, storyType: 0 };
}
const FeatureProvidedSignals_StoryMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isPublicStory !== false) {
            writer.uint32(8).bool(message.isPublicStory);
        }
        if (message.isOfficialStory !== false) {
            writer.uint32(16).bool(message.isOfficialStory);
        }
        if (message.storyType !== 0) {
            writer.uint32(24).int32(message.storyType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_StoryMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isPublicStory = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isOfficialStory = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.storyType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_StoryMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFeatureProvidedSignals_StoryMetadata();
        message.isPublicStory = (_a = object.isPublicStory) !== null && _a !== void 0 ? _a : false;
        message.isOfficialStory = (_b = object.isOfficialStory) !== null && _b !== void 0 ? _b : false;
        message.storyType = (_c = object.storyType) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseFeatureProvidedSignals_SpectacleMetadata() {
    return { isSpectacle: false, spectaclesVersion: 0 };
}
const FeatureProvidedSignals_SpectacleMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isSpectacle !== false) {
            writer.uint32(8).bool(message.isSpectacle);
        }
        if (message.spectaclesVersion !== 0) {
            writer.uint32(16).int32(message.spectaclesVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_SpectacleMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isSpectacle = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.spectaclesVersion = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_SpectacleMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFeatureProvidedSignals_SpectacleMetadata();
        message.isSpectacle = (_a = object.isSpectacle) !== null && _a !== void 0 ? _a : false;
        message.spectaclesVersion = (_b = object.spectaclesVersion) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseFeatureProvidedSignals_HashSignals() {
    return { userId: new Uint8Array(0), seed: new Uint8Array(0), namespace: 0 };
}
const FeatureProvidedSignals_HashSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId.length !== 0) {
            writer.uint32(10).bytes(message.userId);
        }
        if (message.seed.length !== 0) {
            writer.uint32(18).bytes(message.seed);
        }
        if (message.namespace !== 0) {
            writer.uint32(24).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_HashSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.seed = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.namespace = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_HashSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFeatureProvidedSignals_HashSignals();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.seed = (_b = object.seed) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.namespace = (_c = object.namespace) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseFeatureProvidedSignals_EdgeSignalsEntry() {
    return { key: 0, value: undefined };
}
const FeatureProvidedSignals_EdgeSignalsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_EdgeSignalsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Value.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_EdgeSignalsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFeatureProvidedSignals_EdgeSignalsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
        return message;
    },
};
//# sourceMappingURL=feature_provided_signals.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/cdp/cof/circumstance_service.js









const circumstance_service_protobufPackage = "snapchat.cdp.cof";
function createBaseGetAbConfigValuesRequest() {
    return {
        configNames: [],
        namespaces: [],
        cofConfigNames: [],
        includeAllConfigs: false,
        disableExposureLogging: false,
        enableDebug: false,
    };
}
const GetAbConfigValuesRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configNames) {
            writer.uint32(10).string(v);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.join();
        for (const v of message.cofConfigNames) {
            writer.uint32(26).string(v);
        }
        if (message.includeAllConfigs !== false) {
            writer.uint32(32).bool(message.includeAllConfigs);
        }
        if (message.disableExposureLogging !== false) {
            writer.uint32(40).bool(message.disableExposureLogging);
        }
        if (message.enableDebug !== false) {
            writer.uint32(104).bool(message.enableDebug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAbConfigValuesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configNames.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.namespaces.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.cofConfigNames.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.includeAllConfigs = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.disableExposureLogging = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.enableDebug = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetAbConfigValuesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGetAbConfigValuesRequest();
        message.configNames = ((_a = object.configNames) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.cofConfigNames = ((_c = object.cofConfigNames) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.includeAllConfigs = (_d = object.includeAllConfigs) !== null && _d !== void 0 ? _d : false;
        message.disableExposureLogging = (_e = object.disableExposureLogging) !== null && _e !== void 0 ? _e : false;
        message.enableDebug = (_f = object.enableDebug) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseGetAbConfigValuesResponse() {
    return { configResults: [], debugTrace: undefined };
}
const GetAbConfigValuesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.debugTrace !== undefined) {
            DebugTrace.encode(message.debugTrace, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAbConfigValuesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.debugTrace = DebugTrace.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetAbConfigValuesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetAbConfigValuesResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        message.debugTrace = (object.debugTrace !== undefined && object.debugTrace !== null)
            ? DebugTrace.fromPartial(object.debugTrace)
            : undefined;
        return message;
    },
};
function createBaseConfigSetGenerationRequest() {
    return { targetingParameters: undefined, overrides: [] };
}
const ConfigSetGenerationRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.targetingParameters !== undefined) {
            ConfigTargetingRequest.encode(message.targetingParameters, writer.uint32(10).fork()).join();
        }
        for (const v of message.overrides) {
            ConfigResult.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigSetGenerationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.targetingParameters = ConfigTargetingRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.overrides.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigSetGenerationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigSetGenerationRequest();
        message.targetingParameters = (object.targetingParameters !== undefined && object.targetingParameters !== null)
            ? ConfigTargetingRequest.fromPartial(object.targetingParameters)
            : undefined;
        message.overrides = ((_a = object.overrides) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseConfigSetGenerationResponse() {
    return { targetingResponse: undefined };
}
const ConfigSetGenerationResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.targetingResponse !== undefined) {
            ConfigTargetingResponse.encode(message.targetingResponse, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigSetGenerationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.targetingResponse = ConfigTargetingResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigSetGenerationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseConfigSetGenerationResponse();
        message.targetingResponse = (object.targetingResponse !== undefined && object.targetingResponse !== null)
            ? ConfigTargetingResponse.fromPartial(object.targetingResponse)
            : undefined;
        return message;
    },
};
function createBasePinConfigRequest() {
    return { configSetToken: "", userId: "", ttlSeconds: 0 };
}
const PinConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.configSetToken !== "") {
            writer.uint32(10).string(message.configSetToken);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(24).int32(message.ttlSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configSetToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ttlSeconds = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PinConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePinConfigRequest();
        message.configSetToken = (_a = object.configSetToken) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        message.ttlSeconds = (_c = object.ttlSeconds) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBasePinConfigResponse() {
    return { debug: "" };
}
const PinConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.debug !== "") {
            writer.uint32(10).string(message.debug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.debug = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PinConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePinConfigResponse();
        message.debug = (_a = object.debug) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUnpinConfigRequest() {
    return { configSetToken: "", userId: "" };
}
const UnpinConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.configSetToken !== "") {
            writer.uint32(10).string(message.configSetToken);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configSetToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UnpinConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUnpinConfigRequest();
        message.configSetToken = (_a = object.configSetToken) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUnpinConfigResponse() {
    return { debug: "" };
}
const UnpinConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.debug !== "") {
            writer.uint32(10).string(message.debug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.debug = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UnpinConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUnpinConfigResponse();
        message.debug = (_a = object.debug) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBasePinTargetingPropertiesRequest() {
    return { userId: "", targetingProperties: undefined, ttlSeconds: 0 };
}
const PinTargetingPropertiesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.targetingProperties !== undefined) {
            FeatureProvidedSignals.encode(message.targetingProperties, writer.uint32(18).fork()).join();
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(24).int32(message.ttlSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinTargetingPropertiesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.targetingProperties = FeatureProvidedSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ttlSeconds = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PinTargetingPropertiesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePinTargetingPropertiesRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.targetingProperties = (object.targetingProperties !== undefined && object.targetingProperties !== null)
            ? FeatureProvidedSignals.fromPartial(object.targetingProperties)
            : undefined;
        message.ttlSeconds = (_b = object.ttlSeconds) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBasePinTargetingPropertiesResponse() {
    return { message: "" };
}
const PinTargetingPropertiesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinTargetingPropertiesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PinTargetingPropertiesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePinTargetingPropertiesResponse();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUnpinTargetingPropertiesRequest() {
    return { userId: "" };
}
const UnpinTargetingPropertiesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinTargetingPropertiesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UnpinTargetingPropertiesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUnpinTargetingPropertiesRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUnpinTargetingPropertiesResponse() {
    return { message: "" };
}
const UnpinTargetingPropertiesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinTargetingPropertiesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UnpinTargetingPropertiesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUnpinTargetingPropertiesResponse();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetPinnedTargetingPropertiesRequest() {
    return { userId: "" };
}
const GetPinnedTargetingPropertiesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPinnedTargetingPropertiesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetPinnedTargetingPropertiesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPinnedTargetingPropertiesRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetPinnedTargetingPropertiesResponse() {
    return { targetingProperties: undefined };
}
const GetPinnedTargetingPropertiesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.targetingProperties !== undefined) {
            FeatureProvidedSignals.encode(message.targetingProperties, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPinnedTargetingPropertiesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.targetingProperties = FeatureProvidedSignals.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetPinnedTargetingPropertiesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetPinnedTargetingPropertiesResponse();
        message.targetingProperties = (object.targetingProperties !== undefined && object.targetingProperties !== null)
            ? FeatureProvidedSignals.fromPartial(object.targetingProperties)
            : undefined;
        return message;
    },
};
function createBaseConfigWithNamespace() {
    return { configName: "", namespace: 0 };
}
const ConfigWithNamespace = {
    encode(message, writer = new BinaryWriter()) {
        if (message.configName !== "") {
            writer.uint32(10).string(message.configName);
        }
        if (message.namespace !== 0) {
            writer.uint32(16).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigWithNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.namespace = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigWithNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConfigWithNamespace();
        message.configName = (_a = object.configName) !== null && _a !== void 0 ? _a : "";
        message.namespace = (_b = object.namespace) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseGetConfigValuesByTokenRequest() {
    return { token: "", configNames: [], namespaces: [], disableExposureLogging: false, getAllConfigs: false };
}
const GetConfigValuesByTokenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        for (const v of message.configNames) {
            ConfigWithNamespace.encode(v, writer.uint32(18).fork()).join();
        }
        writer.uint32(26).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.join();
        if (message.disableExposureLogging !== false) {
            writer.uint32(32).bool(message.disableExposureLogging);
        }
        if (message.getAllConfigs !== false) {
            writer.uint32(40).bool(message.getAllConfigs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigValuesByTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.configNames.push(ConfigWithNamespace.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.namespaces.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.disableExposureLogging = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.getAllConfigs = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetConfigValuesByTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseGetConfigValuesByTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.configNames = ((_b = object.configNames) === null || _b === void 0 ? void 0 : _b.map((e) => ConfigWithNamespace.fromPartial(e))) || [];
        message.namespaces = ((_c = object.namespaces) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.disableExposureLogging = (_d = object.disableExposureLogging) !== null && _d !== void 0 ? _d : false;
        message.getAllConfigs = (_e = object.getAllConfigs) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseGetConfigValuesByTokenResponse() {
    return { configResults: [] };
}
const GetConfigValuesByTokenResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigValuesByTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetConfigValuesByTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigValuesByTokenResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetCachedConfigResultSequenceIdsRequest() {
    return {};
}
const GetCachedConfigResultSequenceIdsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCachedConfigResultSequenceIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetCachedConfigResultSequenceIdsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetCachedConfigResultSequenceIdsRequest();
        return message;
    },
};
function createBaseGetCachedConfigResultSequenceIdsResponse() {
    return { serializedBitmap: new Uint8Array(0) };
}
const GetCachedConfigResultSequenceIdsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.serializedBitmap.length !== 0) {
            writer.uint32(10).bytes(message.serializedBitmap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCachedConfigResultSequenceIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.serializedBitmap = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetCachedConfigResultSequenceIdsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCachedConfigResultSequenceIdsResponse();
        message.serializedBitmap = (_a = object.serializedBitmap) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseGetConfigResultsBySequenceIdsRequest() {
    return { sequenceIds: [] };
}
const GetConfigResultsBySequenceIdsRequest = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.sequenceIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigResultsBySequenceIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.sequenceIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.sequenceIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetConfigResultsBySequenceIdsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigResultsBySequenceIdsRequest();
        message.sequenceIds = ((_a = object.sequenceIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseConfigResultWithSequenceId() {
    return { sequenceId: 0, configResult: undefined };
}
const ConfigResultWithSequenceId = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sequenceId !== 0) {
            writer.uint32(8).int32(message.sequenceId);
        }
        if (message.configResult !== undefined) {
            ConfigResult.encode(message.configResult, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResultWithSequenceId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sequenceId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.configResult = ConfigResult.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigResultWithSequenceId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigResultWithSequenceId();
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        message.configResult = (object.configResult !== undefined && object.configResult !== null)
            ? ConfigResult.fromPartial(object.configResult)
            : undefined;
        return message;
    },
};
function createBaseGetConfigResultsBySequenceIdsResponse() {
    return { configResultWithSequenceIds: [] };
}
const GetConfigResultsBySequenceIdsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configResultWithSequenceIds) {
            ConfigResultWithSequenceId.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigResultsBySequenceIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResultWithSequenceIds.push(ConfigResultWithSequenceId.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetConfigResultsBySequenceIdsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigResultsBySequenceIdsResponse();
        message.configResultWithSequenceIds =
            ((_a = object.configResultWithSequenceIds) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResultWithSequenceId.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetBitmapByTokenRequest() {
    return { token: "" };
}
const GetBitmapByTokenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBitmapByTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetBitmapByTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetBitmapByTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetBitmapByTokenResponse() {
    return { idBitmap: new Uint8Array(0) };
}
const GetBitmapByTokenResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idBitmap.length !== 0) {
            writer.uint32(10).bytes(message.idBitmap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBitmapByTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idBitmap = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetBitmapByTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetBitmapByTokenResponse();
        message.idBitmap = (_a = object.idBitmap) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest() {
    return { namespaces: [], edgeConfigClientVersion: "" };
}
const GetUnevaluatedConfigResultsWithAbTargetingRequest = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.join();
        if (message.edgeConfigClientVersion !== "") {
            writer.uint32(18).string(message.edgeConfigClientVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.namespaces.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.edgeConfigClientVersion = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetUnevaluatedConfigResultsWithAbTargetingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest();
        message.namespaces = ((_a = object.namespaces) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.edgeConfigClientVersion = (_b = object.edgeConfigClientVersion) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse() {
    return { configResults: [] };
}
const GetUnevaluatedConfigResultsWithAbTargetingResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetUnevaluatedConfigResultsWithAbTargetingResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAddRuidsForDebuggingRequest() {
    return { ruids: [], configNames: [], maxSnapshots: 0 };
}
const AddRuidsForDebuggingRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.ruids) {
            Ruid.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.configNames) {
            writer.uint32(18).string(v);
        }
        if (message.maxSnapshots !== 0) {
            writer.uint32(24).int32(message.maxSnapshots);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddRuidsForDebuggingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ruids.push(Ruid.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.configNames.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.maxSnapshots = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return AddRuidsForDebuggingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAddRuidsForDebuggingRequest();
        message.ruids = ((_a = object.ruids) === null || _a === void 0 ? void 0 : _a.map((e) => Ruid.fromPartial(e))) || [];
        message.configNames = ((_b = object.configNames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.maxSnapshots = (_c = object.maxSnapshots) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseAddRuidsForDebuggingResponse() {
    return {};
}
const AddRuidsForDebuggingResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddRuidsForDebuggingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return AddRuidsForDebuggingResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddRuidsForDebuggingResponse();
        return message;
    },
};
class CircumstancesServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.targetingQuery = this.targetingQuery.bind(this);
        this.getAbConfigValues = this.getAbConfigValues.bind(this);
        this.getConfigValuesByToken = this.getConfigValuesByToken.bind(this);
        this.getConfigResultsBySequenceIds = this.getConfigResultsBySequenceIds.bind(this);
        this.getCachedConfigResultSequenceIds = this.getCachedConfigResultSequenceIds.bind(this);
        this.getBitmapByToken = this.getBitmapByToken.bind(this);
        this.generateConfigSet = this.generateConfigSet.bind(this);
        this.pinConfigSet = this.pinConfigSet.bind(this);
        this.unpinConfigSet = this.unpinConfigSet.bind(this);
        this.getUnevaluatedConfigResultsWithAbTargeting = this.getUnevaluatedConfigResultsWithAbTargeting.bind(this);
        this.addRuidsForDebugging = this.addRuidsForDebugging.bind(this);
        this.pinTargetingProperties = this.pinTargetingProperties.bind(this);
        this.unpinTargetingProperties = this.unpinTargetingProperties.bind(this);
        this.getPinnedTargetingProperties = this.getPinnedTargetingProperties.bind(this);
    }
    targetingQuery(request, metadata) {
        return this.rpc.unary(CircumstancesServicetargetingQueryDesc, ConfigTargetingRequest.fromPartial(request), metadata);
    }
    getAbConfigValues(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetAbConfigValuesDesc, GetAbConfigValuesRequest.fromPartial(request), metadata);
    }
    getConfigValuesByToken(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetConfigValuesByTokenDesc, GetConfigValuesByTokenRequest.fromPartial(request), metadata);
    }
    getConfigResultsBySequenceIds(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetConfigResultsBySequenceIdsDesc, GetConfigResultsBySequenceIdsRequest.fromPartial(request), metadata);
    }
    getCachedConfigResultSequenceIds(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetCachedConfigResultSequenceIdsDesc, GetCachedConfigResultSequenceIdsRequest.fromPartial(request), metadata);
    }
    getBitmapByToken(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetBitmapByTokenDesc, GetBitmapByTokenRequest.fromPartial(request), metadata);
    }
    generateConfigSet(request, metadata) {
        return this.rpc.unary(CircumstancesServicegenerateConfigSetDesc, ConfigSetGenerationRequest.fromPartial(request), metadata);
    }
    pinConfigSet(request, metadata) {
        return this.rpc.unary(CircumstancesServicepinConfigSetDesc, PinConfigRequest.fromPartial(request), metadata);
    }
    unpinConfigSet(request, metadata) {
        return this.rpc.unary(CircumstancesServiceunpinConfigSetDesc, UnpinConfigRequest.fromPartial(request), metadata);
    }
    getUnevaluatedConfigResultsWithAbTargeting(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetUnevaluatedConfigResultsWithAbTargetingDesc, GetUnevaluatedConfigResultsWithAbTargetingRequest.fromPartial(request), metadata);
    }
    addRuidsForDebugging(request, metadata) {
        return this.rpc.unary(CircumstancesServiceaddRuidsForDebuggingDesc, AddRuidsForDebuggingRequest.fromPartial(request), metadata);
    }
    pinTargetingProperties(request, metadata) {
        return this.rpc.unary(CircumstancesServicepinTargetingPropertiesDesc, PinTargetingPropertiesRequest.fromPartial(request), metadata);
    }
    unpinTargetingProperties(request, metadata) {
        return this.rpc.unary(CircumstancesServiceunpinTargetingPropertiesDesc, UnpinTargetingPropertiesRequest.fromPartial(request), metadata);
    }
    getPinnedTargetingProperties(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetPinnedTargetingPropertiesDesc, GetPinnedTargetingPropertiesRequest.fromPartial(request), metadata);
    }
}
const CircumstancesServiceDesc = { serviceName: "snapchat.cdp.cof.CircumstancesService" };
const CircumstancesServicetargetingQueryDesc = {
    methodName: "targetingQuery",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return ConfigTargetingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = ConfigTargetingResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetAbConfigValuesDesc = {
    methodName: "getAbConfigValues",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetAbConfigValuesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetAbConfigValuesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetConfigValuesByTokenDesc = {
    methodName: "getConfigValuesByToken",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetConfigValuesByTokenRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetConfigValuesByTokenResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetConfigResultsBySequenceIdsDesc = {
    methodName: "getConfigResultsBySequenceIds",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetConfigResultsBySequenceIdsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetConfigResultsBySequenceIdsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetCachedConfigResultSequenceIdsDesc = {
    methodName: "getCachedConfigResultSequenceIds",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetCachedConfigResultSequenceIdsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetCachedConfigResultSequenceIdsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetBitmapByTokenDesc = {
    methodName: "getBitmapByToken",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetBitmapByTokenRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetBitmapByTokenResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegenerateConfigSetDesc = {
    methodName: "generateConfigSet",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return ConfigSetGenerationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = ConfigSetGenerationResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicepinConfigSetDesc = {
    methodName: "pinConfigSet",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return PinConfigRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = PinConfigResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServiceunpinConfigSetDesc = {
    methodName: "unpinConfigSet",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return UnpinConfigRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = UnpinConfigResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetUnevaluatedConfigResultsWithAbTargetingDesc = {
    methodName: "getUnevaluatedConfigResultsWithAbTargeting",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetUnevaluatedConfigResultsWithAbTargetingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetUnevaluatedConfigResultsWithAbTargetingResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServiceaddRuidsForDebuggingDesc = {
    methodName: "addRuidsForDebugging",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return AddRuidsForDebuggingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = AddRuidsForDebuggingResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicepinTargetingPropertiesDesc = {
    methodName: "pinTargetingProperties",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return PinTargetingPropertiesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = PinTargetingPropertiesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServiceunpinTargetingPropertiesDesc = {
    methodName: "unpinTargetingProperties",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return UnpinTargetingPropertiesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = UnpinTargetingPropertiesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
const CircumstancesServicegetPinnedTargetingPropertiesDesc = {
    methodName: "getPinnedTargetingProperties",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetPinnedTargetingPropertiesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetPinnedTargetingPropertiesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_umd.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_client_umd.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_client_umd.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
//# sourceMappingURL=circumstance_service.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/responseCachingHandler.js




const responseCachingHandler_logger = getLogger("responseCachingHandler");
const notFound = (key) => cacheKeyNotFoundError(`Response for key ${key} not found in cache.`);
const strategyFailed = (key, cause) => new Error(`Network request and cache lookup for key ${key} both failed.`, { cause });
const staleIfErrorStrategy = (options) => (key, cache, network) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    try {
        const response = yield network();
        cache.store(key, response).catch((error) => {
            responseCachingHandler_logger.warn(`staleIfErrorStrategy failed to store key ${key}.`, error);
        });
        return response;
    }
    catch (networkError) {
        try {
            const cachedResponse = yield cache.retrieve(key);
            if (!cachedResponse) {
                (_a = options === null || options === void 0 ? void 0 : options.onMiss) === null || _a === void 0 ? void 0 : _a.call(options);
                throw notFound(key);
            }
            responseCachingHandler_logger.debug(`staleIfErrorStrategy successfully fell back to cache for key ${key} after network error.`, networkError);
            (_b = options === null || options === void 0 ? void 0 : options.onHit) === null || _b === void 0 ? void 0 : _b.call(options);
            return cachedResponse;
        }
        catch (cacheError) {
            const error = ensureError(cacheError);
            error.cause = networkError;
            throw strategyFailed(key, error);
        }
    }
});
const staleWhileRevalidateStrategy = (options) => (key, cache, network) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _c, _d;
    try {
        const cachedResponse = yield cache.retrieve(key);
        if (!cachedResponse)
            throw notFound(key);
        network({ isSideEffect: true })
            .then((response) => cache.store(key, response))
            .catch((error) => {
            responseCachingHandler_logger.warn(`staleWhileRevalidateStrategy failed to retrieve and store key ${key}.`, error);
        });
        (_c = options === null || options === void 0 ? void 0 : options.onHit) === null || _c === void 0 ? void 0 : _c.call(options);
        return cachedResponse;
    }
    catch (cacheError) {
        (_d = options === null || options === void 0 ? void 0 : options.onMiss) === null || _d === void 0 ? void 0 : _d.call(options);
        try {
            const response = yield network();
            cache.store(key, response).catch((error) => {
                responseCachingHandler_logger.warn(`staleWhileRevalidateStrategy failed to store key ${key}.`, error);
            });
            responseCachingHandler_logger.debug(`staleWhileRevalidateStrategy successfully fell back to network for key ${key} after cache error.`, cacheError);
            return response;
        }
        catch (networkError) {
            const error = errorHelpers_ensureError(networkError);
            error.cause = cacheError;
            throw strategyFailed(key, error);
        }
    }
});
const createResponseCachingHandler = (cache, resolveKey, strategy) => {
    return (next) => (request, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        const network = (additionalMetadata = {}) => {
            const m = Object.assign(Object.assign({}, metadata), additionalMetadata);
            return next(request, m);
        };
        let key;
        try {
            key = resolveKey(request, metadata);
        }
        catch (error) {
            responseCachingHandler_logger.warn("Cache lookup failed because the cache key could not be resolved.", error);
            return network();
        }
        return strategy(key, cache, network);
    });
};
//# sourceMappingURL=responseCachingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/persistence/Persistence.js
const isValidKey = (key) => typeof key === "string" || typeof key === "number";
class Persistence {
}
//# sourceMappingURL=Persistence.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/persistence/IndexedDBPersistence.js


function wrapRequest(request) {
    const p = new Promise((resolve, reject) => {
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
    });
    p.request = request;
    return p;
}
function wrapCursorRequest(request) {
    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            const cursor = request.result;
            if (!cursor)
                resolve({ cursor: null, continue: () => Promise.reject() });
            else
                resolve({
                    cursor,
                    continue: () => {
                        cursor.continue();
                        return wrapCursorRequest(request);
                    },
                });
        };
        request.onerror = () => reject(request.error);
    });
}
class IndexedDBPersistence {
    constructor(options) {
        var _a;
        this.databaseName = `Snap.CameraKit.${options.databaseName}`;
        this.databaseVersion = options.databaseVersion;
        this.objectStore = (_a = options.objectStore) !== null && _a !== void 0 ? _a : options.databaseName;
        this.db = this.openDatabase(indexedDB.open(this.databaseName, this.databaseVersion));
        this.size = 0;
    }
    retrieve(key) {
        return this.simpleTransaction("readonly", (store) => store.get(key));
    }
    retrieveAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = [];
            const { store, done } = yield this.transaction("readonly");
            let request = yield wrapCursorRequest(store.openCursor());
            while (request.cursor) {
                results.push([request.cursor.primaryKey, request.cursor.value]);
                request = yield request.continue();
            }
            yield done;
            return results;
        });
    }
    remove(key) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.simpleTransaction("readwrite", (store) => store.delete(key));
            this.size--;
        });
    }
    removeAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = [];
            const { store, done } = yield this.transaction("readwrite");
            let request = yield wrapCursorRequest(store.openCursor());
            const deleteRequests = [];
            while (request.cursor) {
                results.push(request.cursor.value);
                deleteRequests.push(wrapRequest(store.delete(request.cursor.key)));
                request = yield request.continue();
            }
            yield Promise.all(deleteRequests.concat(done));
            this.size = 0;
            return results;
        });
    }
    store(keyOrValue, maybeValue) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [key, value] = maybeValue === undefined ? [undefined, keyOrValue] : [keyOrValue, maybeValue];
            if (!isValidKey(key) && typeof key !== "undefined")
                throw new TypeError(`IndexedDBPersistence failed to ` + `store a value. Invalid key type: ${typeof key}`);
            const storedKey = yield this.simpleTransaction("readwrite", (store) => store.put(value, key));
            this.size++;
            return storedKey;
        });
    }
    openDatabase(request) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const dbPromise = wrapRequest(request);
            dbPromise.request.onupgradeneeded = () => {
                try {
                    dbPromise.request.result.createObjectStore(this.objectStore, { autoIncrement: true });
                }
                catch (error) {
                    if (error instanceof DOMException && error.name === "ConstraintError")
                        return;
                    throw error;
                }
            };
            const db = yield dbPromise;
            db.onclose = () => {
                this.db = this.openDatabase(indexedDB.open(this.databaseName, this.databaseVersion));
            };
            return db;
        });
    }
    simpleTransaction(mode, operation) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { store, done } = yield this.transaction(mode);
            const [result] = yield Promise.all([wrapRequest(operation(store)), done]);
            return result;
        });
    }
    transaction(mode) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const db = yield this.db;
            const tx = db.transaction(this.objectStore, mode);
            const store = tx.objectStore(this.objectStore);
            const done = new Promise((resolve, reject) => {
                tx.oncomplete = () => resolve();
                tx.onerror = () => reject(tx.error);
                tx.onabort = () => reject(new DOMException("The transaction was aborted", "AbortError"));
            });
            return { tx, store, done };
        });
    }
}
//# sourceMappingURL=IndexedDBPersistence.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/persistence/ExpiringPersistence.js


const ExpiringPersistence_logger = getLogger("ExpiringPersistence");
class ExpiringPersistence {
    constructor(expiration, persistence) {
        this.expiration = expiration;
        this.persistence = persistence;
        this.removeExpired().catch((error) => {
            ExpiringPersistence_logger.warn("Failed to cleanup expired entries on startup.", error);
        });
    }
    get size() {
        return this.persistence.size;
    }
    retrieve(key) {
        var _a;
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [expiry, value] = (_a = (yield this.persistence.retrieve(key))) !== null && _a !== void 0 ? _a : [];
            if (value === undefined || expiry === undefined)
                return undefined;
            if (Date.now() > expiry) {
                yield this.persistence.remove(key).catch((error) => {
                    ExpiringPersistence_logger.warn(`Key ${key} is expired, but removing it from persistence failed.`, error);
                });
                return undefined;
            }
            return value;
        });
    }
    retrieveAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const now = Date.now();
            return (yield this.persistence.retrieveAll()).filter(([, [expiry]]) => expiry >= now).map(([, v]) => v);
        });
    }
    remove(key) {
        return this.persistence.remove(key);
    }
    removeAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = yield this.persistence.removeAll();
            return results.map(([, v]) => v);
        });
    }
    removeExpired() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            for (const [key, [expiry]] of yield this.persistence.retrieveAll()) {
                if (Date.now() >= expiry) {
                    yield this.persistence
                        .remove(key)
                        .catch((error) => ExpiringPersistence_logger.warn(`Failed to remove expired key ${key}.`, error));
                }
            }
        });
    }
    store(keyOrValue, maybeValue) {
        const [key, value] = maybeValue === undefined ? [undefined, keyOrValue] : [keyOrValue, maybeValue];
        const expiry = Date.now() + this.expiration(value) * 1000;
        return key === undefined
            ? this.persistence.store([expiry, value])
            : this.persistence.store(key, [expiry, value]);
    }
}
//# sourceMappingURL=ExpiringPersistence.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/filter.js


function filter(predicate, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}
//# sourceMappingURL=filter.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/pageVisibility.js

class PageVisibility {
    constructor() {
        this.onHiddenHandlers = new Set();
        this.onVisibleHandlers = new Set();
        this.previousVisibilityState = document.visibilityState;
        this.visibilityTransition = false;
        this.onVisibilityChange = this.onVisibilityChange.bind(this);
        this.isDuringVisibilityTransition = this.isDuringVisibilityTransition.bind(this);
        this.onPageHidden = this.onPageHidden.bind(this);
        this.onPageVisible = this.onPageVisible.bind(this);
        this.destroy = this.destroy.bind(this);
        document.addEventListener("visibilitychange", this.onVisibilityChange);
    }
    isDuringVisibilityTransition(test) {
        return test === this.visibilityTransition;
    }
    onPageHidden(handler) {
        this.onHiddenHandlers.add(handler);
        return () => this.onHiddenHandlers.delete(handler);
    }
    onPageVisible(handler) {
        this.onVisibleHandlers.add(handler);
        return () => this.onVisibleHandlers.delete(handler);
    }
    destroy() {
        document.removeEventListener("visibilitychange", this.onVisibilityChange);
        this.onHiddenHandlers.clear();
        this.onVisibleHandlers.clear();
    }
    onVisibilityChange() {
        const handlers = this.previousVisibilityState === "visible" && document.visibilityState === "hidden"
            ? this.onHiddenHandlers
            : this.previousVisibilityState === "hidden" && document.visibilityState === "visible"
                ? this.onVisibleHandlers
                : new Set();
        this.visibilityTransition = document.visibilityState;
        for (const handler of handlers) {
            try {
                handler();
            }
            catch (error) {
                if (typeof window !== "undefined")
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
        }
        this.previousVisibilityState = this.visibilityTransition;
        this.visibilityTransition = false;
    }
}
const pageVisibilityFactory = Injectable("pageVisibility", () => new PageVisibility());
//# sourceMappingURL=pageVisibility.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/blizzard/cameraKitEvents.js

const ServerEventBatch = {
    encode(message, writer = new BinaryWriter()) {
        if (message.serverUploadTs !== 0) {
            writer.uint32(9).double(message.serverUploadTs);
        }
        for (const v of message.serverAllUpdateEvents) {
            ServerRequestAllUpdates.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.maxSequenceIdOnInstance !== "0") {
            writer.uint32(24).uint64(message.maxSequenceIdOnInstance);
        }
        for (const v of message.serverEvents) {
            ServerEvent.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseServerEventBatch();
        message.serverUploadTs = (_a = object.serverUploadTs) !== null && _a !== void 0 ? _a : 0;
        message.serverAllUpdateEvents = ((_b = object.serverAllUpdateEvents) === null || _b === void 0 ? void 0 : _b.map((e) => ServerRequestAllUpdates.fromPartial(e))) ||
            [];
        message.maxSequenceIdOnInstance = (_c = object.maxSequenceIdOnInstance) !== null && _c !== void 0 ? _c : "0";
        message.serverEvents = ((_d = object.serverEvents) === null || _d === void 0 ? void 0 : _d.map((e) => ServerEvent.fromPartial(e))) || [];
        return message;
    },
};
function createBaseServerEventBatch() {
    return { serverUploadTs: 0, serverAllUpdateEvents: [], maxSequenceIdOnInstance: "0", serverEvents: [] };
}
const ServerRequestAllUpdates = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(_) {
        const message = createBaseServerRequestAllUpdates();
        return message;
    },
};
function createBaseServerRequestAllUpdates() {
    return {};
}
const ServerEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.eventName !== "") {
            writer.uint32(10).string(message.eventName);
        }
        if (message.serverTs !== 0) {
            writer.uint32(25).double(message.serverTs);
        }
        if (message.userId !== "") {
            writer.uint32(34).string(message.userId);
        }
        if (message.userAgent !== "") {
            writer.uint32(42).string(message.userAgent);
        }
        if (message.country !== "") {
            writer.uint32(50).string(message.country);
        }
        if (message.city !== "") {
            writer.uint32(58).string(message.city);
        }
        if (message.region !== "") {
            writer.uint32(66).string(message.region);
        }
        if (message.eventId !== "") {
            writer.uint32(74).string(message.eventId);
        }
        if (message.instanceId !== "") {
            writer.uint32(82).string(message.instanceId);
        }
        if (message.sequenceId !== "0") {
            writer.uint32(88).uint64(message.sequenceId);
        }
        if (message.osType !== "") {
            writer.uint32(98).string(message.osType);
        }
        if (message.osVersion !== "") {
            writer.uint32(106).string(message.osVersion);
        }
        if (message.appVersion !== "") {
            writer.uint32(114).string(message.appVersion);
        }
        if (message.appBuild !== "") {
            writer.uint32(122).string(message.appBuild);
        }
        if (message.serverUploadTs !== 0) {
            writer.uint32(809).double(message.serverUploadTs);
        }
        if (message.eventTime !== 0) {
            writer.uint32(817).double(message.eventTime);
        }
        if (message.serverReceiptTime !== 0) {
            writer.uint32(825).double(message.serverReceiptTime);
        }
        if (message.maxSequenceIdOnInstance !== "0") {
            writer.uint32(832).uint64(message.maxSequenceIdOnInstance);
        }
        if (message.userGuid !== "") {
            writer.uint32(850).string(message.userGuid);
        }
        if (message.collection !== 0) {
            writer.uint32(872).int32(message.collection);
        }
        if (message.serviceId !== "") {
            writer.uint32(890).string(message.serviceId);
        }
        if (message.appType !== 0) {
            writer.uint32(912).int32(message.appType);
        }
        if (message.spectrumInstanceId !== "") {
            writer.uint32(930).string(message.spectrumInstanceId);
        }
        if (message.spectrumSequenceId !== "0") {
            writer.uint32(944).uint64(message.spectrumSequenceId);
        }
        if (message.eventData !== undefined) {
            ServerEventData.encode(message.eventData, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const message = createBaseServerEvent();
        message.eventName = (_a = object.eventName) !== null && _a !== void 0 ? _a : "";
        message.serverTs = (_b = object.serverTs) !== null && _b !== void 0 ? _b : 0;
        message.userId = (_c = object.userId) !== null && _c !== void 0 ? _c : "";
        message.userAgent = (_d = object.userAgent) !== null && _d !== void 0 ? _d : "";
        message.country = (_e = object.country) !== null && _e !== void 0 ? _e : "";
        message.city = (_f = object.city) !== null && _f !== void 0 ? _f : "";
        message.region = (_g = object.region) !== null && _g !== void 0 ? _g : "";
        message.eventId = (_h = object.eventId) !== null && _h !== void 0 ? _h : "";
        message.instanceId = (_j = object.instanceId) !== null && _j !== void 0 ? _j : "";
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : "0";
        message.osType = (_l = object.osType) !== null && _l !== void 0 ? _l : "";
        message.osVersion = (_m = object.osVersion) !== null && _m !== void 0 ? _m : "";
        message.appVersion = (_o = object.appVersion) !== null && _o !== void 0 ? _o : "";
        message.appBuild = (_p = object.appBuild) !== null && _p !== void 0 ? _p : "";
        message.serverUploadTs = (_q = object.serverUploadTs) !== null && _q !== void 0 ? _q : 0;
        message.eventTime = (_r = object.eventTime) !== null && _r !== void 0 ? _r : 0;
        message.serverReceiptTime = (_s = object.serverReceiptTime) !== null && _s !== void 0 ? _s : 0;
        message.maxSequenceIdOnInstance = (_t = object.maxSequenceIdOnInstance) !== null && _t !== void 0 ? _t : "0";
        message.userGuid = (_u = object.userGuid) !== null && _u !== void 0 ? _u : "";
        message.collection = (_v = object.collection) !== null && _v !== void 0 ? _v : 0;
        message.serviceId = (_w = object.serviceId) !== null && _w !== void 0 ? _w : "";
        message.appType = (_x = object.appType) !== null && _x !== void 0 ? _x : 0;
        message.spectrumInstanceId = (_y = object.spectrumInstanceId) !== null && _y !== void 0 ? _y : "";
        message.spectrumSequenceId = (_z = object.spectrumSequenceId) !== null && _z !== void 0 ? _z : "0";
        message.eventData = (object.eventData !== undefined && object.eventData !== null)
            ? ServerEventData.fromPartial(object.eventData)
            : undefined;
        return message;
    },
};
function createBaseServerEvent() {
    return {
        eventName: "",
        serverTs: 0,
        userId: "",
        userAgent: "",
        country: "",
        city: "",
        region: "",
        eventId: "",
        instanceId: "",
        sequenceId: "0",
        osType: "",
        osVersion: "",
        appVersion: "",
        appBuild: "",
        serverUploadTs: 0,
        eventTime: 0,
        serverReceiptTime: 0,
        maxSequenceIdOnInstance: "0",
        userGuid: "",
        collection: 0,
        serviceId: "",
        appType: 0,
        spectrumInstanceId: "",
        spectrumSequenceId: "0",
        eventData: undefined,
    };
}
const ServerEventData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitException !== undefined) {
            CameraKitException.encode(message.cameraKitException, writer.uint32(1866).fork()).join();
        }
        if (message.cameraKitLensSpin !== undefined) {
            CameraKitLensSpin.encode(message.cameraKitLensSpin, writer.uint32(1874).fork()).join();
        }
        if (message.cameraKitAssetDownload !== undefined) {
            CameraKitAssetDownload.encode(message.cameraKitAssetDownload, writer.uint32(1882).fork()).join();
        }
        if (message.cameraKitLensContentValidationFailed !== undefined) {
            CameraKitLensContentValidationFailed.encode(message.cameraKitLensContentValidationFailed, writer.uint32(1922).fork()).join();
        }
        if (message.cameraKitLensDownload !== undefined) {
            CameraKitLensDownload.encode(message.cameraKitLensDownload, writer.uint32(1930).fork()).join();
        }
        if (message.cameraKitAssetValidationFailed !== undefined) {
            CameraKitAssetValidationFailed.encode(message.cameraKitAssetValidationFailed, writer.uint32(1938).fork()).join();
        }
        if (message.cameraKitSession !== undefined) {
            CameraKitSession.encode(message.cameraKitSession, writer.uint32(2130).fork()).join();
        }
        if (message.cameraKitWebLensSwipe !== undefined) {
            CameraKitWebLensSwipe.encode(message.cameraKitWebLensSwipe, writer.uint32(3818).fork()).join();
        }
        if (message.cameraKitWebBenchmarkComplete !== undefined) {
            CameraKitWebBenchmarkComplete.encode(message.cameraKitWebBenchmarkComplete, writer.uint32(3826).fork()).join();
        }
        if (message.cameraKitLegalPrompt !== undefined) {
            CameraKitLegalPrompt.encode(message.cameraKitLegalPrompt, writer.uint32(3874).fork()).join();
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        const message = createBaseServerEventData();
        message.cameraKitException = (object.cameraKitException !== undefined && object.cameraKitException !== null)
            ? CameraKitException.fromPartial(object.cameraKitException)
            : undefined;
        message.cameraKitLensSpin = (object.cameraKitLensSpin !== undefined && object.cameraKitLensSpin !== null)
            ? CameraKitLensSpin.fromPartial(object.cameraKitLensSpin)
            : undefined;
        message.cameraKitAssetDownload =
            (object.cameraKitAssetDownload !== undefined && object.cameraKitAssetDownload !== null)
                ? CameraKitAssetDownload.fromPartial(object.cameraKitAssetDownload)
                : undefined;
        message.cameraKitLensContentValidationFailed =
            (object.cameraKitLensContentValidationFailed !== undefined &&
                object.cameraKitLensContentValidationFailed !== null)
                ? CameraKitLensContentValidationFailed.fromPartial(object.cameraKitLensContentValidationFailed)
                : undefined;
        message.cameraKitLensDownload =
            (object.cameraKitLensDownload !== undefined && object.cameraKitLensDownload !== null)
                ? CameraKitLensDownload.fromPartial(object.cameraKitLensDownload)
                : undefined;
        message.cameraKitAssetValidationFailed =
            (object.cameraKitAssetValidationFailed !== undefined && object.cameraKitAssetValidationFailed !== null)
                ? CameraKitAssetValidationFailed.fromPartial(object.cameraKitAssetValidationFailed)
                : undefined;
        message.cameraKitSession = (object.cameraKitSession !== undefined && object.cameraKitSession !== null)
            ? CameraKitSession.fromPartial(object.cameraKitSession)
            : undefined;
        message.cameraKitWebLensSwipe =
            (object.cameraKitWebLensSwipe !== undefined && object.cameraKitWebLensSwipe !== null)
                ? CameraKitWebLensSwipe.fromPartial(object.cameraKitWebLensSwipe)
                : undefined;
        message.cameraKitWebBenchmarkComplete =
            (object.cameraKitWebBenchmarkComplete !== undefined && object.cameraKitWebBenchmarkComplete !== null)
                ? CameraKitWebBenchmarkComplete.fromPartial(object.cameraKitWebBenchmarkComplete)
                : undefined;
        message.cameraKitLegalPrompt = (object.cameraKitLegalPrompt !== undefined && object.cameraKitLegalPrompt !== null)
            ? CameraKitLegalPrompt.fromPartial(object.cameraKitLegalPrompt)
            : undefined;
        return message;
    },
};
function createBaseServerEventData() {
    return {
        cameraKitException: undefined,
        cameraKitLensSpin: undefined,
        cameraKitAssetDownload: undefined,
        cameraKitLensContentValidationFailed: undefined,
        cameraKitLensDownload: undefined,
        cameraKitAssetValidationFailed: undefined,
        cameraKitSession: undefined,
        cameraKitWebLensSwipe: undefined,
        cameraKitWebBenchmarkComplete: undefined,
        cameraKitLegalPrompt: undefined,
    };
}
var AppType;
(function (AppType) {
    AppType[AppType["IOS_NATIVE"] = 0] = "IOS_NATIVE";
    AppType[AppType["IOS_WEB_DESKTOP"] = 1] = "IOS_WEB_DESKTOP";
    AppType[AppType["IOS_WEB_MOBILE"] = 2] = "IOS_WEB_MOBILE";
    AppType[AppType["ANDROID_NATIVE"] = 3] = "ANDROID_NATIVE";
    AppType[AppType["ANDROID_WEB_DESKTOP"] = 4] = "ANDROID_WEB_DESKTOP";
    AppType[AppType["ANDROID_WEB_MOBILE"] = 5] = "ANDROID_WEB_MOBILE";
    AppType[AppType["OSX_WEB_DESKTOP"] = 6] = "OSX_WEB_DESKTOP";
    AppType[AppType["OSX_WEB_MOBILE"] = 7] = "OSX_WEB_MOBILE";
    AppType[AppType["WINDOWS_WEB_DESKTOP"] = 8] = "WINDOWS_WEB_DESKTOP";
    AppType[AppType["WINDOWS_WEB_MOBILE"] = 9] = "WINDOWS_WEB_MOBILE";
    AppType[AppType["LINUX_WEB_DESKTOP"] = 10] = "LINUX_WEB_DESKTOP";
    AppType[AppType["LINUX_WEB_MOBILE"] = 11] = "LINUX_WEB_MOBILE";
    AppType[AppType["LENSSTUDIO"] = 12] = "LENSSTUDIO";
    AppType[AppType["SNAPCAMERA"] = 13] = "SNAPCAMERA";
    AppType[AppType["WEB_DESKTOP"] = 14] = "WEB_DESKTOP";
    AppType[AppType["WEB_MOBILE"] = 15] = "WEB_MOBILE";
    AppType[AppType["LENSSTUDIO_REMAKE"] = 16] = "LENSSTUDIO_REMAKE";
    AppType[AppType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AppType || (AppType = {}));
var Collection;
(function (Collection) {
    Collection[Collection["COLLECTION_UNUSED"] = 0] = "COLLECTION_UNUSED";
    Collection[Collection["GAE"] = 1] = "GAE";
    Collection[Collection["GCE_M"] = 2] = "GCE_M";
    Collection[Collection["GCE_S"] = 3] = "GCE_S";
    Collection[Collection["GCE_T"] = 4] = "GCE_T";
    Collection[Collection["GKE_M"] = 5] = "GKE_M";
    Collection[Collection["GKE_S"] = 6] = "GKE_S";
    Collection[Collection["GKE_T"] = 7] = "GKE_T";
    Collection[Collection["LOCAL"] = 8] = "LOCAL";
    Collection[Collection["GCE_ST"] = 9] = "GCE_ST";
    Collection[Collection["GKE_ST"] = 10] = "GKE_ST";
    Collection[Collection["GCE_C"] = 11] = "GCE_C";
    Collection[Collection["GCE_SC"] = 12] = "GCE_SC";
    Collection[Collection["GCE_TC"] = 13] = "GCE_TC";
    Collection[Collection["GCE_TSC"] = 14] = "GCE_TSC";
    Collection[Collection["GKE_C"] = 15] = "GKE_C";
    Collection[Collection["GKE_SC"] = 16] = "GKE_SC";
    Collection[Collection["GKE_TC"] = 17] = "GKE_TC";
    Collection[Collection["GKE_TSC"] = 18] = "GKE_TSC";
    Collection[Collection["GKE_W"] = 19] = "GKE_W";
    Collection[Collection["GKE_WT"] = 20] = "GKE_WT";
    Collection[Collection["GKE_WC"] = 21] = "GKE_WC";
    Collection[Collection["GKE_WSC"] = 22] = "GKE_WSC";
    Collection[Collection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Collection || (Collection = {}));
const CameraKitLensSpin = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        if (message.viewTimeSec !== 0) {
            writer.uint32(25).double(message.viewTimeSec);
        }
        if (message.lensGroupId !== "") {
            writer.uint32(34).string(message.lensGroupId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCameraKitLensSpin();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.viewTimeSec = (_b = object.viewTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.lensGroupId = (_c = object.lensGroupId) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCameraKitLensSpin() {
    return { cameraKitEventBase: undefined, lensId: "", viewTimeSec: 0, lensGroupId: "" };
}
const CameraKitWebLensSwipe = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.performanceCluster !== "0") {
            writer.uint32(16).uint64(message.performanceCluster);
        }
        if (message.webglRendererInfo !== "") {
            writer.uint32(26).string(message.webglRendererInfo);
        }
        if (message.lensId !== "") {
            writer.uint32(34).string(message.lensId);
        }
        if (message.lensFrameProcessingTimeMsAvg !== 0) {
            writer.uint32(41).double(message.lensFrameProcessingTimeMsAvg);
        }
        if (message.lensFrameProcessingTimeMsStd !== 0) {
            writer.uint32(49).double(message.lensFrameProcessingTimeMsStd);
        }
        if (message.viewTimeSec !== 0) {
            writer.uint32(57).double(message.viewTimeSec);
        }
        if (message.recordingTimeSec !== 0) {
            writer.uint32(65).double(message.recordingTimeSec);
        }
        if (message.applyDelaySec !== 0) {
            writer.uint32(73).double(message.applyDelaySec);
        }
        if (message.avgFps !== 0) {
            writer.uint32(81).double(message.avgFps);
        }
        if (message.isLensFirstWithinDay !== false) {
            writer.uint32(88).bool(message.isLensFirstWithinDay);
        }
        if (message.isLensFirstWithinMonth !== false) {
            writer.uint32(96).bool(message.isLensFirstWithinMonth);
        }
        if (message.lensGroupId !== "") {
            writer.uint32(106).string(message.lensGroupId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseCameraKitWebLensSwipe();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.performanceCluster = (_a = object.performanceCluster) !== null && _a !== void 0 ? _a : "0";
        message.webglRendererInfo = (_b = object.webglRendererInfo) !== null && _b !== void 0 ? _b : "";
        message.lensId = (_c = object.lensId) !== null && _c !== void 0 ? _c : "";
        message.lensFrameProcessingTimeMsAvg = (_d = object.lensFrameProcessingTimeMsAvg) !== null && _d !== void 0 ? _d : 0;
        message.lensFrameProcessingTimeMsStd = (_e = object.lensFrameProcessingTimeMsStd) !== null && _e !== void 0 ? _e : 0;
        message.viewTimeSec = (_f = object.viewTimeSec) !== null && _f !== void 0 ? _f : 0;
        message.recordingTimeSec = (_g = object.recordingTimeSec) !== null && _g !== void 0 ? _g : 0;
        message.applyDelaySec = (_h = object.applyDelaySec) !== null && _h !== void 0 ? _h : 0;
        message.avgFps = (_j = object.avgFps) !== null && _j !== void 0 ? _j : 0;
        message.isLensFirstWithinDay = (_k = object.isLensFirstWithinDay) !== null && _k !== void 0 ? _k : false;
        message.isLensFirstWithinMonth = (_l = object.isLensFirstWithinMonth) !== null && _l !== void 0 ? _l : false;
        message.lensGroupId = (_m = object.lensGroupId) !== null && _m !== void 0 ? _m : "";
        return message;
    },
};
function createBaseCameraKitWebLensSwipe() {
    return {
        cameraKitEventBase: undefined,
        performanceCluster: "0",
        webglRendererInfo: "",
        lensId: "",
        lensFrameProcessingTimeMsAvg: 0,
        lensFrameProcessingTimeMsStd: 0,
        viewTimeSec: 0,
        recordingTimeSec: 0,
        applyDelaySec: 0,
        avgFps: 0,
        isLensFirstWithinDay: false,
        isLensFirstWithinMonth: false,
        lensGroupId: "",
    };
}
const CameraKitLensDownload = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        if (message.automaticDownload !== false) {
            writer.uint32(24).bool(message.automaticDownload);
        }
        if (message.downloadTimeSec !== 0) {
            writer.uint32(33).double(message.downloadTimeSec);
        }
        if (message.sizeByte !== "0") {
            writer.uint32(40).uint64(message.sizeByte);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitLensDownload();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.automaticDownload = (_b = object.automaticDownload) !== null && _b !== void 0 ? _b : false;
        message.downloadTimeSec = (_c = object.downloadTimeSec) !== null && _c !== void 0 ? _c : 0;
        message.sizeByte = (_d = object.sizeByte) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseCameraKitLensDownload() {
    return { cameraKitEventBase: undefined, lensId: "", automaticDownload: false, downloadTimeSec: 0, sizeByte: "0" };
}
const CameraKitAssetDownload = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.automaticDownload !== false) {
            writer.uint32(24).bool(message.automaticDownload);
        }
        if (message.downloadTimeSec !== 0) {
            writer.uint32(33).double(message.downloadTimeSec);
        }
        if (message.sizeByte !== "0") {
            writer.uint32(40).uint64(message.sizeByte);
        }
        if (message.assetId !== "") {
            writer.uint32(50).string(message.assetId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitAssetDownload();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.automaticDownload = (_a = object.automaticDownload) !== null && _a !== void 0 ? _a : false;
        message.downloadTimeSec = (_b = object.downloadTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.sizeByte = (_c = object.sizeByte) !== null && _c !== void 0 ? _c : "0";
        message.assetId = (_d = object.assetId) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseCameraKitAssetDownload() {
    return { cameraKitEventBase: undefined, automaticDownload: false, downloadTimeSec: 0, sizeByte: "0", assetId: "" };
}
const CameraKitException = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        if (message.reason !== "") {
            writer.uint32(34).string(message.reason);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCameraKitException();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : "";
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCameraKitException() {
    return { cameraKitEventBase: undefined, lensId: "", type: "", reason: "" };
}
const CameraKitSession = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.dailySessionBucket !== 0) {
            writer.uint32(16).int32(message.dailySessionBucket);
        }
        if (message.isFirstWithinMonth !== false) {
            writer.uint32(24).bool(message.isFirstWithinMonth);
        }
        if (message.day !== "0") {
            writer.uint32(32).uint64(message.day);
        }
        if (message.month !== "0") {
            writer.uint32(40).uint64(message.month);
        }
        if (message.year !== "0") {
            writer.uint32(48).uint64(message.year);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCameraKitSession();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.dailySessionBucket = (_a = object.dailySessionBucket) !== null && _a !== void 0 ? _a : 0;
        message.isFirstWithinMonth = (_b = object.isFirstWithinMonth) !== null && _b !== void 0 ? _b : false;
        message.day = (_c = object.day) !== null && _c !== void 0 ? _c : "0";
        message.month = (_d = object.month) !== null && _d !== void 0 ? _d : "0";
        message.year = (_e = object.year) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseCameraKitSession() {
    return {
        cameraKitEventBase: undefined,
        dailySessionBucket: 0,
        isFirstWithinMonth: false,
        day: "0",
        month: "0",
        year: "0",
    };
}
var DailySessionBucket;
(function (DailySessionBucket) {
    DailySessionBucket[DailySessionBucket["NO_SESSION_BUCKET"] = 0] = "NO_SESSION_BUCKET";
    DailySessionBucket[DailySessionBucket["ONE_SESSION"] = 1] = "ONE_SESSION";
    DailySessionBucket[DailySessionBucket["TWO_SESSION"] = 2] = "TWO_SESSION";
    DailySessionBucket[DailySessionBucket["THREE_SESSION"] = 3] = "THREE_SESSION";
    DailySessionBucket[DailySessionBucket["FOUR_SESSION"] = 4] = "FOUR_SESSION";
    DailySessionBucket[DailySessionBucket["FIVE_SESSION"] = 5] = "FIVE_SESSION";
    DailySessionBucket[DailySessionBucket["SIX_SESSION"] = 6] = "SIX_SESSION";
    DailySessionBucket[DailySessionBucket["SEVEN_SESSION"] = 7] = "SEVEN_SESSION";
    DailySessionBucket[DailySessionBucket["EIGHT_SESSION"] = 8] = "EIGHT_SESSION";
    DailySessionBucket[DailySessionBucket["NINE_SESSION"] = 9] = "NINE_SESSION";
    DailySessionBucket[DailySessionBucket["TEN_OR_MORE_SESSION"] = 10] = "TEN_OR_MORE_SESSION";
    DailySessionBucket[DailySessionBucket["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DailySessionBucket || (DailySessionBucket = {}));
const CameraKitLensContentValidationFailed = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCameraKitLensContentValidationFailed();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCameraKitLensContentValidationFailed() {
    return { cameraKitEventBase: undefined, lensId: "" };
}
const CameraKitAssetValidationFailed = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.assetId !== "") {
            writer.uint32(26).string(message.assetId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCameraKitAssetValidationFailed();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.assetId = (_a = object.assetId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCameraKitAssetValidationFailed() {
    return { cameraKitEventBase: undefined, assetId: "" };
}
const CameraKitWebBenchmarkComplete = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.benchmarkName !== "") {
            writer.uint32(18).string(message.benchmarkName);
        }
        if (message.benchmarkValue !== 0) {
            writer.uint32(25).double(message.benchmarkValue);
        }
        if (message.performanceCluster !== "0") {
            writer.uint32(32).uint64(message.performanceCluster);
        }
        if (message.webglRendererInfo !== "") {
            writer.uint32(42).string(message.webglRendererInfo);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitWebBenchmarkComplete();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.benchmarkName = (_a = object.benchmarkName) !== null && _a !== void 0 ? _a : "";
        message.benchmarkValue = (_b = object.benchmarkValue) !== null && _b !== void 0 ? _b : 0;
        message.performanceCluster = (_c = object.performanceCluster) !== null && _c !== void 0 ? _c : "0";
        message.webglRendererInfo = (_d = object.webglRendererInfo) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseCameraKitWebBenchmarkComplete() {
    return {
        cameraKitEventBase: undefined,
        benchmarkName: "",
        benchmarkValue: 0,
        performanceCluster: "0",
        webglRendererInfo: "",
    };
}
const CameraKitLegalPrompt = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.legalPromptId !== "") {
            writer.uint32(18).string(message.legalPromptId);
        }
        if (message.legalPromptResult !== 0) {
            writer.uint32(24).int32(message.legalPromptResult);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCameraKitLegalPrompt();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.legalPromptId = (_a = object.legalPromptId) !== null && _a !== void 0 ? _a : "";
        message.legalPromptResult = (_b = object.legalPromptResult) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseCameraKitLegalPrompt() {
    return { cameraKitEventBase: undefined, legalPromptId: "", legalPromptResult: 0 };
}
const CameraKitEventBase = {
    encode(message, writer = new BinaryWriter()) {
        if (message.kitEventBase !== undefined) {
            KitEventBase.encode(message.kitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.deviceCluster !== "0") {
            writer.uint32(16).uint64(message.deviceCluster);
        }
        if (message.cameraKitVersion !== "") {
            writer.uint32(26).string(message.cameraKitVersion);
        }
        if (message.lensCoreVersion !== "") {
            writer.uint32(34).string(message.lensCoreVersion);
        }
        if (message.deviceModel !== "") {
            writer.uint32(42).string(message.deviceModel);
        }
        if (message.cameraKitVariant !== 0) {
            writer.uint32(48).int32(message.cameraKitVariant);
        }
        if (message.cameraKitFlavor !== 0) {
            writer.uint32(56).int32(message.cameraKitFlavor);
        }
        if (message.appId !== "") {
            writer.uint32(66).string(message.appId);
        }
        if (message.deviceConnectivity !== 0) {
            writer.uint32(72).int32(message.deviceConnectivity);
        }
        if (message.sessionId !== "") {
            writer.uint32(82).string(message.sessionId);
        }
        if (message.appVendorUuid !== "") {
            writer.uint32(90).string(message.appVendorUuid);
        }
        if (message.rankingRequestId !== "") {
            writer.uint32(98).string(message.rankingRequestId);
        }
        if (message.cameraKitEnvironment !== 0) {
            writer.uint32(104).int32(message.cameraKitEnvironment);
        }
        if (message.partnerUuid !== "") {
            writer.uint32(114).string(message.partnerUuid);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseCameraKitEventBase();
        message.kitEventBase = (object.kitEventBase !== undefined && object.kitEventBase !== null)
            ? KitEventBase.fromPartial(object.kitEventBase)
            : undefined;
        message.deviceCluster = (_a = object.deviceCluster) !== null && _a !== void 0 ? _a : "0";
        message.cameraKitVersion = (_b = object.cameraKitVersion) !== null && _b !== void 0 ? _b : "";
        message.lensCoreVersion = (_c = object.lensCoreVersion) !== null && _c !== void 0 ? _c : "";
        message.deviceModel = (_d = object.deviceModel) !== null && _d !== void 0 ? _d : "";
        message.cameraKitVariant = (_e = object.cameraKitVariant) !== null && _e !== void 0 ? _e : 0;
        message.cameraKitFlavor = (_f = object.cameraKitFlavor) !== null && _f !== void 0 ? _f : 0;
        message.appId = (_g = object.appId) !== null && _g !== void 0 ? _g : "";
        message.deviceConnectivity = (_h = object.deviceConnectivity) !== null && _h !== void 0 ? _h : 0;
        message.sessionId = (_j = object.sessionId) !== null && _j !== void 0 ? _j : "";
        message.appVendorUuid = (_k = object.appVendorUuid) !== null && _k !== void 0 ? _k : "";
        message.rankingRequestId = (_l = object.rankingRequestId) !== null && _l !== void 0 ? _l : "";
        message.cameraKitEnvironment = (_m = object.cameraKitEnvironment) !== null && _m !== void 0 ? _m : 0;
        message.partnerUuid = (_o = object.partnerUuid) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function createBaseCameraKitEventBase() {
    return {
        kitEventBase: undefined,
        deviceCluster: "0",
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitVariant: 0,
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        appVendorUuid: "",
        rankingRequestId: "",
        cameraKitEnvironment: 0,
        partnerUuid: "",
    };
}
const KitEventBase = {
    encode(message, writer = new BinaryWriter()) {
        if (message.oauthClientId !== "") {
            writer.uint32(10).string(message.oauthClientId);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        if (message.kitUserAgent !== "") {
            writer.uint32(26).string(message.kitUserAgent);
        }
        if (message.ipAddress !== "") {
            writer.uint32(34).string(message.ipAddress);
        }
        if (message.osMinorVersion !== "") {
            writer.uint32(42).string(message.osMinorVersion);
        }
        if (message.kitVariant !== 0) {
            writer.uint32(48).int32(message.kitVariant);
        }
        if (message.kitVariantVersion !== "") {
            writer.uint32(58).string(message.kitVariantVersion);
        }
        if (message.kitClientTimestampMillis !== "0") {
            writer.uint32(64).uint64(message.kitClientTimestampMillis);
        }
        if (message.clientSequenceId !== "0") {
            writer.uint32(72).uint64(message.clientSequenceId);
        }
        if (message.maxClientSequenceIdOnInstance !== "0") {
            writer.uint32(80).uint64(message.maxClientSequenceIdOnInstance);
        }
        if (message.targetArchitecture !== "") {
            writer.uint32(90).string(message.targetArchitecture);
        }
        if (message.runningWithDebuggerAttached !== false) {
            writer.uint32(96).bool(message.runningWithDebuggerAttached);
        }
        if (message.runningInTests !== false) {
            writer.uint32(104).bool(message.runningInTests);
        }
        if (message.runningInSimulator !== false) {
            writer.uint32(112).bool(message.runningInSimulator);
        }
        if (message.isAppPrerelease !== false) {
            writer.uint32(120).bool(message.isAppPrerelease);
        }
        if (message.kitAppId !== "") {
            writer.uint32(130).string(message.kitAppId);
        }
        if (message.kitSessionId !== "") {
            writer.uint32(138).string(message.kitSessionId);
        }
        if (message.kitPluginType !== 0) {
            writer.uint32(144).int32(message.kitPluginType);
        }
        if (message.isFromReactNativePlugin !== false) {
            writer.uint32(152).bool(message.isFromReactNativePlugin);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = createBaseKitEventBase();
        message.oauthClientId = (_a = object.oauthClientId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.kitUserAgent = (_c = object.kitUserAgent) !== null && _c !== void 0 ? _c : "";
        message.ipAddress = (_d = object.ipAddress) !== null && _d !== void 0 ? _d : "";
        message.osMinorVersion = (_e = object.osMinorVersion) !== null && _e !== void 0 ? _e : "";
        message.kitVariant = (_f = object.kitVariant) !== null && _f !== void 0 ? _f : 0;
        message.kitVariantVersion = (_g = object.kitVariantVersion) !== null && _g !== void 0 ? _g : "";
        message.kitClientTimestampMillis = (_h = object.kitClientTimestampMillis) !== null && _h !== void 0 ? _h : "0";
        message.clientSequenceId = (_j = object.clientSequenceId) !== null && _j !== void 0 ? _j : "0";
        message.maxClientSequenceIdOnInstance = (_k = object.maxClientSequenceIdOnInstance) !== null && _k !== void 0 ? _k : "0";
        message.targetArchitecture = (_l = object.targetArchitecture) !== null && _l !== void 0 ? _l : "";
        message.runningWithDebuggerAttached = (_m = object.runningWithDebuggerAttached) !== null && _m !== void 0 ? _m : false;
        message.runningInTests = (_o = object.runningInTests) !== null && _o !== void 0 ? _o : false;
        message.runningInSimulator = (_p = object.runningInSimulator) !== null && _p !== void 0 ? _p : false;
        message.isAppPrerelease = (_q = object.isAppPrerelease) !== null && _q !== void 0 ? _q : false;
        message.kitAppId = (_r = object.kitAppId) !== null && _r !== void 0 ? _r : "";
        message.kitSessionId = (_s = object.kitSessionId) !== null && _s !== void 0 ? _s : "";
        message.kitPluginType = (_t = object.kitPluginType) !== null && _t !== void 0 ? _t : 0;
        message.isFromReactNativePlugin = (_u = object.isFromReactNativePlugin) !== null && _u !== void 0 ? _u : false;
        return message;
    },
};
function createBaseKitEventBase() {
    return {
        oauthClientId: "",
        locale: "",
        kitUserAgent: "",
        ipAddress: "",
        osMinorVersion: "",
        kitVariant: 0,
        kitVariantVersion: "",
        kitClientTimestampMillis: "0",
        clientSequenceId: "0",
        maxClientSequenceIdOnInstance: "0",
        targetArchitecture: "",
        runningWithDebuggerAttached: false,
        runningInTests: false,
        runningInSimulator: false,
        isAppPrerelease: false,
        kitAppId: "",
        kitSessionId: "",
        kitPluginType: 0,
        isFromReactNativePlugin: false,
    };
}
var CameraKitLegalPromptResult;
(function (CameraKitLegalPromptResult) {
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_MISSING"] = 0] = "CAMERA_KIT_LEGAL_PROMPT_MISSING";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_ACCEPTED"] = 1] = "CAMERA_KIT_LEGAL_PROMPT_ACCEPTED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_DISMISSED"] = 2] = "CAMERA_KIT_LEGAL_PROMPT_DISMISSED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitLegalPromptResult || (CameraKitLegalPromptResult = {}));
var cameraKitEvents_CameraKitEnvironment;
(function (CameraKitEnvironment) {
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_UNKNOWN"] = 0] = "CAMERA_KIT_ENVIRONMENT_UNKNOWN";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_STAGING"] = 1] = "CAMERA_KIT_ENVIRONMENT_STAGING";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_PRODUCTION"] = 2] = "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
    CameraKitEnvironment[CameraKitEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(cameraKitEvents_CameraKitEnvironment || (cameraKitEvents_CameraKitEnvironment = {}));
var cameraKitEvents_CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(cameraKitEvents_CameraKitConnectivityType || (cameraKitEvents_CameraKitConnectivityType = {}));
var cameraKitEvents_CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNKNOWN"] = 0] = "CAMERA_KIT_FLAVOR_UNKNOWN";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(cameraKitEvents_CameraKitFlavor || (cameraKitEvents_CameraKitFlavor = {}));
var CameraKitVariant;
(function (CameraKitVariant) {
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_UNKNOWN"] = 0] = "CAMERA_KIT_VARIANT_UNKNOWN";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PARTNER"] = 1] = "CAMERA_KIT_VARIANT_PARTNER";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PUBLIC"] = 2] = "CAMERA_KIT_VARIANT_PUBLIC";
    CameraKitVariant[CameraKitVariant["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitVariant || (CameraKitVariant = {}));
var KitPluginType;
(function (KitPluginType) {
    KitPluginType[KitPluginType["NO_PLUGIN"] = 0] = "NO_PLUGIN";
    KitPluginType[KitPluginType["UNITY"] = 1] = "UNITY";
    KitPluginType[KitPluginType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KitPluginType || (KitPluginType = {}));
var KitType;
(function (KitType) {
    KitType[KitType["UNKNOWN_KIT_TYPE"] = 0] = "UNKNOWN_KIT_TYPE";
    KitType[KitType["BITMOJI_KIT"] = 1] = "BITMOJI_KIT";
    KitType[KitType["CREATIVE_KIT"] = 2] = "CREATIVE_KIT";
    KitType[KitType["LOGIN_KIT"] = 3] = "LOGIN_KIT";
    KitType[KitType["STORY_KIT"] = 4] = "STORY_KIT";
    KitType[KitType["CAMERA_KIT"] = 5] = "CAMERA_KIT";
    KitType[KitType["SHOP_KIT"] = 6] = "SHOP_KIT";
    KitType[KitType["EULA_KIT"] = 7] = "EULA_KIT";
    KitType[KitType["PAYMENTS_KIT"] = 8] = "PAYMENTS_KIT";
    KitType[KitType["INVITE_KIT"] = 9] = "INVITE_KIT";
    KitType[KitType["CAMERA_KIT_WEB"] = 10] = "CAMERA_KIT_WEB";
    KitType[KitType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KitType || (KitType = {}));
//# sourceMappingURL=cameraKitEvents.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/mappingHandler.js

const createMappingHandler = (map, pageVisibility, maxMapConcurrency = Number.POSITIVE_INFINITY) => {
    const buffer = [];
    let mapConcurrency = 0;
    const processRequest = (request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        try {
            mapConcurrency++;
            const mapped = request.map();
            if (mapped instanceof Promise)
                request.next(yield mapped);
            else if (mapped)
                request.next(mapped);
        }
        catch (error) {
            request.reject(error);
        }
        finally {
            mapConcurrency--;
        }
        while (buffer.length > 0 && mapConcurrency < maxMapConcurrency) {
            processRequest(buffer.shift());
        }
    });
    if (pageVisibility) {
        pageVisibility.onPageHidden(() => {
            while (buffer.length > 0)
                processRequest(buffer.shift());
        });
    }
    return (next) => (request, metadata) => {
        return new Promise((resolve, reject) => {
            const mappableRequest = {
                map: () => map(request),
                next: (mappedRequest) => next(mappedRequest, metadata).then(resolve).catch(reject),
                reject,
            };
            if (mapConcurrency < maxMapConcurrency)
                processRequest(mappableRequest);
            else
                buffer.push(mappableRequest);
        });
    };
};
//# sourceMappingURL=mappingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/batchingHandler.js


const createBatchingHandler = ({ batchReduce, isBatchComplete, maxBatchAge, pageVisibility, }) => {
    let batchTimeout;
    let currentBatch = undefined;
    let clearOnHidden = () => { };
    const reducingHandler = createMappingHandler((request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        currentBatch = yield batchReduce(currentBatch, request);
        return currentBatch;
    }), pageVisibility, 1);
    const batchAndSend = (next, request, metadata) => {
        const batch = request ? batchReduce(currentBatch, request) : currentBatch;
        if (!batch)
            return;
        const complete = batch instanceof Promise
            ? batch.then((b) => next(b, metadata)).catch(() => { })
            : next(batch, metadata).catch(() => { });
        currentBatch = undefined;
        clearTimeout(batchTimeout);
        clearOnHidden();
        return complete;
    };
    return (next) => (request, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (pageVisibility && pageVisibility.isDuringVisibilityTransition("hidden")) {
            yield batchAndSend(next, request, metadata);
            return;
        }
        if (currentBatch === undefined) {
            const sendBatch = () => batchAndSend(next, undefined, metadata);
            if (maxBatchAge !== undefined)
                batchTimeout = setTimeout(sendBatch, maxBatchAge);
            if (pageVisibility)
                clearOnHidden = pageVisibility.onPageHidden(sendBatch);
        }
        const handle = reducingHandler(() => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            if (!currentBatch)
                return;
            if (!isBatchComplete(currentBatch))
                return;
            yield batchAndSend(next, undefined, metadata);
        }));
        return handle(request, metadata);
    });
};
//# sourceMappingURL=batchingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/rateLimitingHandler.js


const delay = (duration) => new Promise((resolve) => setTimeout(resolve, duration));
const createRateLimitingHandler = (duration, pageVisibility) => {
    let mostRecentSendTime = undefined;
    const mappingHandler = createMappingHandler((request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (mostRecentSendTime !== undefined) {
            const millisUntilNextSend = duration - (Date.now() - mostRecentSendTime);
            if (millisUntilNextSend > 0)
                yield delay(millisUntilNextSend);
        }
        mostRecentSendTime = Date.now();
        return request;
    }), pageVisibility, 1);
    return (next) => (request, metadata) => {
        if (pageVisibility && pageVisibility.isDuringVisibilityTransition("hidden"))
            return next(request, metadata);
        return mappingHandler(next)(request, metadata);
    };
};
//# sourceMappingURL=rateLimitingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/operational/Count.js

function isCountMetric(value) {
    var _a;
    return ((_a = value.metric) === null || _a === void 0 ? void 0 : _a.$case) === "count";
}
class Count extends Metric {
    static count(name, n, dimensions = {}) {
        const count = new Count(name, dimensions);
        count.increment(n);
        return count;
    }
    constructor(name, dimensions = {}) {
        super(name, dimensions);
        this.name = name;
        this.count = 0;
    }
    increment(count) {
        this.count += count;
        return this.count;
    }
    toOperationalMetric() {
        return [
            {
                name: `${this.name}${serializeMetricDimensions(this.dimensions)}`,
                timestamp: new Date(),
                metric: { $case: "count", count: `${Math.ceil(this.count)}` },
            },
        ];
    }
}
//# sourceMappingURL=Count.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/clients/metricsClient.js













const METRIC_REQUEST_RATE_LIMIT_MS = 1000;
const BUSINESS_EVENT_BATCH_MAX_SIZE = 10;
const BUSINESS_EVENT_BATCH_MAX_AGE_MS = 5000;
const METRIC_BATCH_MAX_SIZE = 100;
const METRIC_BATCH_MAX_AGE_MS = 5000;
class MetricsClient {
    constructor(grpcClient, pageVisibility) {
        this.grpcClient = grpcClient;
        const rateLimitingHandler = createRateLimitingHandler(METRIC_REQUEST_RATE_LIMIT_MS, pageVisibility);
        this.businessEventsHandler = new HandlerChainBuilder((request) => tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.grpcClient.setBusinessEvents(request);
        }))
            .map(rateLimitingHandler)
            .map(createMappingHandler((serverEvents) => {
            const batch = ServerEventBatch.fromPartial({ serverEvents });
            const request = {
                batchEvents: {
                    typeUrl: "com.snapchat.analytics.blizzard.ServerEventBatch",
                    value: ServerEventBatch.encode(batch).finish(),
                },
            };
            return request;
        }, pageVisibility))
            .map(createBatchingHandler({
            batchReduce: (previous, event) => {
                const batch = previous !== null && previous !== void 0 ? previous : [];
                batch.push(event);
                return batch;
            },
            isBatchComplete: (batch) => batch.length >= BUSINESS_EVENT_BATCH_MAX_SIZE,
            maxBatchAge: BUSINESS_EVENT_BATCH_MAX_AGE_MS,
            pageVisibility,
        })).handler;
        this.operationalMetricsHandler = new HandlerChainBuilder((metrics) => tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.grpcClient.setOperationalMetrics({ metrics });
        }))
            .map(rateLimitingHandler)
            .map(createBatchingHandler({
            batchReduce: (previous, metric) => {
                var _a;
                const batch = { metrics: (_a = previous === null || previous === void 0 ? void 0 : previous.metrics) !== null && _a !== void 0 ? _a : [] };
                if (isCountMetric(metric)) {
                    const priorCount = batch.metrics.find((m) => {
                        return isCountMetric(m) && m.name === metric.name;
                    });
                    if (priorCount && isCountMetric(priorCount)) {
                        priorCount.metric.count = `${Number(priorCount.metric.count) + Number(metric.metric.count)}`;
                        return batch;
                    }
                }
                batch.metrics.push(metric);
                return batch;
            },
            isBatchComplete: (bundle) => bundle.metrics.length >= METRIC_BATCH_MAX_SIZE,
            maxBatchAge: METRIC_BATCH_MAX_AGE_MS,
            pageVisibility,
        })).handler;
    }
    setBusinessEvents(event) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.businessEventsHandler(event);
        });
    }
    setOperationalMetrics(metric) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield Promise.all(metric.toOperationalMetric().map((metric) => {
                return this.operationalMetricsHandler(metric);
            }));
        });
    }
}
const validExternalMetrics = /^push2web_/;
const externalMetricsSubjectFactory = Injectable("externalMetricsSubject", () => new Subject());
const metricsClientFactory = Injectable("metricsClient", [externalMetricsSubjectFactory.token, grpcHandlerFactory.token, pageVisibilityFactory.token], (externalMetricsSubjectFactory, grpcHandler, pageVisibility) => {
    const metrics = new MetricsClient(createTsProtoClient(MetricsDefinition, grpcHandler), pageVisibility);
    externalMetricsSubjectFactory.pipe(filter((metric) => validExternalMetrics.test(metric.name))).subscribe({
        next: (metric) => {
            metrics.setOperationalMetrics(metric);
        },
    });
    return metrics;
});
//# sourceMappingURL=metricsClient.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/remote-configuration/cofHandler.js



















const COF_REQUEST_TYPE = "cof";
const cofHandler_logger = getLogger("cofHandler");
const cofHandlerFactory = Injectable("cofHandler", [configurationToken, requestStateEventTargetFactory.token, metricsClientFactory.token], (config, requestStateEventTarget, metrics) => {
    const cofCache = new ExpiringPersistence(() => convertDaysToSeconds(365), new IndexedDBPersistence({ databaseName: "COFCache" }));
    const getCacheKey = (r) => JSON.stringify(r);
    return (new HandlerChainBuilder((request, _a) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var { signal, isSideEffect: _ } = _a, metadata = __rest(_a, ["signal", "isSideEffect"]);
        const rpc = new GrpcWebImpl(`https://${config.apiHostname}`, {});
        const client = new CircumstancesServiceClientImpl(rpc);
        return new Promise((resolve, reject) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            var _b;
            if (signal) {
                signal.addEventListener("abort", () => reject(new Error("COF request aborted by handler chain.")));
            }
            const cachedResponse = yield cofCache.retrieve(getCacheKey(request)).catch((e) => {
                cofHandler_logger.warn("Unable to get COF response from cache.", e);
                return {
                    configResultsEtag: undefined,
                    configResults: [],
                };
            });
            const dimensions = {
                requestType: COF_REQUEST_TYPE,
                delta: `${!!(cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResultsEtag)}`,
            };
            const { requestId } = dispatchRequestStarted(requestStateEventTarget, { dimensions });
            try {
                const response = yield client.targetingQuery(Object.assign(Object.assign({}, request), { configResultsEtag: cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResultsEtag, deltaSync: !!(cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResultsEtag) }), new browser_headers_umd.BrowserHeaders(Object.assign({ authorization: `Bearer ${config.apiToken}`, "x-snap-client-user-agent": getCameraKitUserAgent() }, metadata)));
                delete response.toObject;
                const configResults = unionBy("configId", (_b = cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResults) !== null && _b !== void 0 ? _b : [], response.configResults).filter((config) => !config.delete);
                const status = 200;
                let sizeByte = 0;
                try {
                    sizeByte = new TextEncoder().encode(JSON.stringify(response)).byteLength;
                }
                finally {
                    dispatchRequestCompleted(requestStateEventTarget, {
                        requestId,
                        dimensions,
                        status,
                        sizeByte,
                    });
                }
                resolve(Object.assign(Object.assign({}, response), { configResults }));
            }
            catch (error) {
                dispatchRequestErrored(requestStateEventTarget, {
                    requestId,
                    dimensions,
                    error: errorHelpers_ensureError(error),
                });
                reject(error);
            }
        }));
    }))
        .map(createRetryingHandler({ retryPredicate: (r) => r instanceof Error }))
        .map(createTimeoutHandler({ timeout: 20 * 1000 }))
        .map(createResponseCachingHandler(cofCache, getCacheKey, staleWhileRevalidateStrategy({
        onMiss: () => {
            metrics.setOperationalMetrics(Count.count("cache_miss", 1, { request_type: COF_REQUEST_TYPE }));
        },
    }))).handler);
});
//# sourceMappingURL=cofHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/remote-configuration/remoteConfiguration.js








const defaultTargetingRequest = {
    namespaces: [Namespace.LENS_CORE, Namespace.CAMERA_KIT_CORE, Namespace.LENS_CORE_CONFIG],
};
class RemoteConfiguration {
    constructor(lensPerformance, cofHandler, grpcClient) {
        const lensCluster = Promise.resolve(lensPerformance).then((lensPerformance) => {
            return (lensPerformance === null || lensPerformance === void 0 ? void 0 : lensPerformance.cluster) === 0 ? undefined : lensPerformance === null || lensPerformance === void 0 ? void 0 : lensPerformance.cluster;
        });
        this.configById = from_from(lensCluster).pipe(mergeMap((lensClusterOrig4) => from_from(cofHandler(Object.assign(Object.assign({}, defaultTargetingRequest), { lensClusterOrig4 })))), map((result) => {
            const configById = new Map();
            result.configResults.forEach((config) => {
                var _a;
                const configsWithId = (_a = configById.get(config.configId)) !== null && _a !== void 0 ? _a : [];
                configsWithId.push(config);
                configById.set(config.configId, configsWithId);
            });
            return configById;
        }), shareReplay(1));
        this.initializationConfig = from_from(grpcClient.getInitializationConfig({})).pipe(map((result) => {
            if (result.ok) {
                const response = result.unwrap();
                if (response.message)
                    return response.message;
                else
                    throw new Error("Failed to load initialization config. gRPC response successful, but " +
                        `message was null. gRPC status: ${response.statusMessage}`);
            }
            throw new Error(`Failed to load initialization config. gRPC status message: ${result.unwrapErr().statusMessage}`);
        }), shareReplay(1));
    }
    get(configId) {
        return this.configById.pipe(map((config) => { var _a; return (_a = config.get(configId)) !== null && _a !== void 0 ? _a : []; }));
    }
    getInitializationConfig() {
        return this.initializationConfig;
    }
    getNamespace(namespace) {
        return this.configById.pipe(map((configs) => {
            const namespaceConfigs = Array.from(configs.values())
                .filter((values) => values.some((c) => c.namespace === namespace))
                .flatMap((results) => results);
            return namespaceConfigs;
        }));
    }
}
const remoteConfigurationFactory = Injectable("remoteConfiguration", [configurationToken, cofHandlerFactory.token, grpcHandlerFactory.token], (config, cofHandler, grpcHandler) => {
    const remoteConfig = new RemoteConfiguration(config.lensPerformance, cofHandler, createTsProtoClient(MetricsDefinition, grpcHandler));
    remoteConfig.get("").pipe(take(1)).subscribe();
    return remoteConfig;
});
//# sourceMappingURL=remoteConfiguration.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/assets/deviceDependentAssetLoader.js









const hasStringValue = (value) => {
    return typeguards_isRecord(value) && typeguards_isString(value.stringValue);
};
const isAssetConfig = (value) => {
    return typeguards_isRecord(value) && typeguards_isString(value.url) && (value.checksum === undefined || typeguards_isString(value.checksum));
};
const deviceDependentAssetLoaderFactory = Injectable("deviceDependentAssetLoader", [defaultFetchHandlerFactory.token, remoteConfigurationFactory.token], (fetchHandler, remoteConfiguration) => {
    const assetHandler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return function deviceDependentAssetLoader({ assetDescriptor: { assetId }, lowPriority, }) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const loadingFailed = (reason, cause) => new Error(`Cannot load device-dependent asset ${assetId}. ${reason}`, { cause });
            return firstValueFrom(remoteConfiguration.get(assetId).pipe(catchError((error) => {
                throw loadingFailed("COF config failed to load.", error);
            }), map((configs) => {
                if (configs.length === 0) {
                    throw loadingFailed(`No COF config found corresponding to that assetId.`);
                }
                const [{ value }] = configs;
                if (!hasStringValue(value))
                    throw loadingFailed("COF config malformed (missing stringValue)");
                let assetConfig;
                try {
                    assetConfig = JSON.parse(value.stringValue);
                }
                catch (parseError) {
                    throw loadingFailed("COF config malformed (JSON parse error)", parseError);
                }
                if (!isAssetConfig(assetConfig))
                    throw loadingFailed("COF config malformed (missing URL)");
                return assetConfig;
            }), mergeMap(({ url, checksum }) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                const [data, response] = yield assetHandler(url, withRequestPriority({ cache: "force-cache" }, lowPriority));
                if (!response.ok)
                    throw response;
                return { data, checksum };
            }))));
        });
    };
});
//# sourceMappingURL=deviceDependentAssetLoader.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/assets/staticAssetLoader.js






const staticAssetLoaderFactory = Injectable("staticAssetLoader", [defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return ({ assetDescriptor: { assetId }, assetManifest, lowPriority }) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const assetUrl = (_a = assetManifest === null || assetManifest === void 0 ? void 0 : assetManifest.find((manifest) => manifest.id === assetId)) === null || _a === void 0 ? void 0 : _a.assetUrl;
        if (!assetUrl) {
            throw new Error(`Cannot load lens asset ${assetId}. Static asset URL could not be found.`);
        }
        const [buffer, response] = yield handler(assetUrl, withRequestPriority({ cache: "force-cache" }, lowPriority));
        if (!response.ok)
            throw response;
        return buffer;
    });
});
//# sourceMappingURL=staticAssetLoader.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-core-module/lensCoreError.js

const lensCoreErrorValue = {
    LensDeserialization: 0,
    Validation: 1,
    Uncategorized: 2,
    LensExecution: 3,
    Abort: 4,
    Uninitialized: 5,
};
const lensCoreErrorName = Object.fromEntries(Object.entries(lensCoreErrorValue).map((entry) => [entry[1], entry[0]]));
function wrapLensCoreError(unknownError, isFrameError) {
    var _a, _b, _c, _d, _e;
    const lcError = errorHelpers_ensureError(unknownError);
    const error = new Error(lcError.message.split("\n")[0], {
        cause: lcError.otherExceptions || ((_a = lcError.cause) === null || _a === void 0 ? void 0 : _a.metadata)
            ? {
                otherExceptions: lcError.otherExceptions,
                metadata: (_b = lcError.cause) === null || _b === void 0 ? void 0 : _b.metadata,
            }
            : undefined,
    });
    const lcErrorType = (_d = (_c = lcError.cause) === null || _c === void 0 ? void 0 : _c.type) === null || _d === void 0 ? void 0 : _d.value;
    const name = `LensCore${(_e = lensCoreErrorName[lcErrorType]) !== null && _e !== void 0 ? _e : "Unknown"}Error`;
    error.name = name;
    error.isFrameError = isFrameError;
    if (lcError.stack) {
        const [_, ...stackLines] = lcError.stack.split("\n");
        if (error.stack) {
            stackLines.unshift(error.stack.split("\n")[0]);
        }
        error.stack = stackLines.join("\n");
    }
    return error;
}
//# sourceMappingURL=lensCoreError.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-core-module/lensCore.js


const promisifiableMethods = {
    addLens: null,
    clearAllLenses: null,
    imageToYuvBuffer: null,
    pauseCanvas: null,
    processAudioSampleBuffer: null,
    processFrame: null,
    removeLens: null,
    replaceLenses: null,
    setAudioParameters: null,
    setDeviceClass: null,
    setFPSLimit: null,
    setInputTransform: null,
    setOnFrameProcessedCallback: null,
    setRenderLoopMode: null,
    setRenderSize: null,
    teardown: null,
    useMediaElement: null,
    yuvBufferToBitmap: null,
};
function createErrorWrapper(isForFrameErrors, errors) {
    return (fn) => {
        return (nativeError) => {
            const error = wrapLensCoreError(nativeError, isForFrameErrors);
            fn(error);
            errors.next(error);
        };
    };
}
function withTryCatch(fn, errors) {
    return function (...args) {
        try {
            return fn.apply(this, args);
        }
        catch (e) {
            const error = wrapLensCoreError(e, false);
            errors.next(error);
            throw error;
        }
    };
}
const errorsFieldName = "errors";
const createLensCore = (lensCoreModule) => {
    const errors = new Subject();
    const errorsObservable = errors.asObservable();
    const getRegularErrorWrapper = createErrorWrapper(false, errors);
    const getFrameErrorWrapper = createErrorWrapper(true, errors);
    const customMethods = {
        initialize(input) {
            return new Promise((onSuccess, onFailure) => {
                var _a;
                return lensCoreModule.initialize(Object.assign(Object.assign({}, input), { exceptionHandler: getFrameErrorWrapper((_a = input.exceptionHandler) !== null && _a !== void 0 ? _a : (() => { })), onSuccess, onFailure: getRegularErrorWrapper(onFailure) }));
            });
        },
        provideRemoteAssetsResponse(input) {
            var _a;
            return lensCoreModule.provideRemoteAssetsResponse(Object.assign(Object.assign({}, input), { onFailure: getRegularErrorWrapper((_a = input.onFailure) !== null && _a !== void 0 ? _a : (() => { })) }));
        },
        playCanvas(input) {
            return new Promise((onReady, onFailure) => {
                lensCoreModule.playCanvas(Object.assign(Object.assign({}, input), { onReady, onFailure: getRegularErrorWrapper(onFailure) }));
            });
        },
    };
    return new Proxy(lensCoreModule, {
        get: (target, property, receiver) => {
            if (property === errorsFieldName) {
                return errorsObservable;
            }
            if (property in customMethods) {
                return withTryCatch(customMethods[property], errors);
            }
            const targetProperty = Reflect.get(target, property, receiver);
            if (!targetProperty)
                return targetProperty;
            if (property in promisifiableMethods) {
                return withTryCatch(function (input) {
                    return new Promise((onSuccess, onFailure) => targetProperty(Object.assign(Object.assign({}, input), { onSuccess, onFailure: getRegularErrorWrapper(onFailure) })));
                }, errors);
            }
            if (typeof targetProperty === "function") {
                if ("values" in targetProperty) {
                    return targetProperty;
                }
                else {
                    return withTryCatch(targetProperty, errors);
                }
            }
            return targetProperty;
        },
    });
};
//# sourceMappingURL=lensCore.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js


function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return mergeMap(identity_identity, concurrent);
}
//# sourceMappingURL=mergeAll.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isScheduler.js

function isScheduler(value) {
    return value && isFunction(value.schedule);
}
//# sourceMappingURL=isScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/args.js


function last(arr) {
    return arr[arr.length - 1];
}
function args_popResultSelector(args) {
    return isFunction(last(args)) ? args.pop() : undefined;
}
function args_popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
    return typeof last(args) === 'number' ? args.pop() : defaultValue;
}
//# sourceMappingURL=args.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/merge.js





function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(args);
    var concurrent = popNumber(args, Infinity);
    var sources = args;
    return !sources.length
        ?
            EMPTY
        : sources.length === 1
            ?
                innerFrom_innerFrom(sources[0])
            :
                mergeAll(concurrent)(from_from(sources, scheduler));
}
//# sourceMappingURL=merge.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js


var isArray = Array.isArray;
function callOrApply(fn, args) {
    return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs_mapOneOrManyArgs(fn) {
    return map(function (args) { return callOrApply(fn, args); });
}
//# sourceMappingURL=mapOneOrManyArgs.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js







var nodeEventEmitterMethods = ['addListener', 'removeListener'];
var eventTargetMethods = ['addEventListener', 'removeEventListener'];
var jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs_mapOneOrManyArgs(resultSelector));
    }
    var _a = __read(isEventTarget(target)
        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
        :
            isNodeStyleEventEmitter(target)
                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))
                : isJQueryStyleEventEmitter(target)
                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))
                    : [], 2), add = _a[0], remove = _a[1];
    if (!add) {
        if (isArrayLike(target)) {
            return mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(innerFrom_innerFrom(target));
        }
    }
    if (!add) {
        throw new TypeError('Invalid event target');
    }
    return new Observable_Observable(function (subscriber) {
        var handler = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return subscriber.next(1 < args.length ? args : args[0]);
        };
        add(handler);
        return function () { return remove(handler); };
    });
}
function toCommonHandlerRegistry(target, eventName) {
    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
}
function isNodeStyleEventEmitter(target) {
    return isFunction(target.addListener) && isFunction(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
    return isFunction(target.on) && isFunction(target.off);
}
function isEventTarget(target) {
    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
}
//# sourceMappingURL=fromEvent.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/tap.js




function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? operate(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            identity_identity;
}
//# sourceMappingURL=tap.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/loadScript.js

function loadScript(scriptUri) {
    return new Promise((resolve, reject) => {
        const scriptElement = document.createElement("script");
        scriptElement.src = scriptUri;
        scriptElement.async = true;
        merge(fromEvent(scriptElement, "load").pipe(tap(() => resolve(scriptElement))), fromEvent(scriptElement, "error").pipe(tap((e) => reject(e))))
            .pipe(take(1))
            .subscribe();
        document.body.appendChild(scriptElement);
    });
}
//# sourceMappingURL=loadScript.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/handlers/customLensCoreHandler.js

const createCustomLensCoreHandler = () => {
    return (next) => (input, init) => {
        var _a;
        const url = typeguards_isString(input) ? input : (_a = input === null || input === void 0 ? void 0 : input.url) !== null && _a !== void 0 ? _a : "";
        if (url.startsWith("https://lens-core-wasm.sc-corp.net/")) {
            return next(input, Object.assign(Object.assign({}, init), { credentials: "include" }));
        }
        return next(input, init);
    };
};
//# sourceMappingURL=customLensCoreHandler.js.map
;// CONCATENATED MODULE: ./node_modules/wasm-feature-detect/dist/esm/index.js
const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),exceptionsFinal=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob("AGFzbQEAAAABBAFgAAADAgEAChABDgACaR9AAQMAAAsACxoL"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})(),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jsStringBuiltins=()=>(async()=>{try{return await WebAssembly.instantiate(Uint8Array.from(atob("AGFzbQEAAAABBgFgAW8BfwIXAQ53YXNtOmpzLXN0cmluZwR0ZXN0AAA="),(e=>e.codePointAt(0))),{},{builtins:["js-string"]}),!0}catch(e){return!1}})(),jspi=()=>(async()=>"Suspending"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),esm_relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),esm_simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>"compileStreaming"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>"Function"in WebAssembly)(),typedFunctionReferences=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob("AGFzbQEAAAABEANgAX8Bf2ABZAABf2AAAX8DBAMBAAIJBQEDAAEBChwDCwBBCkEqIAAUAGoLBwAgAEEBagsGANIBEAAL"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})();

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/platform/platformCapabilities.js





const minRequiredMaxTextureSize = 1024;
function getWebGlSupport() {
    var _a, _b;
    const ctx = (_a = globalThis.document) === null || _a === void 0 ? void 0 : _a.createElement("canvas").getContext("webgl2");
    if (!ctx) {
        const cause = ((_b = globalThis.document) === null || _b === void 0 ? void 0 : _b.createElement("canvas").getContext("webgl"))
            ? "platform_not_supported_only_webgl1"
            : typeof globalThis.WebGLRenderingContext === "function"
                ? "platform_not_supported_likely_no_hw_accel"
                : "platform_not_supported_no_webgl_browser_support";
        return {
            supported: false,
            error: platformNotSupportedError("CameraKit requires WebGL2, but this browser does not support WebGL2.", new Error(cause)),
        };
    }
    const maxTextureSize = ctx.getParameter(ctx.MAX_TEXTURE_SIZE);
    const supported = maxTextureSize >= minRequiredMaxTextureSize;
    return supported
        ? { supported, maxTextureSize }
        : {
            supported,
            error: platformNotSupportedError(`CameraKit requires WebGL's MAX_TEXTURE_SIZE exceed a minimum value of ` +
                `${minRequiredMaxTextureSize}, but the browser's reported MAX_TEXTURE_SIZE is ${maxTextureSize}.`),
        };
}
function getWebAssemblyCapabilities() {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        if (globalThis.WebAssembly === undefined)
            return {
                supported: false,
                error: platformNotSupportedError("CameraKit requires WebAssembly, but this browser does not support WebAssembly."),
            };
        const [simd, exceptionHandling, relaxedSimd] = yield Promise.all([
            esm_simd().then((simd) => {
                if (getPlatformInfo().browser.brand === "Safari")
                    return false;
                return simd;
            }),
            exceptions(),
            esm_relaxedSimd(),
        ]);
        return {
            supported: true,
            wasmFeatures: {
                simd,
                exceptionHandling,
                relaxedSimd,
            },
        };
    });
}
function getGenericWebXrNotSupported(cause) {
    return {
        supported: false,
        error: platformNotSupportedError(`Use of this feature requires WebXR support for immersive AR sessions, but ` +
            `this browser does not support immersive AR sessions.`, cause),
    };
}
function getWebXrCapabilities() {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        try {
            if (!isSecureContext || !navigator.xr)
                return getGenericWebXrNotSupported();
            const isImmersiveArSupported = yield navigator.xr.isSessionSupported("immersive-ar");
            return isImmersiveArSupported
                ? {
                    supported: true,
                    sixDofSupported: true,
                    sceneDepthSupported: true,
                }
                : getGenericWebXrNotSupported();
        }
        catch (error) {
            if (error instanceof Error && error.name === "SecurityError") {
                return {
                    supported: false,
                    error: platformNotSupportedError("Failed to check XR capabilities due to permissions or other issues.", error),
                };
            }
            return getGenericWebXrNotSupported(error);
        }
    });
}
const getPlatformCapabilities = memoize_memoize(function getPlatformCapabilities() {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        return {
            webgl: getWebGlSupport(),
            wasm: yield getWebAssemblyCapabilities(),
            webxr: yield getWebXrCapabilities(),
        };
    });
});
//# sourceMappingURL=platformCapabilities.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-core-module/loader/bootstrapURLs.js



const wasmAssets = ["LensCoreWebAssembly.js", "LensCoreWebAssembly.wasm"];
function getBuildFlavor({ simd, exceptionHandling, relaxedSimd }, buildNumber) {
    const relaxedBuildAvailable = parseInt(buildNumber) >= Number.MAX_SAFE_INTEGER;
    if (relaxedBuildAvailable && relaxedSimd) {
        return "rel-relaxed-simd-neh";
    }
    else if (simd) {
        if (exceptionHandling) {
            return "rel-simd-neh";
        }
        else {
            return "release-simd";
        }
    }
    else if (exceptionHandling) {
        return "rel-neh";
    }
    else {
        return "release";
    }
}
function getRequiredBootstrapURLs(endpointOverride) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const endpoint = endpointOverride === null || endpointOverride === void 0 ? void 0 : endpointOverride.replace(/[\/]+$/, "");
        const { wasm } = yield getPlatformCapabilities();
        if (!wasm.supported)
            throw wasm.error;
        const { lensCore } = getPlatformInfo();
        const version = lensCore.version;
        const buildNumber = lensCore.buildNumber;
        const flavor = getBuildFlavor(wasm.wasmFeatures, buildNumber);
        return wasmAssets.map((asset) => {
            if (endpoint)
                return `${endpoint}/${asset}`;
            const { origin, pathname, search } = new URL(lensCore.baseUrl);
            return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;
        });
    });
}
//# sourceMappingURL=bootstrapURLs.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-core-module/loader/lensCoreFactory.js












const lensCoreFactory_logger = getLogger("lensCoreFactory");
const findMatch = (regex, strings) => strings.find((s) => regex.test(s));
const LENS_CORE_JS_REQUEST_TYPE = "lens_core_js";
const LENS_CORE_WASM_REQUEST_TYPE = "lens_core_wasm";
const lensCoreFactory = Injectable("lensCore", [defaultFetchHandlerFactory.token, configurationToken, requestStateEventTargetFactory.token], (handler, { lensCoreOverrideUrls, wasmEndpointOverride }, requestStateEventTarget) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let lensCoreJS;
    let lensCoreWASM;
    const customBuild = !!(lensCoreOverrideUrls || wasmEndpointOverride);
    let lensCoreHandlerChainBuilder = new HandlerChainBuilder(handler);
    if (customBuild) {
        lensCoreHandlerChainBuilder = lensCoreHandlerChainBuilder.map(createCustomLensCoreHandler());
    }
    const lensCoreHandler = lensCoreHandlerChainBuilder.map(createRequestStateEmittingHandler(requestStateEventTarget)).handler;
    if (lensCoreOverrideUrls) {
        lensCoreJS = lensCoreOverrideUrls.js;
        lensCoreWASM = lensCoreOverrideUrls.wasm;
    }
    else {
        const endpointOverride = wasmEndpointOverride !== null && wasmEndpointOverride !== void 0 ? wasmEndpointOverride : undefined;
        const assetURLs = yield getRequiredBootstrapURLs(endpointOverride);
        lensCoreJS = (_a = findMatch(/\.js/, assetURLs)) !== null && _a !== void 0 ? _a : "";
        lensCoreWASM = (_b = findMatch(/\.wasm/, assetURLs)) !== null && _b !== void 0 ? _b : "";
        if (!lensCoreJS || !lensCoreWASM) {
            throw new Error(`Cannot fetch required LensCore assets. Either the JS or WASM filename is missing from ` +
                `this list: ${assetURLs}.`);
        }
        const glueScript = yield lensCoreHandler([
            lensCoreJS,
            { requestType: LENS_CORE_JS_REQUEST_TYPE, customBuild: `${customBuild}` },
        ]).then((r) => r.blob());
        lensCoreJS = URL.createObjectURL(glueScript);
    }
    const scriptElement = yield loadScript(lensCoreJS);
    const lensCore = yield new Promise((resolve, reject) => {
        let initialModule;
        const moduleInit = globalThis.createLensesModule((initialModule = {
            mainScriptUrlOrBlob: lensCoreJS,
            instantiateWasm: (importObject, receiveInstance) => {
                WebAssembly.instantiateStreaming(lensCoreHandler([
                    lensCoreWASM,
                    { requestType: LENS_CORE_WASM_REQUEST_TYPE, customBuild: `${customBuild}` },
                ]), importObject)
                    .then(function ({ instance, module }) {
                    receiveInstance(instance, module);
                    initialModule.compiledModule = module;
                    resolve(moduleInit);
                })
                    .catch(reject);
            },
        }));
    });
    scriptElement.remove();
    if (lensCoreWasmVersions.version != `${lensCore.getCoreVersion()}`) {
        lensCoreFactory_logger.warn(`Loaded LensCore version (${lensCore.getCoreVersion()}) differs from expected one (${lensCoreWasmVersions.version})`);
    }
    return createLensCore(lensCore);
}));
//# sourceMappingURL=lensCoreFactory.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/validate.js

const ordinalSuffixMap = {
    1: "st",
    2: "nd",
    3: "rd",
};
function getArgumentInfo(target, methodName, argumentIndex, arg) {
    var _a;
    let argString;
    try {
        argString = JSON.stringify(arg);
    }
    catch (_b) {
        argString = String(arg);
    }
    return {
        argPosition: `${argumentIndex + 1}${(_a = ordinalSuffixMap[argumentIndex + 1]) !== null && _a !== void 0 ? _a : "th"}`,
        methodPath: `${getTypeName(target)}.${String(methodName)}()`,
        argString,
    };
}
function getTypeName(value) {
    if (value === null) {
        return "null";
    }
    const baseType = typeof value;
    if (!["object", "function"].includes(baseType)) {
        return baseType;
    }
    const nonNullValue = value;
    const tag = nonNullValue[Symbol.toStringTag];
    if (typeof tag === "string") {
        return tag;
    }
    if (baseType === "function" && Function.prototype.toString.call(nonNullValue).startsWith("class")) {
        return "class";
    }
    const className = nonNullValue.constructor.name;
    if (typeof className === "string" && className !== "") {
        return className;
    }
    return baseType;
}
function validate_validate(...guards) {
    return function validator(target, context) {
        return function (...args) {
            for (const [index, guard] of guards.entries()) {
                if (!guard(args[index])) {
                    const { argPosition, methodPath, argString } = getArgumentInfo(this, context.name, index, args[index]);
                    throw argumentValidationError(`The ${argPosition} argument to ${methodPath} method has an invalid value: ${argString}.`);
                }
            }
            return target.apply(this, args);
        };
    };
}
//# sourceMappingURL=validate.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/logger/errorLoggingDecorator.js
function errorLoggingDecorator(logger) {
    const handleError = (error) => logger.error(error);
    return function validator(target, _context) {
        return function (...args) {
            try {
                const result = target.apply(this, args);
                if (result instanceof Promise) {
                    result.catch(handleError);
                }
                return result;
            }
            catch (error) {
                handleError(error);
                throw error;
            }
        };
    };
}
//# sourceMappingURL=errorLoggingDecorator.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/assertions.js
function assertUnreachable(_) {
    throw new Error("Reached unreachable code at runtime.");
}
function assert(condition, error = "Assertion failed") {
    if (!condition) {
        if (error instanceof Error) {
            throw error;
        }
        else {
            throw new Error(error);
        }
    }
}
//# sourceMappingURL=assertions.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/Lens.js




function isLensArray(value) {
    return isArrayOfType(isLens, value);
}
function isLens(value) {
    return (typeguards_isRecord(value) &&
        typeguards_isString(value.id) &&
        typeguards_isString(value.name) &&
        (isUndefined(value.iconUrl) || typeguards_isString(value.iconUrl)) &&
        typeguards_isRecord(value.vendorData) &&
        typeguards_predicateRecordValues(typeguards_isString)(value.vendorData) &&
        isNumber(value.cameraFacingPreference) &&
        (isUndefined(value.preview) || isPreview(value.preview)) &&
        (isUndefined(value.lensCreator) || isLensCreator(value.lensCreator)) &&
        (isUndefined(value.snapcode) || isSnapcode(value.snapcode)) &&
        isAnyArray(value.featureMetadata));
}
function isLensProto(value) {
    return (isRecord(value) &&
        isString(value.id) &&
        isString(value.name) &&
        isRecord(value.vendorData) &&
        predicateRecordValues(isString)(value.vendorData) &&
        (typeof value.content === "undefined" || isLensContent(value.content)));
}
function isPreview(value) {
    return typeguards_isRecord(value) && typeguards_isString(value.imageUrl);
}
function isLensCreator(value) {
    return typeguards_isRecord(value) && typeguards_isString(value.displayName);
}
function isSnapcode(value) {
    return typeguards_isRecord(value) && typeguards_isString(value.imageUrl) && typeguards_isString(value.deepLink);
}
function isLensContent(value) {
    return (isRecord(value) &&
        isString(value.iconUrlBolt) &&
        isString(value.lnsSha256) &&
        isString(value.lnsUrlBolt) &&
        isRecord(value.preview) &&
        isString(value.preview.imageUrl));
}
function isGetGroupResponse(value) {
    return isRecord(value) && isString(value.id) && Array.isArray(value.lenses) && value.lenses.every(isLensProto);
}
function isAny(value) {
    return typeguards_isRecord(value) && typeguards_isString(value.typeUrl) && isTypedArray(value.value);
}
function isAnyArray(value) {
    return isArrayOfType(isAny, value);
}
function toPublicLens({ id, groupId, name, content, vendorData, cameraFacingPreference, lensCreator, scannable, featureMetadata, }) {
    var _a;
    assert(isEmptyOrSafeUrl(content === null || content === void 0 ? void 0 : content.iconUrlBolt), "Unsafe icon URL");
    assert(isEmptyOrSafeUrl((_a = content === null || content === void 0 ? void 0 : content.preview) === null || _a === void 0 ? void 0 : _a.imageUrl), "Unsafe preview URL");
    return {
        id,
        groupId,
        name,
        iconUrl: content === null || content === void 0 ? void 0 : content.iconUrlBolt,
        preview: (content === null || content === void 0 ? void 0 : content.preview) ? { imageUrl: content.preview.imageUrl } : undefined,
        vendorData,
        cameraFacingPreference,
        lensCreator,
        snapcode: scannable
            ? { imageUrl: scannable.snapcodeImageUrl, deepLink: scannable.snapcodeDeeplink }
            : undefined,
        featureMetadata,
    };
}
//# sourceMappingURL=Lens.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/metricsEventTarget.js


const metricsEventTargetFactory = Injectable("metricsEventTarget", () => new TypedEventTarget());
//# sourceMappingURL=metricsEventTarget.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/assets/LensAssetRepository.js












const LensAssetRepository_logger = getLogger("LensAssetRepository");
function getCacheKey(asset) {
    return `${asset.assetId}_${asset.assetType.value}`;
}
function mapManfiestItemToAssetType(lensCore, type) {
    switch (type) {
        case LensAssetManifestItem_Type.ASSET:
            return lensCore.AssetType.Static;
        case LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
        case LensAssetManifestItem_Type.UNRECOGNIZED:
            return lensCore.AssetType.DeviceDependent;
        default:
            return assertUnreachable(type);
    }
}
class LensAssetRepository {
    constructor(lensCore, assetLoaders, metrics, requestStateEventTarget) {
        this.lensCore = lensCore;
        this.assetLoaders = assetLoaders;
        this.metrics = metrics;
        this.requestStateEventTarget = requestStateEventTarget;
        this.cachedAssetKeys = new Set();
    }
    cacheAssets(assetManifest, lens, assetTimings = [LensAssetManifestItem_RequestTiming.REQUIRED], lowPriority = false) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const assetTimingsToPreload = new Set([
                LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
                ...assetTimings,
            ]);
            const assetDescriptors = assetManifest
                .filter((asset) => {
                return assetTimingsToPreload.has(asset.requestTiming);
            })
                .map(({ id, type }) => ({
                assetId: id,
                assetType: mapManfiestItemToAssetType(this.lensCore, type),
            }));
            if (assetDescriptors.length) {
                return this.cacheAssetsByDescriptor(assetDescriptors, lens, assetManifest, lowPriority);
            }
        });
    }
    loadAsset(request) {
        var _a, _b;
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { assetDescriptor: { assetId, assetType }, lens, } = request;
            const [assetTypeName, assetLoader] = (_a = this.assetLoaders.get(assetType)) !== null && _a !== void 0 ? _a : [];
            const safeAssetTypeName = assetTypeName !== null && assetTypeName !== void 0 ? assetTypeName : "unknown";
            const dimensions = {
                requestType: "asset",
                assetId: assetId,
                assetType: safeAssetTypeName,
                lensId: (_b = lens === null || lens === void 0 ? void 0 : lens.id) !== null && _b !== void 0 ? _b : "unknown",
            };
            const { requestId } = dispatchRequestStarted(this.requestStateEventTarget, { dimensions });
            try {
                if (!assetLoader) {
                    throw new Error(`Cannot get asset ${assetId}. Asset type ${safeAssetTypeName} is not supported.`);
                }
                const assetResponse = yield assetLoader(request);
                const assetBuffer = "data" in assetResponse ? assetResponse.data : assetResponse;
                const assetChecksum = "checksum" in assetResponse ? assetResponse.checksum : undefined;
                if (assetBuffer.byteLength === 0) {
                    throw new Error(`Got empty response for asset ${assetId} from ${safeAssetTypeName} loader.`);
                }
                dispatchRequestCompleted(this.requestStateEventTarget, {
                    requestId,
                    dimensions,
                    status: 200,
                    sizeByte: assetBuffer.byteLength,
                });
                this.lensCore.provideRemoteAssetsResponse({
                    assetId,
                    assetBuffer,
                    assetType,
                    assetChecksum,
                    onFailure: (lensCoreError) => {
                        if (/validation failed/.test(lensCoreError.message)) {
                            this.metrics.dispatchEvent(new TypedCustomEvent("assetValidationFailed", {
                                name: "assetValidationFailed",
                                assetId,
                            }));
                        }
                        LensAssetRepository_logger.warn(`Failed to provide lens asset ${assetId}.`, lensCoreError);
                    },
                });
            }
            catch (error) {
                const wrappedError = new Error(`Failed to load lens asset ${assetId}.`, { cause: error });
                dispatchRequestErrored(this.requestStateEventTarget, { requestId, dimensions, error: wrappedError });
                throw wrappedError;
            }
        });
    }
    cacheAssetsByDescriptor(assetDescriptors, lens, assetManifest, lowPriority) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield Promise.all(assetDescriptors
                .filter((assetDescriptors) => !this.cachedAssetKeys.has(getCacheKey(assetDescriptors)))
                .map((assetDescriptor) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    yield this.loadAsset({ assetDescriptor, lens, assetManifest, lowPriority });
                    this.cachedAssetKeys.add(getCacheKey(assetDescriptor));
                }
                catch (error) {
                    const { assetId, assetType } = assetDescriptor;
                    const [assetTypeName] = (_a = this.assetLoaders.get(assetType)) !== null && _a !== void 0 ? _a : [];
                    LensAssetRepository_logger.warn(`Failed to cache asset ${assetId} of type ${assetTypeName !== null && assetTypeName !== void 0 ? assetTypeName : assetType.value}.`, error);
                }
            })));
        });
    }
}
const lensAssetRepositoryFactory = Injectable("lensAssetRepository", [
    lensCoreFactory.token,
    deviceDependentAssetLoaderFactory.token,
    remoteMediaAssetLoaderFactory.token,
    staticAssetLoaderFactory.token,
    metricsEventTargetFactory.token,
    requestStateEventTargetFactory.token,
], (lensCore, deviceDependentAssetLoader, remoteMediaAssetLoader, staticAssetLoader, metrics, requestStateEventTarget) => new LensAssetRepository(lensCore, new Map([
    [lensCore.AssetType.DeviceDependent, ["DeviceDependent", deviceDependentAssetLoader]],
    [lensCore.AssetType.RemoteMediaByUrl, ["RemoteMediaByUrl", remoteMediaAssetLoader]],
    [lensCore.AssetType.URL, ["URL", remoteMediaAssetLoader]],
    [lensCore.AssetType.Static, ["Static", staticAssetLoader]],
]), metrics, requestStateEventTarget));
//# sourceMappingURL=LensAssetRepository.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/export.js


const export_protobufPackage = "com.snap.camerakit.v3";
var ExportLensesByIdRequest_Context_Extension_Name;
(function (ExportLensesByIdRequest_Context_Extension_Name) {
    ExportLensesByIdRequest_Context_Extension_Name["UNSET"] = "UNSET";
    ExportLensesByIdRequest_Context_Extension_Name["SHOP_KIT"] = "SHOP_KIT";
    ExportLensesByIdRequest_Context_Extension_Name["LENS_WEB_BUILDER"] = "LENS_WEB_BUILDER";
    ExportLensesByIdRequest_Context_Extension_Name["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdRequest_Context_Extension_Name || (ExportLensesByIdRequest_Context_Extension_Name = {}));
function exportLensesByIdRequest_Context_Extension_NameFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        case 1:
        case "SHOP_KIT":
            return ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT;
        case 2:
        case "LENS_WEB_BUILDER":
            return ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED;
    }
}
function exportLensesByIdRequest_Context_Extension_NameToNumber(object) {
    switch (object) {
        case ExportLensesByIdRequest_Context_Extension_Name.UNSET:
            return 0;
        case ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT:
            return 1;
        case ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER:
            return 2;
        case ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED:
        default:
            return -1;
    }
}
var ExportLensesByIdResponse_ExcludedLens_Code;
(function (ExportLensesByIdResponse_ExcludedLens_Code) {
    ExportLensesByIdResponse_ExcludedLens_Code["UNSET"] = "UNSET";
    ExportLensesByIdResponse_ExcludedLens_Code["UNKNOWN"] = "UNKNOWN";
    ExportLensesByIdResponse_ExcludedLens_Code["NOT_FOUND"] = "NOT_FOUND";
    ExportLensesByIdResponse_ExcludedLens_Code["INCOMPATIBLE_LENS_CORE_VERSION"] = "INCOMPATIBLE_LENS_CORE_VERSION";
    ExportLensesByIdResponse_ExcludedLens_Code["ARCHIVED_OR_INVISIBLE"] = "ARCHIVED_OR_INVISIBLE";
    ExportLensesByIdResponse_ExcludedLens_Code["CONTAINS_MUSIC"] = "CONTAINS_MUSIC";
    ExportLensesByIdResponse_ExcludedLens_Code["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdResponse_ExcludedLens_Code || (ExportLensesByIdResponse_ExcludedLens_Code = {}));
function exportLensesByIdResponse_ExcludedLens_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        case 1:
        case "UNKNOWN":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN;
        case 2:
        case "NOT_FOUND":
            return ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND;
        case 3:
        case "INCOMPATIBLE_LENS_CORE_VERSION":
            return ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION;
        case 4:
        case "ARCHIVED_OR_INVISIBLE":
            return ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE;
        case 5:
        case "CONTAINS_MUSIC":
            return ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED;
    }
}
function exportLensesByIdResponse_ExcludedLens_CodeToNumber(object) {
    switch (object) {
        case ExportLensesByIdResponse_ExcludedLens_Code.UNSET:
            return 0;
        case ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN:
            return 1;
        case ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND:
            return 2;
        case ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION:
            return 3;
        case ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE:
            return 4;
        case ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC:
            return 5;
        case ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseExportLensesByIdRequest() {
    return { unlockableIds: [], context: undefined };
}
const ExportLensesByIdRequest = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.unlockableIds) {
            writer.int64(v);
        }
        writer.join();
        if (message.context !== undefined) {
            ExportLensesByIdRequest_Context.encode(message.context, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.unlockableIds.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.unlockableIds.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.context = ExportLensesByIdRequest_Context.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExportLensesByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExportLensesByIdRequest();
        message.unlockableIds = ((_a = object.unlockableIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.context = (object.context !== undefined && object.context !== null)
            ? ExportLensesByIdRequest_Context.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context() {
    return {
        userAgent: "",
        locale: "",
        extention: undefined,
        extension: undefined,
        extensionRequestContext: new Uint8Array(0),
    };
}
const ExportLensesByIdRequest_Context = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userAgent !== "") {
            writer.uint32(10).string(message.userAgent);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        if (message.extention !== undefined) {
            ExportLensesByIdRequest_Context_Extension.encode(message.extention, writer.uint32(26).fork()).join();
        }
        if (message.extension !== undefined) {
            ExportLensesByIdRequest_Context_Extension.encode(message.extension, writer.uint32(34).fork()).join();
        }
        if (message.extensionRequestContext.length !== 0) {
            writer.uint32(42).bytes(message.extensionRequestContext);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userAgent = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.extention = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.extension = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.extensionRequestContext = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExportLensesByIdRequest_Context.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportLensesByIdRequest_Context();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.extention = (object.extention !== undefined && object.extention !== null)
            ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extention)
            : undefined;
        message.extension = (object.extension !== undefined && object.extension !== null)
            ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extension)
            : undefined;
        message.extensionRequestContext = (_c = object.extensionRequestContext) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context_Extension() {
    return { name: ExportLensesByIdRequest_Context_Extension_Name.UNSET, version: "" };
}
const ExportLensesByIdRequest_Context_Extension = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== ExportLensesByIdRequest_Context_Extension_Name.UNSET) {
            writer.uint32(8).int32(exportLensesByIdRequest_Context_Extension_NameToNumber(message.name));
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.name = exportLensesByIdRequest_Context_Extension_NameFromJSON(reader.int32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExportLensesByIdRequest_Context_Extension.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseExportLensesByIdResponse() {
    return { lenses: {}, excludedLenses: [] };
}
const ExportLensesByIdResponse = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.lenses).forEach(([key, value]) => {
            ExportLensesByIdResponse_LensesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        for (const v of message.excludedLenses) {
            ExportLensesByIdResponse_ExcludedLens.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = ExportLensesByIdResponse_LensesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.lenses[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.excludedLenses.push(ExportLensesByIdResponse_ExcludedLens.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExportLensesByIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdResponse();
        message.lenses = Object.entries((_a = object.lenses) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.excludedLenses = ((_b = object.excludedLenses) === null || _b === void 0 ? void 0 : _b.map((e) => ExportLensesByIdResponse_ExcludedLens.fromPartial(e))) ||
            [];
        return message;
    },
};
function createBaseExportLensesByIdResponse_LensesEntry() {
    return { key: "0", value: new Uint8Array(0) };
}
const ExportLensesByIdResponse_LensesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExportLensesByIdResponse_LensesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "0";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseExportLensesByIdResponse_ExcludedLens() {
    return { lensId: "0", code: ExportLensesByIdResponse_ExcludedLens_Code.UNSET, reason: "" };
}
const ExportLensesByIdResponse_ExcludedLens = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lensId !== "0") {
            writer.uint32(8).int64(message.lensId);
        }
        if (message.code !== ExportLensesByIdResponse_ExcludedLens_Code.UNSET) {
            writer.uint32(16).int32(exportLensesByIdResponse_ExcludedLens_CodeToNumber(message.code));
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lensId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.code = exportLensesByIdResponse_ExcludedLens_CodeFromJSON(reader.int32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExportLensesByIdResponse_ExcludedLens.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "0";
        message.code = (_b = object.code) !== null && _b !== void 0 ? _b : ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseExtensionRequestContext() {
    return { userAgent: "", locale: "" };
}
const ExtensionRequestContext = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userAgent !== "") {
            writer.uint32(10).string(message.userAgent);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionRequestContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userAgent = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ExtensionRequestContext.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExtensionRequestContext();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEnvelope() {
    return { lenses: [] };
}
const Envelope = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Envelope.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnvelope();
        message.lenses = ((_a = object.lenses) === null || _a === void 0 ? void 0 : _a.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
//# sourceMappingURL=export.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/LensSource.js



const lensSourcesFactory = Injectable("lensSources", () => []);
function loadLensesFromSources(sources, groupId, lensId) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const source = sources.find((source) => source.isGroupOwner(groupId));
        if (!source) {
            throw new Error(`Cannot load lens ${lensId ? `${lensId} from ` : ""}group ${groupId}. ` +
                `No LensSource claimed ownership of that lens group.`);
        }
        const envelope = lensId === undefined ? yield source.loadLensGroup(groupId) : yield source.loadLens(lensId, groupId);
        return envelope instanceof ArrayBuffer || ArrayBuffer.isView(envelope)
            ? Envelope.decode(envelope instanceof Uint8Array ? envelope : new Uint8Array(envelope)).lenses
            : [];
    });
}
//# sourceMappingURL=LensSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/LensRepository.js
















const LensRepository_logger = getLogger("LensRepository");
const assetTimingMap = {
    required: LensAssetManifestItem_RequestTiming.REQUIRED,
    onDemand: LensAssetManifestItem_RequestTiming.ON_DEMAND,
};
function isAssetTiming(value) {
    return typeguards_isString(value) && assetTimingMap.hasOwnProperty(value);
}
function isAssetTimingArrayOrUndefined(value) {
    return isUndefined(value) || isArrayOfType(isAssetTiming, value);
}
let LensRepository = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _loadLens_decorators;
    let _loadLensGroups_decorators;
    let _cacheLensContent_decorators;
    return _a = class LensRepository {
            constructor(lensFetchHandler, lensSources, lensAssetRepository) {
                this.lensFetchHandler = (__runInitializers(this, _instanceExtraInitializers), lensFetchHandler);
                this.lensSources = lensSources;
                this.lensAssetRepository = lensAssetRepository;
                this.metadataCache = new Map();
                this.binariesCache = new Map();
            }
            loadLens(lensId, groupId) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const lens = (yield loadLensesFromSources(this.lensSources, groupId, lensId))[0];
                    if (!lens) {
                        throw new Error(`Cannot load lens. No lens with id ${lensId} was found in lens group ${groupId}.`);
                    }
                    const lensWithGroup = Object.assign(Object.assign({}, lens), { groupId });
                    this.metadataCache.set(lens.id, lensWithGroup);
                    return toPublicLens(lensWithGroup);
                });
            }
            loadLensGroups(groupIds) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const responses = yield Promise.all(groupIds.map((groupId) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                        try {
                            return (yield loadLensesFromSources(this.lensSources, groupId)).map((lens) => {
                                const lensWithGroup = Object.assign(Object.assign({}, lens), { groupId });
                                this.metadataCache.set(lens.id, lensWithGroup);
                                return toPublicLens(lensWithGroup);
                            });
                        }
                        catch (e) {
                            const error = errorHelpers_ensureError(e);
                            LensRepository_logger.error(new Error(`Failed to load lens group ${groupId}.`, { cause: error }));
                            return error;
                        }
                    })));
                    return responses.reduce((result, response) => {
                        if (response instanceof Error)
                            result.errors.push(response);
                        else
                            result.lenses.push(...response);
                        return result;
                    }, { errors: [], lenses: [] });
                });
            }
            cacheLensContent(lenses, assetTimingsToCache = ["required", "onDemand"]) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const assetTimingsToLoad = assetTimingsToCache.map((timing) => assetTimingMap[timing]);
                    yield Promise.all(lenses.map((lens) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                        try {
                            const { lensBuffer } = yield this.getLensContent(lens, true);
                            const { content } = this.metadataCache.get(lens.id);
                            this.binariesCache.set(lens.id, lensBuffer);
                            yield this.lensAssetRepository.cacheAssets(content.assetManifest, lens, assetTimingsToLoad, true);
                        }
                        catch (error) {
                            LensRepository_logger.warn(`Failed to cache lens ${lens.id}.`, error);
                        }
                    })));
                });
            }
            getLensMetadata(lensId) {
                return this.metadataCache.get(lensId);
            }
            removeCachedLenses(lenses) {
                lenses.forEach((lens) => this.binariesCache.delete(lens.id));
            }
            getLensContent(lens, lowPriority = false) {
                var _a;
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const { content } = (_a = this.metadataCache.get(lens.id)) !== null && _a !== void 0 ? _a : {};
                    if (!content) {
                        throw new Error(`Cannot find metadata for lens ${lens.id}.`);
                    }
                    const cachedLensBuffer = this.binariesCache.get(lens.id);
                    if (cachedLensBuffer) {
                        return {
                            lensBuffer: cachedLensBuffer,
                            lensChecksum: content.lnsSha256,
                        };
                    }
                    const [lensBuffer] = yield this.lensFetchHandler([
                        new Request(content.lnsUrlBolt, withRequestPriority({ cache: "force-cache" }, lowPriority)),
                        {
                            requestType: "lens_content",
                            lensId: lens.id,
                        },
                    ]);
                    return { lensBuffer, lensChecksum: content.lnsSha256 };
                });
            }
        },
        (() => {
            _loadLens_decorators = [validate_validate(isSafeString, isSafeString), errorLoggingDecorator(LensRepository_logger)];
            _loadLensGroups_decorators = [validate_validate(isSafeStringArray), errorLoggingDecorator(LensRepository_logger)];
            _cacheLensContent_decorators = [validate_validate(isLensArray, isAssetTimingArrayOrUndefined), errorLoggingDecorator(LensRepository_logger)];
            __esDecorate(_a, null, _loadLens_decorators, { kind: "method", name: "loadLens", static: false, private: false, access: { has: obj => "loadLens" in obj, get: obj => obj.loadLens } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _loadLensGroups_decorators, { kind: "method", name: "loadLensGroups", static: false, private: false, access: { has: obj => "loadLensGroups" in obj, get: obj => obj.loadLensGroups } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _cacheLensContent_decorators, { kind: "method", name: "cacheLensContent", static: false, private: false, access: { has: obj => "cacheLensContent" in obj, get: obj => obj.cacheLensContent } }, null, _instanceExtraInitializers);
        })(),
        _a;
})();

const lensRepositoryFactory = Injectable("LensRepository", [
    requestStateEventTargetFactory.token,
    defaultFetchHandlerFactory.token,
    lensSourcesFactory.token,
    lensAssetRepositoryFactory.token,
], (requestStateEventTarget, defaultFetchHandler, lensSources, lensAssetRepository) => {
    const lensFetchHandler = new HandlerChainBuilder(defaultFetchHandler)
        .map(createRequestStateEmittingHandler(requestStateEventTarget))
        .map(createArrayBufferParsingHandler()).handler;
    return new LensRepository(lensFetchHandler, lensSources, lensAssetRepository);
});
//# sourceMappingURL=LensRepository.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/of.js


function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(args);
    return from_from(args, scheduler);
}
//# sourceMappingURL=of.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js




function takeUntil(notifier) {
    return operate(function (source, subscriber) {
        innerFrom_innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop));
        !subscriber.closed && source.subscribe(subscriber);
    });
}
//# sourceMappingURL=takeUntil.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/types.js
// `Object.entries` does preserve key types.
const types_entries = (o) => Object.entries(o);
// `Object.fromEntries` does not preserve key types.
const types_fromEntries = (entries) => Object.fromEntries(entries);

;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/actions.js


/**
 * Define an Action by providing a name and (optionally) the type of data the Action carries. Returns a function which
 * creates actions of that type.
 *
 * @param name The action's name, should be unique among all actions used by a single state machine.
 * @returns The function returned is used to specify the type of data the Action carries – it must be called to return
 * the actual action creator, which is then strongly typed.
 */
const defineAction = (name) => () => {
    const actionCreator = (data) => ({
        name,
        data,
    });
    Object.defineProperty(actionCreator, "name", { value: name });
    // Safety: Object.defineProperty has added the `name` property, but the TS compiler doesn't know that.
    return actionCreator;
};
/**
 * Create an object from action creators, where each property is the name of the action.
 *
 * @param actions Pass one or more actions as arguments, using [[defineAction]] to create each action.
 * @returns
 */
const defineActions = (...actions) => {
    const entries = actions.map((s) => [s.name, s]);
    // Safety: TS isn't able to infer that keys are the action names, so we have to cast – but we're just extracting the
    // name property and using it as the key (we're doing no other manipulation), so we know we'll end up with the
    // correct ActionCreatorMap.
    return types_fromEntries(entries);
};
/**
 * Filter an `Observable<[Action, State]>` to only emit when the action matches one of the action names given as
 * arguments.
 * ```ts
 * myStateMachine.pipe(
 *   forActions('myFirstAction', 'mySecondAction'),
 * ).subscribe(doSomethingOnEitherAction)
 * ```
 *
 * @param actions Pass one or more action names as arguments, used to filter an `Observable<[Action, State]>`
 * @returns
 */
function forActions(...actions) {
    return filter((v) => actions.some((action) => v[0].name === action));
}
/**
 * Determine if a given action is of a specific type, given by an action name. This narrows the type of the action.
 *
 * @param action An action with a broad type (e.g. a union of many actions)
 * @param name The name of a specific action.
 * @returns Narrows the type of the action argument to that action which has the given name.
 */
function isAction(action, name) {
    return action.name === name;
}

;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/states.js


/**
 * Define a State by providing a name and (optionally) the type of data the State carries. Returns a function which
 * creates states of that type.
 *
 * @param name The state's name, should be unique among all states used by a single state machine.
 * @returns The function returned is used to specify the type of data the State carries – it must be called to return
 * the actual state creator, which is then strongly typed.
 */
const defineState = (name) => () => defineAction(name)();
/**
 * Create an object from state creators, where each property is the name of the state.
 *
 * @param states Pass one or more states as arguments, using [[defineState]] to create each state.
 * @returns
 */
const defineStates = (...states) => defineActions(...states);
/**
 * Filter an `Observable<[Action, State]>` to only emit when the state matches one of the state names given as
 * arguments.
 * ```ts
 * myStateMachine.pipe(
 *   inStates('myFirstState', 'mySecondState'),
 * ).subscribe(doSomethingIfInEitherState)
 * ```
 *
 * @param states Pass one or more state names as arguments, used to filter an `Observable<[Action, State]>`
 * @returns An Observable which only emits when in one of the given states.
 */
function inStates(...states) {
    return filter((v) => states.some((state) => v[1].name === state));
}
/**
 * Determine if a given state is of a specific type, given by an state name. This narrows the type of the state.
 *
 * @param state A state with a broad type (e.g. a union of many states)
 * @param name The name of a specific state.
 * @returns Narrows the type of the state argument to that state which has the given name.
 */
function isState(state, name) {
    return state.name === name;
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js


var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(Subject));

//# sourceMappingURL=BehaviorSubject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js







function withLatestFrom() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    var project = args_popResultSelector(inputs);
    return operate(function (source, subscriber) {
        var len = inputs.length;
        var otherValues = new Array(len);
        var hasValue = inputs.map(function () { return false; });
        var ready = false;
        var _loop_1 = function (i) {
            innerFrom_innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {
                otherValues[i] = value;
                if (!ready && !hasValue[i]) {
                    hasValue[i] = true;
                    (ready = hasValue.every(identity_identity)) && (hasValue = null);
                }
            }, noop));
        };
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            if (ready) {
                var values = __spreadArray([value], __read(otherValues));
                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
            }
        }));
    });
}
//# sourceMappingURL=withLatestFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/never.js


var NEVER = new Observable_Observable(noop);
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/concatAll.js

function concatAll() {
    return mergeAll(1);
}
//# sourceMappingURL=concatAll.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/concat.js



function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return concatAll()(from_from(args, args_popScheduler(args)));
}
//# sourceMappingURL=concat.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/startWith.js



function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(values);
    return operate(function (source, subscriber) {
        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
}
//# sourceMappingURL=startWith.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/race.js




function race() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    sources = argsOrArgArray(sources);
    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));
}
function raceInit(sources) {
    return function (subscriber) {
        var subscriptions = [];
        var _loop_1 = function (i) {
            subscriptions.push(innerFrom_innerFrom(sources[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (subscriptions) {
                    for (var s = 0; s < subscriptions.length; s++) {
                        s !== i && subscriptions[s].unsubscribe();
                    }
                    subscriptions = null;
                }
                subscriber.next(value);
            })));
        };
        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
            _loop_1(i);
        }
    };
}
//# sourceMappingURL=race.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/raceWith.js




function raceWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return !otherSources.length
        ? identity_identity
        : operate(function (source, subscriber) {
            raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
        });
}
//# sourceMappingURL=raceWith.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/state-machine.js

/**
 * A StateMachine takes a finite set of both Action and State types, representing the allowed states of the machine and
 * the possible actions which may (or may not) cause a transition between states.
 *
 * The following algorithm is used to update state. For those who have used Redux, this will sound familiar:
 *
 * 1. The user of the state machine dispatches one of the allowed Actions.
 * 2. The [action, current state] pair is passed to each of the "reducers" configured for the state machine. These
 *    reducers must (synchronously) produce a new state, or do nothing.
 * 3. The state machine's internal state is updated to the new state (or remains in the old state if no reducer produced
 *    a new state).
 * 4. Notify all configured "effects" with the [action, new state] pair – effects are notified even if the state did not
 *    change. Effects may produce their own actions. This will feel familiar to users of redux-observable.
 *
 * We can visualize this with the following diagram:
 *
 * ```txt
 * dispatch Action
 *    |
 *    |
 * reducers run on [Action, Starting State] and return New State
 *    |
 *    |
 * the state machine's internal state is updated to New State
 *    |
 *    |
 * effects run on [Action, New State]
 * ```
 */
/** @internal */
class StateMachine {
    actions;
    states;
    /**
     * After an Action is dispatched, passed to the StateMachine's reducer to produce a new state (or stay in the same
     * state), a pair of [Action, State] is emitted on this Observable.
     *
     * This can be used to observe every action dispatched to the StateMachine, along with the state that it produced.
     *
     * The most common use of the `events` Observable is to implement side-effects. It's very common for side-effects
     * to dispatch actions back to the StateMachine.
     *
     * ```ts
     * stateMachine.events.pipe(
     *   inStates('idle'),
     *   forActions('makeRequest'),
     *   switchMap(([{data: request}]) => fromFetch(request)),
     *   tap(response => stateMachine.dispatch('requestComplete', response)),
     * ).subscribe()
     * ```
     */
    events;
    actionsSubject;
    eventsSubject;
    state;
    /**
     * Create a StateMachine with a defined set of Actions and States.
     *
     * The StateMachine begins in a given initial state with transitions to new states defined by a "reducer" function.
     *
     * Reducers are OperatorFunctions which map an Observable of `[Action, State]` pairs into an Observable of a new
     * state. They can be constructed using RxJS's `pipe` function. For example:
     *
     * ```ts
     * new StateMachine(actions, states, initialState, pipe(
     *   inStates('someState'),
     *   forActions('someAction'),
     *   map(([a, s]) => computeNewState(a, s)),
     * ))
     * ```
     *
     * Often it will be useful to break the reducer into separate behaviors to handle different actions:
     *
     * ```ts
     * new StateMachine(actions, states, initialState, state => {
     *   return merge(
     *     state.pipe(inStates('someState'), forAction('someAction'), map(computeNextState)),
     *     state.pipe(inStates('otherState'), forAction('otherAction'), map(computeOtherNextState)),
     *     // ...
     *   )
     * })
     * ```
     *
     * Reducers must return an output Observable<State> which, when the input Observable<[Action, State]> emits, either:
     *
     * - synchronously emits a single new state.
     * - emits nothing.
     *
     * To enforce this, reducer Observables race with a sync Observable containing the current state. If the reducer
     * Observable does not emit a new state synchronously, the current state is used (i.e. the state does not change).
     *
     * @param initialState
     * @param reducer
     * @returns
     */
    constructor(actions, states, initialState, reducer) {
        this.actions = actions;
        this.states = states;
        this.actionsSubject = new Subject();
        this.eventsSubject = new Subject();
        this.events = this.eventsSubject.asObservable();
        this.state = new BehaviorSubject(initialState);
        this.actionsSubject
            .pipe(withLatestFrom(this.state), mergeMap(([a, s]) => 
        // `NEVER` + `startWith` is needed for `raceWith` to work properly. If we instead used the more
        // typical `of([a, s])` we would encounter the following problem:
        //
        // `of` emits its value and completes synchronously (i.e. both in the same "frame," if you think in
        // marble diagrams). Assuming `reducer` does nothing to modify the completion behavior of its source
        // Observable, the Observable returned by `reducer` will also complete immediately. If we were to
        // pass that Observable to `raceWith` – whose output mirrors whichever input Observable is first to
        // emit, error, *or complete* – it would always win, even if it never emitted anything (because it
        // would already be complete).
        //
        // So instead we need an Observable that does not complete. We achieve this by using `NEVER` and
        // then starting it with `[a, s]`. Note that it's important to then use `take(1)` after `raceWith`
        // so that we don't leak Observables which never complete.
        NEVER.pipe(startWith([a, s]), reducer, raceWith(of(s)), tap((newState) => {
            if (newState !== s)
                this.state.next(newState);
        }), map((newState) => [a, newState]), take(1))))
            .subscribe(this.eventsSubject);
    }
    dispatch(actionOrName, data) {
        const action = typeof actionOrName === "string" ? { name: actionOrName, data } : actionOrName;
        this.actionsSubject.next(action);
    }
    /**
     * Returns the current state.
     */
    getState() {
        return this.state.getValue();
    }
}
/**
 * Transform a source Observable of Actions into an Observable of [Action, State] pairs by:
 * 1. Dispatching the source Actions to the given StateMachine.
 * 3. Return an Observable of that StateMachine's events.
 *
 * This allows callers to dispatch to a StateMachine when the output Observable is subscribed, and then be notified when
 * the StateMachine has produced a new state (which could be the same as the old state).
 *
 * The output Observable will remain subscribed to the StateMachine's events, emitting all subsequent `[Action, State]`
 * pairs. For that reason, it's important to ensure the output Observable is properly unsubscribed to avoid leaks. This
 * is commonly done using the `take`, `takeUntil`, `firstValueFrom`, etc. operators.
 *
 * @param stateMachine The source Observable's Actions will be dispatched to this StateMachine
 * @returns Operator function which transforms an Observable<Action> into an Observable<[Action, State]> by subscribing
 * to the given StateMachine's events and then dispatching source actions to it when they arrive.
 */
function dispatch(stateMachine) {
    return (source) => new Observable_Observable((subscriber) => {
        const subscription = stateMachine.events.subscribe(subscriber);
        subscription.add(source.subscribe({
            next: (action) => stateMachine.dispatch(action),
            error: (error) => subscriber.error(error),
            // We purposely do not forward the `complete` notification.
            // We want the subscriber to remain subscribed to the stateMachine.events observable even if the
            // source Observable<Actions> completes.
        }));
        return subscription;
    });
}

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/launch_params.js

const launch_params_protobufPackage = "snapchat.lenses";
function createBaseLaunchParams() {
    return { data: new Uint8Array(0) };
}
const LaunchParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLaunchParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LaunchParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLaunchParams();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=launch_params.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/geopoint.js

const geopoint_protobufPackage = "snapchat.lenses";
function createBaseGeopoint() {
    return { latitude: 0, longitude: 0 };
}
const Geopoint = {
    encode(message, writer = new BinaryWriter()) {
        if (message.latitude !== 0) {
            writer.uint32(9).double(message.latitude);
        }
        if (message.longitude !== 0) {
            writer.uint32(17).double(message.longitude);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGeopoint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.latitude = reader.double();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.longitude = reader.double();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Geopoint.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGeopoint();
        message.latitude = (_a = object.latitude) !== null && _a !== void 0 ? _a : 0;
        message.longitude = (_b = object.longitude) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
//# sourceMappingURL=geopoint.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/geocircle.js


const geocircle_protobufPackage = "snapchat.lenses";
function createBaseGeocircle() {
    return { radius: 0, center: undefined };
}
const Geocircle = {
    encode(message, writer = new BinaryWriter()) {
        if (message.radius !== 0) {
            writer.uint32(9).double(message.radius);
        }
        if (message.center !== undefined) {
            Geopoint.encode(message.center, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGeocircle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.radius = reader.double();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.center = Geopoint.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Geocircle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGeocircle();
        message.radius = (_a = object.radius) !== null && _a !== void 0 ? _a : 0;
        message.center = (object.center !== undefined && object.center !== null)
            ? Geopoint.fromPartial(object.center)
            : undefined;
        return message;
    },
};
//# sourceMappingURL=geocircle.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/lures.js


const lures_protobufPackage = "snapchat.lenses";
function createBaseLures() {
    return { locations: [], activeLure: undefined, closestLure: undefined };
}
const Lures = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.locations) {
            Geocircle.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.activeLure !== undefined) {
            Geocircle.encode(message.activeLure, writer.uint32(18).fork()).join();
        }
        if (message.closestLure !== undefined) {
            Geocircle.encode(message.closestLure, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLures();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.locations.push(Geocircle.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.activeLure = Geocircle.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.closestLure = Geocircle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Lures.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLures();
        message.locations = ((_a = object.locations) === null || _a === void 0 ? void 0 : _a.map((e) => Geocircle.fromPartial(e))) || [];
        message.activeLure = (object.activeLure !== undefined && object.activeLure !== null)
            ? Geocircle.fromPartial(object.activeLure)
            : undefined;
        message.closestLure = (object.closestLure !== undefined && object.closestLure !== null)
            ? Geocircle.fromPartial(object.closestLure)
            : undefined;
        return message;
    },
};
//# sourceMappingURL=lures.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/persistent_store.js

const persistent_store_protobufPackage = "snapchat.lenses";
function createBasePersistentStore() {
    return { store: new Uint8Array(0) };
}
const PersistentStore = {
    encode(message, writer = new BinaryWriter()) {
        if (message.store.length !== 0) {
            writer.uint32(10).bytes(message.store);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersistentStore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.store = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PersistentStore.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePersistentStore();
        message.store = (_a = object.store) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=persistent_store.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/snappable.js

const snappable_protobufPackage = "snapchat.lenses.snappable";
var EncryptionData_EncryptionScheme;
(function (EncryptionData_EncryptionScheme) {
    EncryptionData_EncryptionScheme["NOT_APPLICABLE"] = "NOT_APPLICABLE";
    EncryptionData_EncryptionScheme["SPOOKEY"] = "SPOOKEY";
    EncryptionData_EncryptionScheme["REGISTRY"] = "REGISTRY";
    EncryptionData_EncryptionScheme["FIDELIUS"] = "FIDELIUS";
    EncryptionData_EncryptionScheme["UNRECOGNIZED"] = "UNRECOGNIZED";
})(EncryptionData_EncryptionScheme || (EncryptionData_EncryptionScheme = {}));
function encryptionData_EncryptionSchemeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_APPLICABLE":
            return EncryptionData_EncryptionScheme.NOT_APPLICABLE;
        case 1:
        case "SPOOKEY":
            return EncryptionData_EncryptionScheme.SPOOKEY;
        case 2:
        case "REGISTRY":
            return EncryptionData_EncryptionScheme.REGISTRY;
        case 3:
        case "FIDELIUS":
            return EncryptionData_EncryptionScheme.FIDELIUS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EncryptionData_EncryptionScheme.UNRECOGNIZED;
    }
}
function encryptionData_EncryptionSchemeToNumber(object) {
    switch (object) {
        case EncryptionData_EncryptionScheme.NOT_APPLICABLE:
            return 0;
        case EncryptionData_EncryptionScheme.SPOOKEY:
            return 1;
        case EncryptionData_EncryptionScheme.REGISTRY:
            return 2;
        case EncryptionData_EncryptionScheme.FIDELIUS:
            return 3;
        case EncryptionData_EncryptionScheme.UNRECOGNIZED:
        default:
            return -1;
    }
}
var SnappableMessage_ReplyType;
(function (SnappableMessage_ReplyType) {
    SnappableMessage_ReplyType["NOT_APPLICABLE"] = "NOT_APPLICABLE";
    SnappableMessage_ReplyType["CONTEXT"] = "CONTEXT";
    SnappableMessage_ReplyType["INTERSTITIAL"] = "INTERSTITIAL";
    SnappableMessage_ReplyType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(SnappableMessage_ReplyType || (SnappableMessage_ReplyType = {}));
function snappableMessage_ReplyTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_APPLICABLE":
            return SnappableMessage_ReplyType.NOT_APPLICABLE;
        case 1:
        case "CONTEXT":
            return SnappableMessage_ReplyType.CONTEXT;
        case 2:
        case "INTERSTITIAL":
            return SnappableMessage_ReplyType.INTERSTITIAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SnappableMessage_ReplyType.UNRECOGNIZED;
    }
}
function snappableMessage_ReplyTypeToNumber(object) {
    switch (object) {
        case SnappableMessage_ReplyType.NOT_APPLICABLE:
            return 0;
        case SnappableMessage_ReplyType.CONTEXT:
            return 1;
        case SnappableMessage_ReplyType.INTERSTITIAL:
            return 2;
        case SnappableMessage_ReplyType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseEncryptionData() {
    return {
        key: new Uint8Array(0),
        ivStore: {},
        isKeyServerEncrypted: false,
        isKeyE2eEncrypted: false,
        encryptionScheme: EncryptionData_EncryptionScheme.NOT_APPLICABLE,
    };
}
const EncryptionData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        Object.entries(message.ivStore).forEach(([key, value]) => {
            EncryptionData_IvStoreEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.isKeyServerEncrypted !== false) {
            writer.uint32(24).bool(message.isKeyServerEncrypted);
        }
        if (message.isKeyE2eEncrypted !== false) {
            writer.uint32(32).bool(message.isKeyE2eEncrypted);
        }
        if (message.encryptionScheme !== EncryptionData_EncryptionScheme.NOT_APPLICABLE) {
            writer.uint32(40).int32(encryptionData_EncryptionSchemeToNumber(message.encryptionScheme));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEncryptionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = EncryptionData_IvStoreEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.ivStore[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isKeyServerEncrypted = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isKeyE2eEncrypted = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.encryptionScheme = encryptionData_EncryptionSchemeFromJSON(reader.int32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return EncryptionData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEncryptionData();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.ivStore = Object.entries((_b = object.ivStore) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.isKeyServerEncrypted = (_c = object.isKeyServerEncrypted) !== null && _c !== void 0 ? _c : false;
        message.isKeyE2eEncrypted = (_d = object.isKeyE2eEncrypted) !== null && _d !== void 0 ? _d : false;
        message.encryptionScheme = (_e = object.encryptionScheme) !== null && _e !== void 0 ? _e : EncryptionData_EncryptionScheme.NOT_APPLICABLE;
        return message;
    },
};
function createBaseEncryptionData_IvStoreEntry() {
    return { key: "", value: new Uint8Array(0) };
}
const EncryptionData_IvStoreEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEncryptionData_IvStoreEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return EncryptionData_IvStoreEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEncryptionData_IvStoreEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBasePlayerData() {
    return { store: {}, serializedStore: new Uint8Array(0) };
}
const PlayerData = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.store).forEach(([key, value]) => {
            PlayerData_StoreEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        if (message.serializedStore.length !== 0) {
            writer.uint32(18).bytes(message.serializedStore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = PlayerData_StoreEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.store[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.serializedStore = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PlayerData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePlayerData();
        message.store = Object.entries((_a = object.store) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.serializedStore = (_b = object.serializedStore) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBasePlayerData_StoreEntry() {
    return { key: "", value: "" };
}
const PlayerData_StoreEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerData_StoreEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PlayerData_StoreEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePlayerData_StoreEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSessionData() {
    return { playerData: {} };
}
const SessionData = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.playerData).forEach(([key, value]) => {
            SessionData_PlayerDataEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = SessionData_PlayerDataEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.playerData[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SessionData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSessionData();
        message.playerData = Object.entries((_a = object.playerData) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = PlayerData.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseSessionData_PlayerDataEntry() {
    return { key: "", value: undefined };
}
const SessionData_PlayerDataEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            PlayerData.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionData_PlayerDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = PlayerData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SessionData_PlayerDataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSessionData_PlayerDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? PlayerData.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseSnappableMedia() {
    return { sessionId: "", playerId: "", url: "", key: "", createdTime: "0" };
}
const SnappableMedia = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.playerId !== "") {
            writer.uint32(18).string(message.playerId);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        if (message.key !== "") {
            writer.uint32(34).string(message.key);
        }
        if (message.createdTime !== "0") {
            writer.uint32(40).int64(message.createdTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappableMedia();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.createdTime = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SnappableMedia.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSnappableMedia();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.playerId = (_b = object.playerId) !== null && _b !== void 0 ? _b : "";
        message.url = (_c = object.url) !== null && _c !== void 0 ? _c : "";
        message.key = (_d = object.key) !== null && _d !== void 0 ? _d : "";
        message.createdTime = (_e = object.createdTime) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseSnap3DData() {
    return { allowZippedMedia: false };
}
const Snap3DData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.allowZippedMedia !== false) {
            writer.uint32(8).bool(message.allowZippedMedia);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnap3DData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.allowZippedMedia = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Snap3DData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSnap3DData();
        message.allowZippedMedia = (_a = object.allowZippedMedia) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseUsesCameraRoll() {
    return { usesCameraRoll: false };
}
const UsesCameraRoll = {
    encode(message, writer = new BinaryWriter()) {
        if (message.usesCameraRoll !== false) {
            writer.uint32(8).bool(message.usesCameraRoll);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsesCameraRoll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.usesCameraRoll = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UsesCameraRoll.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUsesCameraRoll();
        message.usesCameraRoll = (_a = object.usesCameraRoll) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseSnappableMessage() {
    return {
        snappable: undefined,
        media: [],
        effectId: "",
        userIds: [],
        focusPointX: 0,
        focusPointY: 0,
        focusPointWidth: 0,
        replyType: SnappableMessage_ReplyType.NOT_APPLICABLE,
        snap3dData: undefined,
        usesCameraRollData: undefined,
        assetBatchId: "",
    };
}
const SnappableMessage = {
    encode(message, writer = new BinaryWriter()) {
        if (message.snappable !== undefined) {
            Snappable.encode(message.snappable, writer.uint32(10).fork()).join();
        }
        for (const v of message.media) {
            SnappableMedia.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.effectId !== "") {
            writer.uint32(26).string(message.effectId);
        }
        for (const v of message.userIds) {
            writer.uint32(34).string(v);
        }
        if (message.focusPointX !== 0) {
            writer.uint32(45).float(message.focusPointX);
        }
        if (message.focusPointY !== 0) {
            writer.uint32(53).float(message.focusPointY);
        }
        if (message.focusPointWidth !== 0) {
            writer.uint32(61).float(message.focusPointWidth);
        }
        if (message.replyType !== SnappableMessage_ReplyType.NOT_APPLICABLE) {
            writer.uint32(64).int32(snappableMessage_ReplyTypeToNumber(message.replyType));
        }
        if (message.snap3dData !== undefined) {
            Snap3DData.encode(message.snap3dData, writer.uint32(74).fork()).join();
        }
        if (message.usesCameraRollData !== undefined) {
            UsesCameraRoll.encode(message.usesCameraRollData, writer.uint32(82).fork()).join();
        }
        if (message.assetBatchId !== "") {
            writer.uint32(4002).string(message.assetBatchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappableMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.snappable = Snappable.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.media.push(SnappableMedia.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.effectId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.userIds.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 45) {
                        break;
                    }
                    message.focusPointX = reader.float();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.focusPointY = reader.float();
                    continue;
                }
                case 7: {
                    if (tag !== 61) {
                        break;
                    }
                    message.focusPointWidth = reader.float();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.replyType = snappableMessage_ReplyTypeFromJSON(reader.int32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.snap3dData = Snap3DData.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.usesCameraRollData = UsesCameraRoll.decode(reader, reader.uint32());
                    continue;
                }
                case 500: {
                    if (tag !== 4002) {
                        break;
                    }
                    message.assetBatchId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SnappableMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSnappableMessage();
        message.snappable = (object.snappable !== undefined && object.snappable !== null)
            ? Snappable.fromPartial(object.snappable)
            : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => SnappableMedia.fromPartial(e))) || [];
        message.effectId = (_b = object.effectId) !== null && _b !== void 0 ? _b : "";
        message.userIds = ((_c = object.userIds) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.focusPointX = (_d = object.focusPointX) !== null && _d !== void 0 ? _d : 0;
        message.focusPointY = (_e = object.focusPointY) !== null && _e !== void 0 ? _e : 0;
        message.focusPointWidth = (_f = object.focusPointWidth) !== null && _f !== void 0 ? _f : 0;
        message.replyType = (_g = object.replyType) !== null && _g !== void 0 ? _g : SnappableMessage_ReplyType.NOT_APPLICABLE;
        message.snap3dData = (object.snap3dData !== undefined && object.snap3dData !== null)
            ? Snap3DData.fromPartial(object.snap3dData)
            : undefined;
        message.usesCameraRollData = (object.usesCameraRollData !== undefined && object.usesCameraRollData !== null)
            ? UsesCameraRoll.fromPartial(object.usesCameraRollData)
            : undefined;
        message.assetBatchId = (_h = object.assetBatchId) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSnappable() {
    return {
        id: "",
        sessionId: "",
        playerId: "",
        sessionData: undefined,
        createdTime: "0",
        expireTime: "0",
        version: 0,
        encryptionData: undefined,
        sessionDepth: 0,
    };
}
const Snappable = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.playerId !== "") {
            writer.uint32(26).string(message.playerId);
        }
        if (message.sessionData !== undefined) {
            SessionData.encode(message.sessionData, writer.uint32(34).fork()).join();
        }
        if (message.createdTime !== "0") {
            writer.uint32(40).int64(message.createdTime);
        }
        if (message.expireTime !== "0") {
            writer.uint32(48).int64(message.expireTime);
        }
        if (message.version !== 0) {
            writer.uint32(56).int32(message.version);
        }
        if (message.encryptionData !== undefined) {
            EncryptionData.encode(message.encryptionData, writer.uint32(66).fork()).join();
        }
        if (message.sessionDepth !== 0) {
            writer.uint32(72).int32(message.sessionDepth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sessionData = SessionData.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.createdTime = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.expireTime = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.encryptionData = EncryptionData.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.sessionDepth = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Snappable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseSnappable();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.sessionId = (_b = object.sessionId) !== null && _b !== void 0 ? _b : "";
        message.playerId = (_c = object.playerId) !== null && _c !== void 0 ? _c : "";
        message.sessionData = (object.sessionData !== undefined && object.sessionData !== null)
            ? SessionData.fromPartial(object.sessionData)
            : undefined;
        message.createdTime = (_d = object.createdTime) !== null && _d !== void 0 ? _d : "0";
        message.expireTime = (_e = object.expireTime) !== null && _e !== void 0 ? _e : "0";
        message.version = (_f = object.version) !== null && _f !== void 0 ? _f : 0;
        message.encryptionData = (object.encryptionData !== undefined && object.encryptionData !== null)
            ? EncryptionData.fromPartial(object.encryptionData)
            : undefined;
        message.sessionDepth = (_g = object.sessionDepth) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBasePutSnappableRequest() {
    return { snappable: undefined, media: [] };
}
const PutSnappableRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.snappable !== undefined) {
            Snappable.encode(message.snappable, writer.uint32(10).fork()).join();
        }
        for (const v of message.media) {
            SnappableMedia.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutSnappableRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.snappable = Snappable.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.media.push(SnappableMedia.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PutSnappableRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutSnappableRequest();
        message.snappable = (object.snappable !== undefined && object.snappable !== null)
            ? Snappable.fromPartial(object.snappable)
            : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => SnappableMedia.fromPartial(e))) || [];
        return message;
    },
};
function createBasePutSnappableResponse() {
    return { id: "" };
}
const PutSnappableResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutSnappableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PutSnappableResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutSnappableResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSnappableRequest() {
    return { id: "" };
}
const GetSnappableRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSnappableRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetSnappableRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSnappableRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSnappableResponse() {
    return { data: undefined, media: [] };
}
const GetSnappableResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.data !== undefined) {
            Snappable.encode(message.data, writer.uint32(10).fork()).join();
        }
        for (const v of message.media) {
            SnappableMedia.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSnappableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = Snappable.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.media.push(SnappableMedia.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetSnappableResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSnappableResponse();
        message.data = (object.data !== undefined && object.data !== null) ? Snappable.fromPartial(object.data) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => SnappableMedia.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSnappableEncryptedKey() {
    return { encryptedKey: new Uint8Array(0), encryptionKeyId: "", encryptionKeyIv: new Uint8Array(0) };
}
const SnappableEncryptedKey = {
    encode(message, writer = new BinaryWriter()) {
        if (message.encryptedKey.length !== 0) {
            writer.uint32(10).bytes(message.encryptedKey);
        }
        if (message.encryptionKeyId !== "") {
            writer.uint32(18).string(message.encryptionKeyId);
        }
        if (message.encryptionKeyIv.length !== 0) {
            writer.uint32(26).bytes(message.encryptionKeyIv);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappableEncryptedKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.encryptedKey = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.encryptionKeyId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.encryptionKeyIv = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return SnappableEncryptedKey.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSnappableEncryptedKey();
        message.encryptedKey = (_a = object.encryptedKey) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.encryptionKeyId = (_b = object.encryptionKeyId) !== null && _b !== void 0 ? _b : "";
        message.encryptionKeyIv = (_c = object.encryptionKeyIv) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=snappable.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/user_data.js


const user_data_protobufPackage = "snapchat.lenses";
var UserData_Zodiac;
(function (UserData_Zodiac) {
    UserData_Zodiac["Invalid"] = "Invalid";
    UserData_Zodiac["Aquarius"] = "Aquarius";
    UserData_Zodiac["Aries"] = "Aries";
    UserData_Zodiac["Cancer"] = "Cancer";
    UserData_Zodiac["Capricorn"] = "Capricorn";
    UserData_Zodiac["Gemini"] = "Gemini";
    UserData_Zodiac["Leo"] = "Leo";
    UserData_Zodiac["Libra"] = "Libra";
    UserData_Zodiac["Pisces"] = "Pisces";
    UserData_Zodiac["Sagittarius"] = "Sagittarius";
    UserData_Zodiac["Scorpio"] = "Scorpio";
    UserData_Zodiac["Taurus"] = "Taurus";
    UserData_Zodiac["Virgo"] = "Virgo";
    UserData_Zodiac["UNRECOGNIZED"] = "UNRECOGNIZED";
})(UserData_Zodiac || (UserData_Zodiac = {}));
function userData_ZodiacFromJSON(object) {
    switch (object) {
        case 0:
        case "Invalid":
            return UserData_Zodiac.Invalid;
        case 1:
        case "Aquarius":
            return UserData_Zodiac.Aquarius;
        case 2:
        case "Aries":
            return UserData_Zodiac.Aries;
        case 3:
        case "Cancer":
            return UserData_Zodiac.Cancer;
        case 4:
        case "Capricorn":
            return UserData_Zodiac.Capricorn;
        case 5:
        case "Gemini":
            return UserData_Zodiac.Gemini;
        case 6:
        case "Leo":
            return UserData_Zodiac.Leo;
        case 7:
        case "Libra":
            return UserData_Zodiac.Libra;
        case 8:
        case "Pisces":
            return UserData_Zodiac.Pisces;
        case 9:
        case "Sagittarius":
            return UserData_Zodiac.Sagittarius;
        case 10:
        case "Scorpio":
            return UserData_Zodiac.Scorpio;
        case 11:
        case "Taurus":
            return UserData_Zodiac.Taurus;
        case 12:
        case "Virgo":
            return UserData_Zodiac.Virgo;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserData_Zodiac.UNRECOGNIZED;
    }
}
function userData_ZodiacToNumber(object) {
    switch (object) {
        case UserData_Zodiac.Invalid:
            return 0;
        case UserData_Zodiac.Aquarius:
            return 1;
        case UserData_Zodiac.Aries:
            return 2;
        case UserData_Zodiac.Cancer:
            return 3;
        case UserData_Zodiac.Capricorn:
            return 4;
        case UserData_Zodiac.Gemini:
            return 5;
        case UserData_Zodiac.Leo:
            return 6;
        case UserData_Zodiac.Libra:
            return 7;
        case UserData_Zodiac.Pisces:
            return 8;
        case UserData_Zodiac.Sagittarius:
            return 9;
        case UserData_Zodiac.Scorpio:
            return 10;
        case UserData_Zodiac.Taurus:
            return 11;
        case UserData_Zodiac.Virgo:
            return 12;
        case UserData_Zodiac.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseBitmojiUserInfo() {
    return { avatarId: "", selfieId: "" };
}
const BitmojiUserInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.avatarId !== "") {
            writer.uint32(10).string(message.avatarId);
        }
        if (message.selfieId !== "") {
            writer.uint32(18).string(message.selfieId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBitmojiUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.avatarId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.selfieId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return BitmojiUserInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBitmojiUserInfo();
        message.avatarId = (_a = object.avatarId) !== null && _a !== void 0 ? _a : "";
        message.selfieId = (_b = object.selfieId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFriendUserInfo() {
    return { friendshipStart: undefined, lastInteraction: undefined, streak: 0 };
}
const FriendUserInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.friendshipStart !== undefined) {
            Timestamp.encode(user_data_toTimestamp(message.friendshipStart), writer.uint32(10).fork()).join();
        }
        if (message.lastInteraction !== undefined) {
            Timestamp.encode(user_data_toTimestamp(message.lastInteraction), writer.uint32(18).fork()).join();
        }
        if (message.streak !== 0) {
            writer.uint32(24).uint32(message.streak);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.friendshipStart = user_data_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastInteraction = user_data_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.streak = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FriendUserInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFriendUserInfo();
        message.friendshipStart = (_a = object.friendshipStart) !== null && _a !== void 0 ? _a : undefined;
        message.lastInteraction = (_b = object.lastInteraction) !== null && _b !== void 0 ? _b : undefined;
        message.streak = (_c = object.streak) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseUserData() {
    return {
        userId: "",
        username: "",
        birthdate: "",
        displayName: "",
        countrycode: "",
        score: "0",
        bitmojiInfo: undefined,
        friendInfo: undefined,
        zodiac: UserData_Zodiac.Invalid,
    };
}
const UserData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.birthdate !== "") {
            writer.uint32(26).string(message.birthdate);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.countrycode !== "") {
            writer.uint32(42).string(message.countrycode);
        }
        if (message.score !== "0") {
            writer.uint32(56).uint64(message.score);
        }
        if (message.bitmojiInfo !== undefined) {
            BitmojiUserInfo.encode(message.bitmojiInfo, writer.uint32(66).fork()).join();
        }
        if (message.friendInfo !== undefined) {
            FriendUserInfo.encode(message.friendInfo, writer.uint32(74).fork()).join();
        }
        if (message.zodiac !== UserData_Zodiac.Invalid) {
            writer.uint32(80).int32(userData_ZodiacToNumber(message.zodiac));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.birthdate = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.countrycode = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.score = reader.uint64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.bitmojiInfo = BitmojiUserInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.friendInfo = FriendUserInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.zodiac = userData_ZodiacFromJSON(reader.int32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UserData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUserData();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.birthdate = (_c = object.birthdate) !== null && _c !== void 0 ? _c : "";
        message.displayName = (_d = object.displayName) !== null && _d !== void 0 ? _d : "";
        message.countrycode = (_e = object.countrycode) !== null && _e !== void 0 ? _e : "";
        message.score = (_f = object.score) !== null && _f !== void 0 ? _f : "0";
        message.bitmojiInfo = (object.bitmojiInfo !== undefined && object.bitmojiInfo !== null)
            ? BitmojiUserInfo.fromPartial(object.bitmojiInfo)
            : undefined;
        message.friendInfo = (object.friendInfo !== undefined && object.friendInfo !== null)
            ? FriendUserInfo.fromPartial(object.friendInfo)
            : undefined;
        message.zodiac = (_g = object.zodiac) !== null && _g !== void 0 ? _g : UserData_Zodiac.Invalid;
        return message;
    },
};
function createBaseUserDataList() {
    return { userData: [] };
}
const UserDataList = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.userData) {
            UserData.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserDataList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userData.push(UserData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UserDataList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserDataList();
        message.userData = ((_a = object.userData) === null || _a === void 0 ? void 0 : _a.map((e) => UserData.fromPartial(e))) || [];
        return message;
    },
};
function user_data_toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function user_data_fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
//# sourceMappingURL=user_data.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/launchdata.js







const launchdata_protobufPackage = "snapchat.lenses";
var LaunchData_EntryPoint;
(function (LaunchData_EntryPoint) {
    LaunchData_EntryPoint["LIVE_CAMERA"] = "LIVE_CAMERA";
    LaunchData_EntryPoint["STORY_REPLY"] = "STORY_REPLY";
    LaunchData_EntryPoint["CHAT_REPLY"] = "CHAT_REPLY";
    LaunchData_EntryPoint["RESTART"] = "RESTART";
    LaunchData_EntryPoint["PREVIEW_CANCEL"] = "PREVIEW_CANCEL";
    LaunchData_EntryPoint["MAP"] = "MAP";
    LaunchData_EntryPoint["BITMOJI_STICKERS"] = "BITMOJI_STICKERS";
    LaunchData_EntryPoint["POST_CAPTURE_PREVIEW"] = "POST_CAPTURE_PREVIEW";
    LaunchData_EntryPoint["POST_CAPTURE_TRANSCODING"] = "POST_CAPTURE_TRANSCODING";
    LaunchData_EntryPoint["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LaunchData_EntryPoint || (LaunchData_EntryPoint = {}));
function launchData_EntryPointFromJSON(object) {
    switch (object) {
        case 0:
        case "LIVE_CAMERA":
            return LaunchData_EntryPoint.LIVE_CAMERA;
        case 1:
        case "STORY_REPLY":
            return LaunchData_EntryPoint.STORY_REPLY;
        case 2:
        case "CHAT_REPLY":
            return LaunchData_EntryPoint.CHAT_REPLY;
        case 3:
        case "RESTART":
            return LaunchData_EntryPoint.RESTART;
        case 4:
        case "PREVIEW_CANCEL":
            return LaunchData_EntryPoint.PREVIEW_CANCEL;
        case 5:
        case "MAP":
            return LaunchData_EntryPoint.MAP;
        case 6:
        case "BITMOJI_STICKERS":
            return LaunchData_EntryPoint.BITMOJI_STICKERS;
        case 7:
        case "POST_CAPTURE_PREVIEW":
            return LaunchData_EntryPoint.POST_CAPTURE_PREVIEW;
        case 8:
        case "POST_CAPTURE_TRANSCODING":
            return LaunchData_EntryPoint.POST_CAPTURE_TRANSCODING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LaunchData_EntryPoint.UNRECOGNIZED;
    }
}
function launchData_EntryPointToNumber(object) {
    switch (object) {
        case LaunchData_EntryPoint.LIVE_CAMERA:
            return 0;
        case LaunchData_EntryPoint.STORY_REPLY:
            return 1;
        case LaunchData_EntryPoint.CHAT_REPLY:
            return 2;
        case LaunchData_EntryPoint.RESTART:
            return 3;
        case LaunchData_EntryPoint.PREVIEW_CANCEL:
            return 4;
        case LaunchData_EntryPoint.MAP:
            return 5;
        case LaunchData_EntryPoint.BITMOJI_STICKERS:
            return 6;
        case LaunchData_EntryPoint.POST_CAPTURE_PREVIEW:
            return 7;
        case LaunchData_EntryPoint.POST_CAPTURE_TRANSCODING:
            return 8;
        case LaunchData_EntryPoint.UNRECOGNIZED:
        default:
            return -1;
    }
}
var LaunchData_ApiDescriptor;
(function (LaunchData_ApiDescriptor) {
    LaunchData_ApiDescriptor["NONE"] = "NONE";
    LaunchData_ApiDescriptor["EXPERIMENTAL"] = "EXPERIMENTAL";
    LaunchData_ApiDescriptor["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LaunchData_ApiDescriptor || (LaunchData_ApiDescriptor = {}));
function launchData_ApiDescriptorFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return LaunchData_ApiDescriptor.NONE;
        case 1:
        case "EXPERIMENTAL":
            return LaunchData_ApiDescriptor.EXPERIMENTAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LaunchData_ApiDescriptor.UNRECOGNIZED;
    }
}
function launchData_ApiDescriptorToNumber(object) {
    switch (object) {
        case LaunchData_ApiDescriptor.NONE:
            return 0;
        case LaunchData_ApiDescriptor.EXPERIMENTAL:
            return 1;
        case LaunchData_ApiDescriptor.UNRECOGNIZED:
        default:
            return -1;
    }
}
var LaunchData_RenderConfig;
(function (LaunchData_RenderConfig) {
    LaunchData_RenderConfig["DEFAULT"] = "DEFAULT";
    LaunchData_RenderConfig["REPLAY_STREAM"] = "REPLAY_STREAM";
    LaunchData_RenderConfig["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LaunchData_RenderConfig || (LaunchData_RenderConfig = {}));
function launchData_RenderConfigFromJSON(object) {
    switch (object) {
        case 0:
        case "DEFAULT":
            return LaunchData_RenderConfig.DEFAULT;
        case 1:
        case "REPLAY_STREAM":
            return LaunchData_RenderConfig.REPLAY_STREAM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LaunchData_RenderConfig.UNRECOGNIZED;
    }
}
function launchData_RenderConfigToNumber(object) {
    switch (object) {
        case LaunchData_RenderConfig.DEFAULT:
            return 0;
        case LaunchData_RenderConfig.REPLAY_STREAM:
            return 1;
        case LaunchData_RenderConfig.UNRECOGNIZED:
        default:
            return -1;
    }
}
var LaunchData_ActivationSource;
(function (LaunchData_ActivationSource) {
    LaunchData_ActivationSource["ACTIVATION_SOURCE_UNSET"] = "ACTIVATION_SOURCE_UNSET";
    LaunchData_ActivationSource["ACTIVATION_SOURCE_DEFAULT"] = "ACTIVATION_SOURCE_DEFAULT";
    LaunchData_ActivationSource["CREATIVE"] = "CREATIVE";
    LaunchData_ActivationSource["SCAN"] = "SCAN";
    LaunchData_ActivationSource["SCAN_HISTORY"] = "SCAN_HISTORY";
    LaunchData_ActivationSource["CHAT_FEED_PSA"] = "CHAT_FEED_PSA";
    LaunchData_ActivationSource["GROWTH_NOTIFICATION"] = "GROWTH_NOTIFICATION";
    LaunchData_ActivationSource["MASS_SNAP"] = "MASS_SNAP";
    LaunchData_ActivationSource["SMART_CTA"] = "SMART_CTA";
    LaunchData_ActivationSource["MASS_CHAT"] = "MASS_CHAT";
    LaunchData_ActivationSource["BILLBOARD_FHP"] = "BILLBOARD_FHP";
    LaunchData_ActivationSource["LENS_ACTIVITY_CENTER"] = "LENS_ACTIVITY_CENTER";
    LaunchData_ActivationSource["AR_BAR"] = "AR_BAR";
    LaunchData_ActivationSource["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LaunchData_ActivationSource || (LaunchData_ActivationSource = {}));
function launchData_ActivationSourceFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTIVATION_SOURCE_UNSET":
            return LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET;
        case 1:
        case "ACTIVATION_SOURCE_DEFAULT":
            return LaunchData_ActivationSource.ACTIVATION_SOURCE_DEFAULT;
        case 2:
        case "CREATIVE":
            return LaunchData_ActivationSource.CREATIVE;
        case 3:
        case "SCAN":
            return LaunchData_ActivationSource.SCAN;
        case 4:
        case "SCAN_HISTORY":
            return LaunchData_ActivationSource.SCAN_HISTORY;
        case 5:
        case "CHAT_FEED_PSA":
            return LaunchData_ActivationSource.CHAT_FEED_PSA;
        case 6:
        case "GROWTH_NOTIFICATION":
            return LaunchData_ActivationSource.GROWTH_NOTIFICATION;
        case 7:
        case "MASS_SNAP":
            return LaunchData_ActivationSource.MASS_SNAP;
        case 8:
        case "SMART_CTA":
            return LaunchData_ActivationSource.SMART_CTA;
        case 9:
        case "MASS_CHAT":
            return LaunchData_ActivationSource.MASS_CHAT;
        case 10:
        case "BILLBOARD_FHP":
            return LaunchData_ActivationSource.BILLBOARD_FHP;
        case 11:
        case "LENS_ACTIVITY_CENTER":
            return LaunchData_ActivationSource.LENS_ACTIVITY_CENTER;
        case 12:
        case "AR_BAR":
            return LaunchData_ActivationSource.AR_BAR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LaunchData_ActivationSource.UNRECOGNIZED;
    }
}
function launchData_ActivationSourceToNumber(object) {
    switch (object) {
        case LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET:
            return 0;
        case LaunchData_ActivationSource.ACTIVATION_SOURCE_DEFAULT:
            return 1;
        case LaunchData_ActivationSource.CREATIVE:
            return 2;
        case LaunchData_ActivationSource.SCAN:
            return 3;
        case LaunchData_ActivationSource.SCAN_HISTORY:
            return 4;
        case LaunchData_ActivationSource.CHAT_FEED_PSA:
            return 5;
        case LaunchData_ActivationSource.GROWTH_NOTIFICATION:
            return 6;
        case LaunchData_ActivationSource.MASS_SNAP:
            return 7;
        case LaunchData_ActivationSource.SMART_CTA:
            return 8;
        case LaunchData_ActivationSource.MASS_CHAT:
            return 9;
        case LaunchData_ActivationSource.BILLBOARD_FHP:
            return 10;
        case LaunchData_ActivationSource.LENS_ACTIVITY_CENTER:
            return 11;
        case LaunchData_ActivationSource.AR_BAR:
            return 12;
        case LaunchData_ActivationSource.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseLaunchData() {
    return {
        snappable: undefined,
        lures: undefined,
        userId: "",
        entryPoint: LaunchData_EntryPoint.LIVE_CAMERA,
        userData: undefined,
        persistentStore: undefined,
        launchParams: undefined,
        apiDescriptors: [],
        renderConfig: LaunchData_RenderConfig.DEFAULT,
        activationSource: LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET,
        overridenLaunchTime: undefined,
    };
}
const LaunchData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.snappable !== undefined) {
            Snappable.encode(message.snappable, writer.uint32(10).fork()).join();
        }
        if (message.lures !== undefined) {
            Lures.encode(message.lures, writer.uint32(18).fork()).join();
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.entryPoint !== LaunchData_EntryPoint.LIVE_CAMERA) {
            writer.uint32(32).int32(launchData_EntryPointToNumber(message.entryPoint));
        }
        if (message.userData !== undefined) {
            UserData.encode(message.userData, writer.uint32(42).fork()).join();
        }
        if (message.persistentStore !== undefined) {
            PersistentStore.encode(message.persistentStore, writer.uint32(50).fork()).join();
        }
        if (message.launchParams !== undefined) {
            LaunchParams.encode(message.launchParams, writer.uint32(58).fork()).join();
        }
        writer.uint32(66).fork();
        for (const v of message.apiDescriptors) {
            writer.int32(launchData_ApiDescriptorToNumber(v));
        }
        writer.join();
        if (message.renderConfig !== LaunchData_RenderConfig.DEFAULT) {
            writer.uint32(72).int32(launchData_RenderConfigToNumber(message.renderConfig));
        }
        if (message.activationSource !== LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET) {
            writer.uint32(80).int32(launchData_ActivationSourceToNumber(message.activationSource));
        }
        if (message.overridenLaunchTime !== undefined) {
            Timestamp.encode(launchdata_toTimestamp(message.overridenLaunchTime), writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLaunchData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.snappable = Snappable.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lures = Lures.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.entryPoint = launchData_EntryPointFromJSON(reader.int32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userData = UserData.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.persistentStore = PersistentStore.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.launchParams = LaunchParams.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.apiDescriptors.push(launchData_ApiDescriptorFromJSON(reader.int32()));
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.apiDescriptors.push(launchData_ApiDescriptorFromJSON(reader.int32()));
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.renderConfig = launchData_RenderConfigFromJSON(reader.int32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.activationSource = launchData_ActivationSourceFromJSON(reader.int32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.overridenLaunchTime = launchdata_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LaunchData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseLaunchData();
        message.snappable = (object.snappable !== undefined && object.snappable !== null)
            ? Snappable.fromPartial(object.snappable)
            : undefined;
        message.lures = (object.lures !== undefined && object.lures !== null) ? Lures.fromPartial(object.lures) : undefined;
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.entryPoint = (_b = object.entryPoint) !== null && _b !== void 0 ? _b : LaunchData_EntryPoint.LIVE_CAMERA;
        message.userData = (object.userData !== undefined && object.userData !== null)
            ? UserData.fromPartial(object.userData)
            : undefined;
        message.persistentStore = (object.persistentStore !== undefined && object.persistentStore !== null)
            ? PersistentStore.fromPartial(object.persistentStore)
            : undefined;
        message.launchParams = (object.launchParams !== undefined && object.launchParams !== null)
            ? LaunchParams.fromPartial(object.launchParams)
            : undefined;
        message.apiDescriptors = ((_c = object.apiDescriptors) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.renderConfig = (_d = object.renderConfig) !== null && _d !== void 0 ? _d : LaunchData_RenderConfig.DEFAULT;
        message.activationSource = (_e = object.activationSource) !== null && _e !== void 0 ? _e : LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET;
        message.overridenLaunchTime = (_f = object.overridenLaunchTime) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function launchdata_toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function launchdata_fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
//# sourceMappingURL=launchdata.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/LensLaunchData.js



const zodiacMap = {
    aquarius: UserData_Zodiac.Aquarius,
    aries: UserData_Zodiac.Aries,
    cancer: UserData_Zodiac.Cancer,
    capricorn: UserData_Zodiac.Capricorn,
    gemini: UserData_Zodiac.Gemini,
    leo: UserData_Zodiac.Leo,
    libra: UserData_Zodiac.Libra,
    pisces: UserData_Zodiac.Pisces,
    sagittarius: UserData_Zodiac.Sagittarius,
    scorpio: UserData_Zodiac.Scorpio,
    taurus: UserData_Zodiac.Taurus,
    virgo: UserData_Zodiac.Virgo,
};
const zodiacValueSet = new Set(Object.keys(zodiacMap));
function isZodiac(value) {
    return zodiacValueSet.has(value);
}
function isLensLaunchDataOrUndefined(value) {
    return isUndefined(value) || isLensLaunchData(value);
}
function isLensLaunchData(value) {
    return (typeguards_isRecord(value) &&
        isStringOrUndefined(value.userId) &&
        isLensUserDataOrUndefined(value.userData) &&
        isLensLaunchParamsOrUndefined(value.launchParams));
}
function isLensUserDataOrUndefined(value) {
    return isUndefined(value) || isLensUserData(value);
}
function isLensUserData(value) {
    return (typeguards_isRecord(value) &&
        isStringOrUndefined(value.userId) &&
        isStringOrUndefined(value.username) &&
        isStringOrUndefined(value.birthdate) &&
        isStringOrUndefined(value.displayName) &&
        isStringOrUndefined(value.countrycode) &&
        isStringOrUndefined(value.score) &&
        isBitmojiUserInfoOrUndefined(value.bitmojiInfo) &&
        isFriendUserInfoOrUndefined(value.friendInfo) &&
        isZodiacOrUndefined(value.zodiac));
}
function isBitmojiUserInfoOrUndefined(value) {
    return isUndefined(value) || isBitmojiUserInfo(value);
}
function isBitmojiUserInfo(value) {
    return typeguards_isRecord(value) && isStringOrUndefined(value.avatarId) && isStringOrUndefined(value.selfieId);
}
function isFriendUserInfoOrUndefined(value) {
    return isUndefined(value) || isFriendUserInfo(value);
}
function isFriendUserInfo(value) {
    return (typeguards_isRecord(value) &&
        isDateOrUndefined(value.friendshipStart) &&
        isDateOrUndefined(value.lastInteraction) &&
        isValidNumberOrUndefined(value.streak));
}
function isZodiacOrUndefined(value) {
    return isUndefined(value) || isZodiac(value);
}
function isLensLaunchParamsOrUndefined(value) {
    return isUndefined(value) || isLensLaunchParams(value);
}
function isLensLaunchParams(value) {
    return typeguards_isRecord(value) && typeguards_predicateRecordValues(isStringOrNumberOrArrayOfStringsOrNumbers)(value);
}
function isStringOrNumberOrArrayOfStringsOrNumbers(value) {
    return (typeguards_isString(value) || isValidNumber(value) || isArrayOfType(typeguards_isString, value) || isArrayOfType(isValidNumber, value));
}
const encodeLensLaunchData = (launchData, persistentStore) => {
    var _a;
    return LaunchData.encode(LaunchData.fromPartial(Object.assign(Object.assign({}, launchData), { userData: launchData.userData
            ? Object.assign(Object.assign({}, launchData.userData), { zodiac: ((_a = launchData.userData) === null || _a === void 0 ? void 0 : _a.zodiac) ? zodiacMap[launchData.userData.zodiac] : undefined }) : undefined, launchParams: launchData.launchParams ? encodeLensLaunchParams(launchData.launchParams) : undefined, persistentStore: { store: new Uint8Array(persistentStore) } })))
        .finish()
        .slice();
};
function encodeLensLaunchParams(launchParams) {
    return { data: new TextEncoder().encode(JSON.stringify(launchParams)) };
}
//# sourceMappingURL=LensLaunchData.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/transforms/Transform2D.js
class Transform2D {
    constructor(matrix) {
        this.matrix = matrix;
    }
}
Transform2D.MirrorX = new Transform2D([-1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0]);
Transform2D.MirrorY = new Transform2D([1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0]);
Transform2D.Identity = new Transform2D([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]);

function isTransform2D(value) {
    return value instanceof Transform2D;
}
//# sourceMappingURL=Transform2D.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/media-sources/CameraKitSource.js





const defaultDeviceInfo = {
    cameraType: "user",
    fpsLimit: Number.POSITIVE_INFINITY,
};
const createNotAttachedError = (message) => new Error(`${message}. This CameraKitSource is not attached to a CameraKitSession.`);
const cameraTypeValueSet = new Set(Object.keys({
    user: 0,
    environment: 0,
}));
function isCameraKitSource(value) {
    return value instanceof CameraKitSource_CameraKitSource;
}
function isPartialCameraKitDeviceOptionsOrUndefined(value) {
    return isUndefined(value) || isPartialCameraKitDeviceOptions(value);
}
function isPartialCameraKitDeviceOptions(value) {
    return typeguards_isRecord(value) && isCameraTypeOrUndefined(value.cameraType) && isValidNumberOrUndefined(value.fpsLimit);
}
function isCameraType(value) {
    return cameraTypeValueSet.has(value);
}
function isCameraTypeOrUndefined(value) {
    return isUndefined(value) || isCameraType(value);
}
let CameraKitSource_CameraKitSource = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _setRenderSize_decorators;
    let _setTransform_decorators;
    return _a = class CameraKitSource {
            constructor(sourceInfo, subscriber = {}, deviceInfo = {}) {
                this.sourceInfo = (__runInitializers(this, _instanceExtraInitializers), sourceInfo);
                this.subscriber = subscriber;
                this.deviceInfo = Object.assign(Object.assign({}, defaultDeviceInfo), copyDefinedProperties(deviceInfo));
            }
            attach(lensCore, reportError) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (this.lensCore) {
                        throw new Error("This CameraKitSource has already been attached to this CameraKitSession " +
                            "and cannot be reattached, even after detachment.");
                    }
                    this.lensCore = lensCore;
                    yield lensCore.useMediaElement({
                        autoplayNewMedia: false,
                        autoplayPreviewCanvas: false,
                        media: this.sourceInfo.media,
                        pauseExistingMedia: false,
                        replayTrackingData: this.sourceInfo.replayTrackingData,
                        requestWebcam: false,
                        startOnFrontCamera: ["user", "front"].includes(this.deviceInfo.cameraType),
                        useManualFrameProcessing: this.sourceInfo.useManualFrameProcessing,
                    });
                    const fps = this.deviceInfo.fpsLimit < Number.POSITIVE_INFINITY ? this.deviceInfo.fpsLimit : 0;
                    yield lensCore.setFPSLimit({ fps });
                    yield lensCore.setRenderSize({ mode: "matchInputResolution" });
                    if (this.subscriber.onAttach)
                        yield this.subscriber.onAttach(this, lensCore, reportError);
                });
            }
            copy(deviceInfo = {}) {
                return new CameraKitSource(this.sourceInfo, this.subscriber, Object.assign(Object.assign({}, this.deviceInfo), deviceInfo));
            }
            detach(reportError) {
                if (!this.lensCore)
                    return Promise.reject(createNotAttachedError("Cannot detach"));
                if (this.subscriber.onDetach)
                    return this.subscriber.onDetach(reportError);
            }
            setRenderSize(width, height) {
                if (!this.lensCore)
                    return Promise.reject(createNotAttachedError("Cannot setRenderSize"));
                const target = { width, height };
                return this.lensCore.setRenderSize({ mode: "explicit", target });
            }
            setTransform(transform) {
                if (!this.lensCore)
                    return Promise.reject(createNotAttachedError("Cannot setTransform"));
                const matrix = new Float32Array(transform.matrix);
                return this.lensCore.setInputTransform({ matrix });
            }
        },
        (() => {
            _setRenderSize_decorators = [validate_validate(isValidNumber, isValidNumber)];
            _setTransform_decorators = [validate_validate(isTransform2D)];
            __esDecorate(_a, null, _setRenderSize_decorators, { kind: "method", name: "setRenderSize", static: false, private: false, access: { has: obj => "setRenderSize" in obj, get: obj => obj.setRenderSize } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setTransform_decorators, { kind: "method", name: "setTransform", static: false, private: false, access: { has: obj => "setTransform" in obj, get: obj => obj.setTransform } }, null, _instanceExtraInitializers);
        })(),
        _a;
})();

//# sourceMappingURL=CameraKitSource.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/Action.js


var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription));

//# sourceMappingURL=Action.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js

var intervalProvider = {
    setInterval: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
            return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearInterval: function (handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=intervalProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js




var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
        if (delay === void 0) { delay = 0; }
        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay != null && this.delay === delay && this.pending === false) {
            return id;
        }
        if (id != null) {
            intervalProvider.clearInterval(id);
        }
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = e ? e : new Error('Scheduled action threw falsy error');
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function () {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            arrRemove(actions, this);
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}(Action));

//# sourceMappingURL=AsyncAction.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Scheduler.js

var Scheduler = (function () {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = dateTimestampProvider.now;
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js


var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions.shift()));
        this._active = false;
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

//# sourceMappingURL=AsyncScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/async.js


var asyncScheduler = new AsyncScheduler(AsyncAction);
var async_async = asyncScheduler;
//# sourceMappingURL=async.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/buffer.js




function buffer(closingNotifier) {
    return operate(function (source, subscriber) {
        var currentBuffer = [];
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return currentBuffer.push(value); }, function () {
            subscriber.next(currentBuffer);
            subscriber.complete();
        }));
        innerFrom_innerFrom(closingNotifier).subscribe(createOperatorSubscriber(subscriber, function () {
            var b = currentBuffer;
            currentBuffer = [];
            subscriber.next(b);
        }, noop));
        return function () {
            currentBuffer = null;
        };
    });
}
//# sourceMappingURL=buffer.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js



function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = asyncScheduler; }
    return operate(function (source, subscriber) {
        var activeTask = null;
        var lastValue = null;
        var lastTime = null;
        var emit = function () {
            if (activeTask) {
                activeTask.unsubscribe();
                activeTask = null;
                var value = lastValue;
                lastValue = null;
                subscriber.next(value);
            }
        };
        function emitWhenIdle() {
            var targetTime = lastTime + dueTime;
            var now = scheduler.now();
            if (now < targetTime) {
                activeTask = this.schedule(undefined, targetTime - now);
                subscriber.add(activeTask);
                return;
            }
            emit();
        }
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            lastValue = value;
            lastTime = scheduler.now();
            if (!activeTask) {
                activeTask = scheduler.schedule(emitWhenIdle, dueTime);
                subscriber.add(activeTask);
            }
        }, function () {
            emit();
            subscriber.complete();
        }, undefined, function () {
            lastValue = activeTask = null;
        }));
    });
}
//# sourceMappingURL=debounceTime.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/observable-operators/debounceTimeAfter.js

function debounceTimeAfter(amount, duration, scheduler = asyncScheduler) {
    return (source) => {
        return new Observable_Observable((subscriber) => {
            let iterationCount = 0;
            return source
                .pipe(tap((value) => {
                iterationCount++;
                if (iterationCount <= amount) {
                    subscriber.next({ type: "initial", value });
                }
            }), buffer(source.pipe(debounceTime(duration, scheduler))), tap((values) => {
                if (iterationCount > amount) {
                    subscriber.next({ type: "debounced", values: values.slice(amount) });
                }
                iterationCount = 0;
            }))
                .subscribe();
        });
    };
}
//# sourceMappingURL=debounceTimeAfter.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/media-sources/MediaStreamSource.js







const MediaStreamSource_defaultOptions = Object.assign(Object.assign({}, defaultDeviceInfo), { transform: Transform2D.Identity, disableSourceAudio: false });
function closeWorklet(worklet) {
    if (!worklet)
        return;
    worklet.port.close();
    worklet.port.onmessage = null;
    worklet.disconnect();
}
function closeAudioContext(audioContext) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        if (!audioContext || audioContext.state === "closed")
            return;
        return audioContext.close();
    });
}
function handleAudioProcessingErrors(errors, reportError) {
    return errors
        .pipe(debounceTimeAfter(1, 1000), map((event) => {
        if (event.type === "initial") {
            reportError(new Error("The first audio processing error before debouncing.", { cause: event.value }));
        }
        else if (event.type === "debounced") {
            const errorMessages = [...new Set(event.values.map(stringifyErrorMessage))].join("\n");
            reportError(new Error(`Debounced ${event.values.length} audio processing errors.`, {
                cause: new Error(errorMessages),
            }));
        }
    }))
        .subscribe();
}
function createMediaStreamSource(stream, options = {}) {
    var _a;
    const { facingMode } = stream.getVideoTracks().length > 0 ? stream.getVideoTracks()[0].getSettings() : { facingMode: undefined };
    const detectedCameraType = facingMode === "user" || facingMode === "environment" ? facingMode : undefined;
    const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, MediaStreamSource_defaultOptions), copyDefinedProperties(options)), { cameraType: (_a = options.cameraType) !== null && _a !== void 0 ? _a : detectedCameraType });
    const enableSourceAudio = stream.getAudioTracks().length > 0 && !optionsWithDefaults.disableSourceAudio;
    const simulateStereoAudio = true;
    const sampleRate = 44100;
    let audioContext = undefined;
    let audioSource = undefined;
    let worklet = undefined;
    let microphoneRecorderUrl;
    if (enableSourceAudio) {
        const microphoneRecorderWorklet = `
        class MicrophoneWorkletProcessor extends AudioWorkletProcessor {
            process(inputs, outputs, parameters) {
                this.port.postMessage({
                    eventType: 'data',
                    buffer: inputs
                });
                return true;
            }
        }
        registerProcessor('microphone-worklet', MicrophoneWorkletProcessor);`;
        const microphoneRecorderBlob = new Blob([microphoneRecorderWorklet], {
            type: "application/javascript",
        });
        microphoneRecorderUrl = URL.createObjectURL(microphoneRecorderBlob);
    }
    let audioProcessingErrorSubscription = undefined;
    return new CameraKitSource_CameraKitSource({ media: stream }, {
        onAttach: (source, lensCore, reportError) => tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield source.setTransform(optionsWithDefaults.transform);
            if (enableSourceAudio) {
                const audioProcessingErrors = new Subject();
                audioProcessingErrorSubscription = handleAudioProcessingErrors(audioProcessingErrors, reportError);
                yield lensCore.setAudioParameters({
                    parameters: {
                        numChannels: simulateStereoAudio ? 2 : 1,
                        sampleRate,
                    },
                });
                try {
                    closeWorklet(worklet);
                    audioSource === null || audioSource === void 0 ? void 0 : audioSource.disconnect();
                    yield closeAudioContext(audioContext);
                }
                catch (error) {
                    reportError(errorHelpers_ensureError(error));
                }
                audioContext = new AudioContext();
                audioSource = audioContext.createMediaStreamSource(stream);
                const scopedAudioSource = audioSource;
                audioContext.audioWorklet
                    .addModule(microphoneRecorderUrl)
                    .then(() => {
                    if (audioContext) {
                        worklet = new AudioWorkletNode(audioContext, "microphone-worklet");
                        scopedAudioSource.connect(worklet);
                        worklet.connect(audioContext.destination);
                        worklet.port.onmessage = (e) => {
                            if (e.data.eventType === "data") {
                                const leftSamples = e.data.buffer[0][0];
                                if (!leftSamples)
                                    return;
                                let inputBuffers = [leftSamples];
                                if (simulateStereoAudio) {
                                    const rightSamples = e.data.buffer[0].length > 1 ? e.data.buffer[0][1] : leftSamples.slice();
                                    inputBuffers.push(rightSamples);
                                }
                                lensCore
                                    .processAudioSampleBuffer({ input: inputBuffers })
                                    .catch((error) => audioProcessingErrors.next(error));
                            }
                        };
                    }
                })
                    .catch((error) => {
                    reportError(error);
                });
            }
        }),
        onDetach: (reportError) => tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (worklet) {
                closeWorklet(worklet);
                worklet = undefined;
            }
            if (audioSource) {
                audioSource.disconnect();
                audioSource = undefined;
            }
            if (audioContext) {
                yield closeAudioContext(audioContext).catch(reportError);
                audioContext = undefined;
            }
            if (audioProcessingErrorSubscription) {
                audioProcessingErrorSubscription.unsubscribe();
                audioProcessingErrorSubscription = undefined;
            }
        }),
    }, optionsWithDefaults);
}
//# sourceMappingURL=MediaStreamSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/media-sources/VideoSource.js


const VideoSource_defaultOptions = Object.assign(Object.assign({}, defaultDeviceInfo), { trackingData: new ArrayBuffer(0) });
function createVideoSource(video, options = {}) {
    const { trackingData } = Object.assign(Object.assign({}, VideoSource_defaultOptions), copyDefinedProperties(options));
    const replayTrackingData = trackingData.byteLength > 0 ? { buffer: trackingData } : undefined;
    return new CameraKitSource_CameraKitSource({
        media: video,
        replayTrackingData,
    }, {}, options);
}
//# sourceMappingURL=VideoSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/logger/logEntries.js


const logEntriesFactory = Injectable("logEntries", () => resetLogger().asObservable());
//# sourceMappingURL=logEntries.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/LensPerformanceMeasurement.js
const getDefaultFrameMetricsState = () => ({
    avgFps: 0,
    averageProcessingTime: 0,
    n: 0,
    processingTimeBuckets: new Uint32Array(frameProcessingTimeMedianMax + 1),
    procFrameCount: 0,
    procFrameMean: 0,
    procFrameD2: 0,
});
const frameDurationThreshold = 1;
const frameProcessingTimeMedianMax = 200;
class LensPerformanceMeasurement {
    constructor(instances) {
        this.instances = instances;
        this.state = Object.assign({}, getDefaultFrameMetricsState());
        this.instances.add(this);
    }
    update(processingTimeMs) {
        this.computeRunningStats(processingTimeMs);
    }
    measure() {
        let median = 0;
        let count = 0;
        for (; median < this.state.processingTimeBuckets.length; median++) {
            count += this.state.processingTimeBuckets[median];
            if (count >= (this.state.n + 1) / 2)
                break;
        }
        return {
            avgFps: this.state.avgFps,
            lensFrameProcessingTimeMsAvg: this.state.procFrameMean,
            lensFrameProcessingTimeMsStd: Math.sqrt(this.state.procFrameD2 / this.state.procFrameCount),
            lensFrameProcessingTimeMsMedian: this.state.n > 0 ? median : 0,
            lensFrameProcessingN: this.state.n,
        };
    }
    reset() {
        this.state = Object.assign({}, getDefaultFrameMetricsState());
    }
    end() {
        this.instances.delete(this);
    }
    computeRunningStats(processingTimeMs) {
        const delta = processingTimeMs - this.state.procFrameMean;
        this.state.procFrameCount += 1;
        this.state.procFrameMean += delta / this.state.procFrameCount;
        const delta2 = processingTimeMs - this.state.procFrameMean;
        this.state.procFrameD2 += delta * delta2;
        if (this.priorFrameCompletedTime === undefined) {
            this.priorFrameCompletedTime = performance.now();
        }
        else {
            const frameDurationSec = (performance.now() - this.priorFrameCompletedTime) / 1000;
            if (frameDurationSec < frameDurationThreshold) {
                this.state.avgFps = (this.state.avgFps + 1 / frameDurationSec) / 2;
            }
            this.priorFrameCompletedTime = performance.now();
        }
        this.state.n++;
        this.state.processingTimeBuckets[Math.min(Math.round(processingTimeMs), frameProcessingTimeMedianMax)]++;
    }
}
//# sourceMappingURL=LensPerformanceMeasurement.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/LensPerformanceMetrics.js




const LensPerformanceMetrics_logger = getLogger("RenderingMetrics");
let LensPerformanceMetrics = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _beginMeasurement_decorators;
    return _a = class LensPerformanceMetrics {
            constructor(lensCore) {
                this.lensCore = (__runInitializers(this, _instanceExtraInitializers), lensCore);
                this.measurementInstances = new Set();
                this.lensCore
                    .setOnFrameProcessedCallback({
                    onFrameProcessed: ({ processingTimeMs }) => {
                        try {
                            for (const measurement of this.measurementInstances.values()) {
                                measurement.update(processingTimeMs);
                            }
                        }
                        catch (error) {
                            LensPerformanceMetrics_logger.error(error);
                        }
                    },
                })
                    .catch((error) => LensPerformanceMetrics_logger.error(`Failed registering setOnFrameProcessedCallback with error: ${error.message}`));
            }
            beginMeasurement() {
                return new LensPerformanceMeasurement(this.measurementInstances);
            }
        },
        (() => {
            _beginMeasurement_decorators = [errorLoggingDecorator(LensPerformanceMetrics_logger)];
            __esDecorate(_a, null, _beginMeasurement_decorators, { kind: "method", name: "beginMeasurement", static: false, private: false, access: { has: obj => "beginMeasurement" in obj, get: obj => obj.beginMeasurement } }, null, _instanceExtraInitializers);
        })(),
        _a;
})();
//# sourceMappingURL=LensPerformanceMetrics.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js




function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return function (source) {
            return source.pipe(exhaustMap(function (a, i) { return innerFrom_innerFrom(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
        };
    }
    return operate(function (source, subscriber) {
        var index = 0;
        var innerSub = null;
        var isComplete = false;
        source.subscribe(createOperatorSubscriber(subscriber, function (outerValue) {
            if (!innerSub) {
                innerSub = createOperatorSubscriber(subscriber, undefined, function () {
                    innerSub = null;
                    isComplete && subscriber.complete();
                });
                innerFrom_innerFrom(project(outerValue, index++)).subscribe(innerSub);
            }
        }, function () {
            isComplete = true;
            !innerSub && subscriber.complete();
        }));
    });
}
//# sourceMappingURL=exhaustMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js



function switchMap(project, resultSelector) {
    return operate(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            innerFrom_innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}
//# sourceMappingURL=switchMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var argsArgArrayOrObject_isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject_argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (argsArgArrayOrObject_isArray(first_1)) {
            return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
            var keys = getKeys(first_1);
            return {
                args: keys.map(function (key) { return first_1[key]; }),
                keys: keys,
            };
        }
    }
    return { args: args, keys: null };
}
function isPOJO(obj) {
    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}
//# sourceMappingURL=argsArgArrayOrObject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createObject.js
function createObject_createObject(keys, values) {
    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
}
//# sourceMappingURL=createObject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js







function forkJoin() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = args_popResultSelector(args);
    var _a = argsArgArrayOrObject_argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
    var result = new Observable_Observable(function (subscriber) {
        var length = sources.length;
        if (!length) {
            subscriber.complete();
            return;
        }
        var values = new Array(length);
        var remainingCompletions = length;
        var remainingEmissions = length;
        var _loop_1 = function (sourceIndex) {
            var hasValue = false;
            innerFrom_innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (!hasValue) {
                    hasValue = true;
                    remainingEmissions--;
                }
                values[sourceIndex] = value;
            }, function () { return remainingCompletions--; }, undefined, function () {
                if (!remainingCompletions || !hasValue) {
                    if (!remainingEmissions) {
                        subscriber.next(keys ? createObject_createObject(keys, values) : values);
                    }
                    subscriber.complete();
                }
            }));
        };
        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
            _loop_1(sourceIndex);
        }
    });
    return resultSelector ? result.pipe(mapOneOrManyArgs_mapOneOrManyArgs(resultSelector)) : result;
}
//# sourceMappingURL=forkJoin.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/LensPersistenceStore.js






const LensPersistenceStore_logger = getLogger("LensPersistenceStore");
const lensPersistenceStoreFactory = Injectable("lensPersistenceStore", [lensCoreFactory.token], (lensCore) => {
    const db = new IndexedDBPersistence({ databaseName: "lensPersistenceStore" });
    lensCore.registerSavePersistentStoreCallback((id, data) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        try {
            yield db.store(id, data);
        }
        catch (error) {
            LensPersistenceStore_logger.error(persistentStoreError(`Error occurred while storing data for lens ${id}.`, error));
        }
    }));
    return db;
});
//# sourceMappingURL=LensPersistenceStore.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/localization.js

function makeTemplate(keys) {
    return (template) => (values) => {
        const tag = (readonlyStrings) => {
            const strings = readonlyStrings.slice();
            return [strings.shift()]
                .concat(keys.map((key) => { var _a; return `${(_a = values[key]) !== null && _a !== void 0 ? _a : ""}${strings.shift()}`; }))
                .concat(strings)
                .join("");
        };
        return template(tag);
    };
}
const legalPromptMessage = makeTemplate(["privacyPolicyUrl", "termsOfServiceUrl", "learnMoreUrl"]);
const allStrings = {
    "en-US": {
        legalPromptMessage: legalPromptMessage((tag) => tag `By using Lenses, you acknowledge reading Snap’s <a href="${0}" target="_blank">Privacy Policy</a> and agree to Snap’s <a href="${0}" target="_blank">Terms of Service</a>. Some lenses use information about your face, hands and voice to work. <a href="${0}" target="_blank">Learn More</a>, and if you want to agree and continue, tap below.`),
        legalPromptAccept: `I Agree`,
        legalPromptReject: `Dismiss`,
        legalPromptTermsOfService: `Terms of Service`,
        legalPromptVariantGMessage: `This feature uses information about face(s), hands and voice(s) detected by the camera and microphone to work. With this feature, you can apply fun and useful augmented reality effects on top of selfies and images. Our camera uses technology to locate certain features (like where your hands, eyes, and nose are) and uses that information to accurately position the feature with the image sensed by the camera. Any information that is collected will be deleted as soon as possible (typically soon after the app is closed) and always within no more than three years.<br/><br/>If you want to agree and continue, tap below.`,
        legalPromptVariantGAdultOrChild: `Are you an adult or child?`,
        legalPromptVariantGFindYourParent: `Please find your parent or legal guardian.`,
        legalPromptVariantGIAmGuardian: `I am the child\'s guardian`,
        legalPromptVariantGCancel: `Cancel`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Child`,
    },
    ar: {
        legalPromptMessage: legalPromptMessage((tag) => tag `باستخدامك للعدسات، فأنت تقر بقراءتك <a href="${0}" target="_blank">لسياسة الخصوصية</a> وتوافق على <a href="${0}" target="_blank">شروط الخدمة</a> الخاصة بسناب. تستخدم بعض العدسات معلومات عن وجهك ويديك وصوتك لكي تعمل. <a href="${0}" target="_blank">تعرّف على مزيد من المعلومات</a>، وإذا أردت الموافقة والاستمرار فالمس أدناه.`),
        legalPromptAccept: `أنا أوافق`,
        legalPromptReject: `تجاهل`,
        legalPromptTermsOfService: `شروط الخدمة`,
        legalPromptVariantGMessage: `تستخدم هذه الميزة معلومات تتعلق بالوجه(الوجوه) واليدين والصوت(الأصوات) تكتشفها الكاميرا والميكروفون للعمل. وباستخدام هذه الميزة، يمكنك تطبيق تأثيرات الواقع المُعزّز الممتعة والمفيدة على صور السيلفي والصور. تستخدم الكاميرا لدينا التكنولوجيا لتحديد مكان ملامح معيَّنة (مثل مكان وجود يديك وعينيك وأنفك) وتستخدم هذه المعلومات لتحديد مكان الملامح بدقة مع الصورة التي تستشعرها الكاميرا. سيتم حذف أي معلومات يتم جمعها في أقرب وقت ممكن (عادةً بعد إغلاق التطبيق بفترة وجيزة) وخلال فترة لا تزيد عن ثلاث سنوات دائمًا.<br/><br/>إذا كنت تريد الموافقة والمتابعة، فالمس أدناه.`,
        legalPromptVariantGAdultOrChild: `هل أنت شخص بالغ أم طفل؟`,
        legalPromptVariantGFindYourParent: `يُرجى البحث عن وليّ أمرك أو الوصي القانوني.`,
        legalPromptVariantGIAmGuardian: `أنا الوصي على الطفل`,
        legalPromptVariantGCancel: `إلغاء`,
        legalPromptVariantGAdult: `شخص بالغ`,
        legalPromptVariantGChild: `طفل`,
    },
    "bn-BD": {
        legalPromptMessage: legalPromptMessage((tag) => tag `লেন্সগুলি ব্যবহার করার মাধ্যমে আপনি Snap-এর <a href="${0}" target="_blank">গোপনীয়তা নীতি</a> পড়েছেন এবং Snap-এর <a href="${0}" target="_blank">পরিষেবার শর্তাবলী</a>-তে সম্মত হচ্ছেন বলে স্বীকার করছেন। কিছু কিছু লেন্স কাজ করার জন্য আপনার মুখ, হাত ও কন্ঠস্বর ব্যবহার করে। <a href="${0}" target="_blank">আরো জানুন</a> এবং আপনি যদি সম্মত হতে ও চালিয়ে যেতে চান তবে নিচে ট্যাপ করুন।`),
        legalPromptAccept: `আমি সম্মতি দিচ্ছি`,
        legalPromptReject: `খারিজ করুন`,
        legalPromptTermsOfService: `পরিষেবার শর্তাবলী`,
        legalPromptVariantGMessage: `কাজ করতে এই বৈশিষ্ট্যটি ক্যামেরা এবং মাইক্রোফোন দ্বারা শনাক্ত করা মুখ, হাত এবং কণ্ঠস্বর সম্পর্কে তথ্য ব্যবহার করে। এই বৈশিষ্ট্যটি দিয়ে আপনি সেলফি এবং ছবির উপর মজার এবং উপযোগী অগমেন্টেড রিয়ালিটির ইফেক্ট প্রয়োগ করতে পারবেন। আমাদের ক্যামেরা নির্দিষ্ট বৈশিষ্ট্যগুলি (যেমন আপনার হাত, চোখ এবং নাক কোথায়) শনাক্ত করতে প্রযুক্তি ব্যবহার করে এবং ক্যামেরা দ্বারা আঁচ করা ছবির সাথে বৈশিষ্ট্যটিকে সঠিকভাবে অবস্থান করতে সেই তথ্য ব্যবহার করে। সংগৃহীত যেকোনো তথ্য যত তাড়াতাড়ি সম্ভব মুছে ফেলা হবে (সাধারণত অ্যাপটি বন্ধ হওয়ার পরেই) এবং কোনো সময়েই তা তিন বছরের বেশি রাখা হবে না।<br/><br/>আপনি যদি সম্মত হতে চান এবং চালিয়ে যেতে চান তাহলে নিচে ট্যাপ করুন।`,
        legalPromptVariantGAdultOrChild: `আপনি একজন প্রাপ্তবয়স্ক না শিশু?`,
        legalPromptVariantGFindYourParent: `অনুগ্রহ করে আপনার পিতামাতা বা আইনি অভিভাবককে খুঁজুন।`,
        legalPromptVariantGIAmGuardian: `আমি শিশুটির অভিভাবক`,
        legalPromptVariantGCancel: `বাতিল করুন`,
        legalPromptVariantGAdult: `প্রাপ্তবয়স্ক`,
        legalPromptVariantGChild: `শিশু`,
    },
    "bn-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `লেন্স ব্যবহার করে, আপনি Snap\'এর \"<a href="${0}" target="_blank">\"গোপনীয়তার নীতি</a> পড়েছেন এবং Snap\'এর <a href="${0}" target="_blank">পরিষেবার শর্তাবলী</a>-তে সম্মত হচ্ছেন বলে স্বীকার করছেন। কিছু কিছু লেন্স কাজ করার জন্য আপনার মুখ, হাত ও কন্ঠস্বরের তথ্য ব্যবহার করে। <a href="${0}" target="_blank">আরও জানুন</a> এবং আপনি সম্মত হলে ও চালিয়ে যেতে চাইলে নিচে ট্যাপ করুন।`),
        legalPromptAccept: `আমি সম্মত`,
        legalPromptReject: `খারিজ করুন`,
        legalPromptTermsOfService: `পরিষেবার শর্তাবলী`,
        legalPromptVariantGMessage: `কাজ করার জন্য এই বৈশিষ্ট্যটি ক্যামেরা এবং মাইক্রোফোন দ্বারা শনাক্ত করা মুখ(গুলি), হাত এবং ভয়েস(গুলি) সম্পর্কিত তথ্য ব্যবহার করে৷ এই বৈশিষ্ট্যটির সাহায্যে, আপনি সেলফি এবং ছবিগুলির উপরে মজাদার এবং দরকারী অগমেন্টেড রিয়েলিটি প্রভাব প্রয়োগ করতে পারেন। আমাদের ক্যামেরা নির্দিষ্ট কিছু বৈশিষ্ট্য শনাক্ত করতে প্রযুক্তি ব্যবহার করে (যেমন আপনার হাত, চোখ এবং নাক কোথায়) এবং ক্যামেরা দ্বারা সংবেদিত ছবির সাথে বৈশিষ্ট্যটিকে ঠিক জায়গায় বসাতে সেই তথ্য ব্যবহার সবসময়ই তিন বছরের কম সময়ের মধ্যে। <br/><br/>আপনি যদি সম্মত থাকেন এবং চালিয়ে যেতে চান, নিচে ট্যাপ করুন।`,
        legalPromptVariantGAdultOrChild: `আপনি কি একজন প্রাপ্তবয়স্ক না শিশু?`,
        legalPromptVariantGFindYourParent: `অনুগ্রহ করে আপনার মা-বাবা বা আইনী অভিভাবককে খুঁজুন।`,
        legalPromptVariantGIAmGuardian: `আমি শিশুটির অভিভাবক`,
        legalPromptVariantGCancel: `বাতিল করুন`,
        legalPromptVariantGAdult: `প্রাপ্তবয়স্ক`,
        legalPromptVariantGChild: `শিশু`,
    },
    "da-DK": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Når du anvender Linser, bekræfter du, at du har læst Snaps <a href="${0}" target="_blank">privatlivspolitik</a> og accepterer Snaps <a href="${0}" target="_blank">servicevilkår</a>. Nogle Linser bruger information om dit ansigt, dine hænder og din stemme for at fungere. <a href="${0}" target="_blank">Få mere at vide</a>, og tryk nedenfor, hvis du vil acceptere og fortsætte.`),
        legalPromptAccept: `Jeg er enig`,
        legalPromptReject: `Afvis`,
        legalPromptTermsOfService: `Servicevilkår`,
        legalPromptVariantGMessage: `Denne funktion bruger oplysninger om ansigt(er), hænder og stemme(r), der registreres af kameraet og mikrofonen, for at kunne fungere. Med denne funktion kan du anvende sjove og nyttige augmented reality-effekter på selfies og billeder. Vores kamera bruger teknologi til at finde bestemte træk (f.eks. hvor dine hænder, øjne og næse er) og bruger disse oplysninger til nøjagtigt at placere trækket i billedet, der opfanges af kameraet. Alle oplysninger, der indsamles, slettes så hurtigst som muligt (typisk kort efter, at appen lukkes) og altid inden for højst tre år.<br/><br/>Tryk herunder, hvis du accepterer og vil fortsætte.`,
        legalPromptVariantGAdultOrChild: `Er du voksen eller barn?`,
        legalPromptVariantGFindYourParent: `Find din forælder eller værge.`,
        legalPromptVariantGIAmGuardian: `Jeg er barnets værge`,
        legalPromptVariantGCancel: `Annuller`,
        legalPromptVariantGAdult: `Voksen`,
        legalPromptVariantGChild: `Barn`,
    },
    "de-DE": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Wenn du Linsen verwendet, versicherst du, dass du die <a href="${0}" target="_blank">Datenschutzbestimmungen</a> von Snap gelesen hast und den <a href="${0}" target="_blank">Servicebestimmungen</a> von Snap zustimmst. Manche Linsen verarbeiten Informationen zu deinem Gesicht, deinen Händen und deiner Stimme, um zu funktionieren. <a href="${0}" target="_blank">Hier erfährst du mehr.</a> Tippe unten, wenn du zustimmen und fortfahren möchtest.`),
        legalPromptAccept: `Zustimmen`,
        legalPromptReject: `Ablehnen`,
        legalPromptTermsOfService: `Servicebestimmungen`,
        legalPromptVariantGMessage: `Diese Funktion verwendet Informationen über Gesichter, Hände und Stimmen, die von der Kamera und dem Mikrofon erkannt werden. Mit dieser Funktion kannst du lustige und nützliche Augmented Reality-Effekte auf Selfies und Bilder anwenden. Unsere Kamera nutzt Technologien, um bestimmte Merkmale zu lokalisieren (z. B. wo sich deine Hände, Augen und Nase befinden), und verwendet diese Informationen, um dieses Merkmal dann exakt über das von der Kamera erfasste Bild zu positionieren. Alle gesammelten Informationen werden so schnell wie möglich gelöscht (in der Regel kurz nach dem Schließen der App), spätestens aber innerhalb von drei Jahren.<br/><br/>Tippe unten, um zuzustimmen und fortzufahren.`,
        legalPromptVariantGAdultOrChild: `Bist du erwachsen oder minderjährig?`,
        legalPromptVariantGFindYourParent: `Bitte hole ein Elternteil oder Erziehungsberechtigten.`,
        legalPromptVariantGIAmGuardian: `Ich bin der Erziehungsberechtigte des Kindes.`,
        legalPromptVariantGCancel: `Abbrechen`,
        legalPromptVariantGAdult: `Erwachsen`,
        legalPromptVariantGChild: `Minderjährig`,
    },
    "el-GR": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Χρησιμοποιώντας τους Φακούς, αναγνωρίζεις ότι έχεις διαβάσει την <a href="${0}" target="_blank">Πολιτική απορρήτου</a> του Snap και ότι συμφωνείς με τους <a href="${0}" target="_blank">Όρους υπηρεσίας</a> του Snap. Ορισμένοι Φακοί χρησιμοποιούν πληροφορίες σχετικά με το πρόσωπο, τα χέρια και τη φωνή σου για να λειτουργήσουν. <a href="${0}" target="_blank">Μάθε περισσότερα</a> και αν θέλεις να συμφωνήσεις και να συνεχίσεις, άγγιξε παρακάτω.`),
        legalPromptAccept: `Συμφωνώ`,
        legalPromptReject: `Απόρριψη`,
        legalPromptTermsOfService: `Όροι υπηρεσίας`,
        legalPromptVariantGMessage: `Αυτή η λειτουργία χρησιμοποιεί πληροφορίες σχετικά με τα πρόσωπα, τα χέρια και τις φωνές που ανιχνεύονται από την κάμερα και το μικρόφωνο, προκειμένου να λειτουργήσει. Με αυτήν τη λειτουργία μπορείς να εφαρμόσεις διασκεδαστικά και χρήσιμα εφέ επαυξημένης πραγματικότητας σε σέλφι και εικόνες. Η κάμερά μας χρησιμοποιεί την τεχνολογία για να εντοπίσει ορισμένα χαρακτηριστικά (όπως που βρίσκονται τα χέρια, τα μάτια και η μύτη σου) και αξιοποιεί αυτές τις πληροφορίες για να τοποθετήσει με ακρίβεια τη λειτουργία στην εικόνα που καταγράφεται από την κάμερα. Όλες οι πληροφορίες που συλλέγονται διαγράφονται το συντομότερο δυνατό (συνήθως λίγο μετά το κλείσιμο της εφαρμογής) και σε κάθε περίπτωση σε όχι παραπάνω από τρία χρόνια.<br/><br/>Αν συμφωνείς και θέλεις να συνεχίσεις, άγγιξε παρακάτω.`,
        legalPromptVariantGAdultOrChild: `Είσαι ενήλικας ή παιδί;`,
        legalPromptVariantGFindYourParent: `Βρες τον γονέα ή τον νόμιμο κηδεμόνα σου.`,
        legalPromptVariantGIAmGuardian: `Είμαι ο κηδεμόνας του παιδιού`,
        legalPromptVariantGCancel: `Άκυρο`,
        legalPromptVariantGAdult: `Ενήλικος`,
        legalPromptVariantGChild: `Παιδί`,
    },
    "en-GB": {
        legalPromptMessage: legalPromptMessage((tag) => tag `By using Lenses, you acknowledge reading Snap\’s <a href="${0}" target="_blank">Privacy Policy</a> and agree to Snap\’s <a href="${0}" target="_blank">Terms of Service</a>. Some Lenses use information about your face, hands and voice to work. <a href="${0}" target="_blank">Learn More</a>, and if you want to agree and continue, tap below.`),
        legalPromptAccept: `I agree`,
        legalPromptReject: `Dismiss`,
        legalPromptTermsOfService: `Terms of Service`,
        legalPromptVariantGMessage: `This feature uses information about face(s), hands and voice(s) detected by the camera and microphone to work. With this feature, you can apply fun and useful augmented reality effects on top of selfies and images. Our camera uses technology to locate certain features (like where your hands, eyes and nose are) and uses that information to accurately position the feature with the image sensed by the camera. Any information that is collected will be deleted as soon as possible (typically soon after the app is closed) and always within no more than three years.<br/><br/>If you want to agree and continue, tap below.`,
        legalPromptVariantGAdultOrChild: `Are you an adult or child?`,
        legalPromptVariantGFindYourParent: `Please find your parent or legal guardian.`,
        legalPromptVariantGIAmGuardian: `I am the child\’s guardian`,
        legalPromptVariantGCancel: `Cancel`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Child`,
    },
    es: {
        legalPromptMessage: legalPromptMessage((tag) => tag `Al usar Lentes, confirmas que leíste la <a href="${0}" target="_blank">Política de privacidad</a> de Snap y aceptas las <a href="${0}" target="_blank">Condiciones de servicio</a>. Algunos Lentes funcionan usando información acerca de tu cara, tus manos y tu voz. <a href="${0}" target="_blank">Obtén más información</a> y, si quieres aceptar y continuar, toca a continuación.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Ignorar`,
        legalPromptTermsOfService: `Condiciones de servicio`,
        legalPromptVariantGMessage: `Esta función utiliza información sobre caras, manos y voces detectadas por la cámara y el micrófono para funcionar. Con esta función, puedes aplicar divertidos y útiles efectos de realidad aumentada sobre selfies e imágenes. Nuestra cámara utiliza tecnología para localizar ciertos rasgos (como dónde están las manos, los ojos y la nariz) y utiliza dicha información para posicionar correctamente el rasgo sobre la imagen detectada por la cámara. Toda la información recopilada se eliminará tan pronto como sea posible (por lo general, poco después de que se cierre la app), siempre en un plazo menor a tres años.<br/><br/>Para aceptar y continuar, toca a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Eres mayor o menor de edad?`,
        legalPromptVariantGFindYourParent: `Busca a tu padre, madre o tutor legal.`,
        legalPromptVariantGIAmGuardian: `Soy el tutor legal del menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Mayor de edad`,
        legalPromptVariantGChild: `Menor de edad`,
    },
    "es-AR": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Al usar los Lentes, confirmás que leíste la <a href="${0}" target="_blank">Política de privacidad</a> de Snap y que aceptás sus <a href="${0}" target="_blank">Condiciones de servicio</a>. Algunos Lentes usan información sobre tu cara, tus manos y tu voz para funcionar. <a href="${0}" target="_blank">Obtené más información</a>, y si querés aceptar y continuar, tocá el botón que aparece más abajo.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Omitir`,
        legalPromptTermsOfService: `Condiciones de servicio`,
        legalPromptVariantGMessage: `Esta función utiliza la información sobre caras, manos y voces detectadas por la cámara y el micrófono. Con esta función, podés aplicar divertidos y útiles efectos de realidad aumentada sobre selfies e imágenes. Nuestra cámara utiliza tecnología para localizar ciertos rasgos (como dónde están las manos, los ojos y la nariz) y utiliza esa información para posicionar con precisión el rasgo con la imagen detectada por la cámara. Toda la información recopilada se eliminará lo antes posible (normalmente poco después de cerrar la aplicación) y siempre en un plazo máximo de tres años.<br/><br/>Si deseas aceptar y continuar, tocá a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Sos mayor o menor de edad?`,
        legalPromptVariantGFindYourParent: `Buscá a tu padre, madre o tutor legal.`,
        legalPromptVariantGIAmGuardian: `Soy el tutor legal del menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Mayor de edad`,
        legalPromptVariantGChild: `Menor de edad`,
    },
    "es-ES": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Al usar las Lentes, reconoces haber leído la <a href="${0}" target="_blank">Política de privacidad</a> y aceptas los <a href="${0}" target="_blank">Términos del servicio</a> de Snap. Algunas Lentes funcionan utilizando información de tu cara, tus manos o tu voz. Puedes obtener <a href="${0}" target="_blank">más información</a>, y si quieres aceptar y continuar, toca el botón a continuación.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Descartar`,
        legalPromptTermsOfService: `Términos del servicio`,
        legalPromptVariantGMessage: `Para su funcionamiento, esta función hace uso de los datos sobre la cara, las manos y las voces detectados por la cámara y el micrófono. Con ella, puedes aplicar efectos de realidad aumentada, tanto útiles como divertidos, en selfies e imágenes. Nuestra cámara utiliza la tecnología para localizar determinados elementos (como la posición de las manos, los ojos o la nariz) y utiliza esta información para colocar el elemento sobre la imagen de forma fiel, según lo detectado por la cámara. Cualquier información que se recopile se eliminará lo antes posible (normalmente, al cerrar la aplicación) y nunca se almacenará durante más de tres años.<br/><br/>Si quieres aceptar y continuar, toca a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Eres una persona adulta o eres menor?`,
        legalPromptVariantGFindYourParent: `Habla con tu padre, madre o tutor/a legal.`,
        legalPromptVariantGIAmGuardian: `Soy el tutor o tutora legal del menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Menor`,
    },
    "es-MX": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Al usar Lentes, confirmas que leíste la <a href="${0}" target="_blank">Política de privacidad</a> y aceptas los <a href="${0}" target="_blank">Términos y condiciones de servicio</a> de Snap. Algunos lentes usan información sobre tu cara, manos o voz para funcionar. <a href="${0}" target="_blank">Obtén más información</a> y, si quieres aceptarlo, toca a continuación.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Ignorar`,
        legalPromptTermsOfService: `Términos y condiciones de servicio`,
        legalPromptVariantGMessage: `Esta característica utiliza información sobre la(s) cara(s), manos y voz o voces detectadas por la cámara y el micrófono para funcionar. Con ella, puedes aplicar efectos de realidad aumentada útiles y divertidos a selfies e imágenes. Nuestra cámara usa tecnología para localizar ciertos rasgos (como dónde están tus manos, ojos y nariz) y utiliza esa información para posicionar con precisión esta característica con la imagen que la cámara percibió. Toda la información que se recopile se eliminará lo más pronto posible (por lo general, poco después de cerrar la app) y nunca excederá los tres días.<br/><br/>Si quieres aceptar y proseguir, toca a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Eres mayor o menor de edad?`,
        legalPromptVariantGFindYourParent: `Busca a tu madre, padre o quien tenga tu custodia legal.`,
        legalPromptVariantGIAmGuardian: `Tengo la custodia de la persona menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Persona adulta`,
        legalPromptVariantGChild: `Persona menor`,
    },
    "fi-FI": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Käyttämällä tehosteita ilmaiset lukeneesi Snapin <a href="${0}" target="_blank">tietosuojaselosteen</a> ja hyväksyväsi Snapin <a href="${0}" target="_blank">palveluehdot</a>. Jotkin tehosteet käyttävät toimintaan tietoja kasvoistasi, käsistäsi ja äänestäsi. <a href="${0}" target="_blank">Lisätietoja saat täältä</a>. Hyväksy ja jatka napauttamalla alla olevaa painiketta.`),
        legalPromptAccept: `Hyväksyn`,
        legalPromptReject: `Hylkää`,
        legalPromptTermsOfService: `Palveluehdot`,
        legalPromptVariantGMessage: `Tämä ominaisuus käyttää toimiakseen tietoja kameran ja mikrofonin havaitsemista kasvoista, käsistä ja äänistä. Ominaisuudella voit lisätä hauskoja ja hyödyllisiä lisätyn todellisuuden efektejä selfieiden ja kuvien päälle. Kameramme käyttää teknologiaa tiettyjen piirteiden paikallistamiseen (kuten käsiesi, silmiesi ja nenäsi sijaintiin) ja käyttää näitä tietoja ominaisuuden asettamiseen oikeaan kohtaan kameran havaitsemassa kuvassa. Kaikki kerätyt tiedot poistetaan mahdollisimman pian (yleensä pian sovelluksen sulkemisen jälkeen) ja aina viimeistään kolmen vuoden kuluttua.<br/><br/>Jos haluat hyväksyä ja jatkaa, napauta painiketta alla. `,
        legalPromptVariantGAdultOrChild: `Oletko aikuinen vai lapsi?`,
        legalPromptVariantGFindYourParent: `Etsi vanhempasi tai huoltajasi.`,
        legalPromptVariantGIAmGuardian: `Olen lapsen huoltaja`,
        legalPromptVariantGCancel: `Peruuta`,
        legalPromptVariantGAdult: `Aikuinen`,
        legalPromptVariantGChild: `Lapsi`,
    },
    "fil-PH": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Sa pamamagitan ng paggamit sa Lenses, kinikilala mong binasa mo ang <a href="${0}" target="_blank">Privacy Policy</a> ng Snap at sumasang-ayon ka sa <a href="${0}" target="_blank">Terms of Service</a> ng Snap. Ang ilang lens ay gumagamit ng impormasyon tungkol sa iyong mukha , mga kamay at boses para gumana. <a href="${0}" target="_blank">Alamin Pa</a>, at kung gusto mong sumang-ayon at magpatuloy, mag-tap sa ibaba.`),
        legalPromptAccept: `Sang-ayon Ako`,
        legalPromptReject: `I-dismiss`,
        legalPromptTermsOfService: `Terms of Service`,
        legalPromptVariantGMessage: `Ang feature na ito ay gumagamit ng impormasyon tungkol sa (mga) mukha, mga kamay at (mga) boses na nade-detect ng camera at microphone para gumana ito. Gamit ang feature na ito, pwede kang mag-apply ng nakakatuwa at kapaki-pakinabang na augmented reality effects sa ibabaw ng mga selfie at image. Gumagamit ang camera namin ng technology para matukoy ang mga partikular na anyo (tulad ng kung nasaan ang iyong mga kamay, mga mata, at ilong) at ginagamit nito ang impormasyong iyon para eksaktong mapwesto ang anyong iyon sa image na nase-sense ng camera. Ang anumang impormasyong kinokolekta ay ide-delete sa lalong madaling panahon (karaniwan ay maikling panahon lang matapos isara ang app) at palaging hindi lalampas nang tatlong taon.<br/><br/>Kung gusto mong sumang-ayon at magpatuloy, mag-tap sa ibaba.`,
        legalPromptVariantGAdultOrChild: `Isa ka bang adult o bata?`,
        legalPromptVariantGFindYourParent: `Pakihanap ang iyong magulang o legal guardian.`,
        legalPromptVariantGIAmGuardian: `Ako ang guardian ng bata`,
        legalPromptVariantGCancel: `I-cancel`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Bata`,
    },
    "fr-FR": {
        legalPromptMessage: legalPromptMessage((tag) => tag `En utilisant les Lenses, vous reconnaissez avoir lu la <a href="${0}" target="_blank">Politique de confidentialité</a> de Snap et vous acceptez les <a href="${0}" target="_blank">Conditions d\'utilisation du service</a> de Snap. Le fonctionnement de certaines Lenses requiert l\'utilisation d\'informations sur votre visage, vos mains et votre voix. <a href="${0}" target="_blank">En savoir plus</a>. Si vous acceptez ces conditions et souhaitez continuer, appuyez ci-dessous.`),
        legalPromptAccept: `J\'accepte`,
        legalPromptReject: `Ignorer`,
        legalPromptTermsOfService: `Conditions d\'utilisation du service`,
        legalPromptVariantGMessage: `Pour fonctionner, cette fonctionnalité utilise des informations sur le ou les visages, les mains et la ou les voix détectés par l\'appareil photo et le micro. Elle vous permet d\'appliquer des effets en réalité augmentée amusants et utiles sur vos selfies et vos images. Notre appareil photo utilise une technologie qui localise certaines caractéristiques (comme l\'emplacement de vos mains, de vos yeux et de votre nez) afin de positionner avec précision la fonctionnalité sur l\'image détectée par l\'appareil photo. Toutes les informations collectées sont supprimées dès que possible (généralement peu après la fermeture de l\'application) et toujours dans un délai maximum de trois ans.<br/><br/>Si vous souhaitez accepter et continuer, appuyez ci-dessous.`,
        legalPromptVariantGAdultOrChild: `Êtes-vous adulte ou mineur ?`,
        legalPromptVariantGFindYourParent: `Veuillez appeler votre parent ou votre tuteur·rice.`,
        legalPromptVariantGIAmGuardian: `Je suis le ou la tuteur·rice de l\'enfant.`,
        legalPromptVariantGCancel: `Annuler`,
        legalPromptVariantGAdult: `Adulte`,
        legalPromptVariantGChild: `Mineur`,
    },
    "gu-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `લેન્સનો ઉપયોગ કરીને, તમે સ્વીકારો છો કે તમે Snapની <a href="${0}" target="_blank">પ્રાઇવસી પોલિસી</a> વાંચી છે અને Snapની <a href="${0}" target="_blank">સેવાની શરતો</a> સાથે સંમત છો. કેટલાક લેન્સ કામ કરી શકે તે માટે તે તમારા ચહેરા, હાથ અને અવાજનો ઉપયોગ કરે છે. <a href="${0}" target="_blank">વધુ જાણો</a>, અને જો તમે સંમત થવા માંગતા હો, તો નીચે ટૅપ કરો.`),
        legalPromptAccept: `હું સંમત છું`,
        legalPromptReject: `બરતરફ કરો`,
        legalPromptTermsOfService: `સેવાની શરતો`,
        legalPromptVariantGMessage: `આ સુવિધા કામ કરી શકે તે માટે કૅમેરા અને માઇક્રોફોન દ્વારા શોધાયેલા ચહેરા(ઓ), હાથ અને અવાજ(જો) વિશેની માહિતીનો ઉપયોગ કરે છે. આ સુવિધા સાથે તમે સેલ્ફી અને ઇમેજની ઉપર મજેદાર અને ઉપયોગી ઑગ્મેંટેડ રિયાલીટી ઇફેક્ટ લાગુ કરી શકો છો. અમારા કૅમેરા અમુક લક્ષણો (જેમ કે તમારા હાથ, આંખો અને નાક ક્યાં છે તે)નું સ્થાન જાણવા માટે ટેક્નોલોજીનો ઉપયોગ કરે છે અને તે માહિતીનો ઉપયોગ તે લક્ષણને કૅમેરા દ્વારા શોધાયેલ ઇમેજ સાથે સ્થિત કરવા માટે કરે છે. એકત્રિત કરેલી કોઈ પણ માહિતી શક્ય તેટલી વહેલી તકે (સામાન્ય રીતે ઍપ બંધ કરવામાં આવે પછી તરત) અને હંમેશાં ત્રણ દિવસની અંદર ડિલીટ કરવામાં આવશે.<br/><br/>જો તમે સંમત થવા અને ચાલુ રાખવા માંગતા હો, તો નીચે ટૅપ કરો.`,
        legalPromptVariantGAdultOrChild: `તમે વયસ્ક છો કે બાળક?`,
        legalPromptVariantGFindYourParent: `કૃપા કરીને તમારા માતા-પિતા અથવા કાનૂની વાલીને શોધો.`,
        legalPromptVariantGIAmGuardian: `હું બાળકના વાલી છું.`,
        legalPromptVariantGCancel: `રદ કરો`,
        legalPromptVariantGAdult: `વયસ્ક`,
        legalPromptVariantGChild: `બાળક`,
    },
    "hi-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `लेंस का इस्तेमाल करके, आप स्वीकार करते हैं कि आपने Snap की <a href="${0}" target="_blank">गोपनीयता नीति</a> को पढ़ लिया है और आप Snap की <a href="${0}" target="_blank">सेवा शर्तों</a> से सहमत हैं। कुछ लेंस काम करने के लिए आपके चेहरे, हाथों और आवाज़ का इस्तेमाल करते हैं। <a href="${0}" target="_blank">और जानें</a>, और अगर आप सहमत होते हैं और जारी रखना चाहते हैं, तो नीचे टैप करें।`),
        legalPromptAccept: `मैं सहमत हूं`,
        legalPromptReject: `खारिज करें`,
        legalPromptTermsOfService: `सेवा शर्तें`,
        legalPromptVariantGMessage: `यह फ़ीचर काम करने के लिए कैमरा और माइक्रोफ़ोन द्वारा फ़ेस, हाथों और आवाज़(जों) के बारे में पहचानी गई जानकारी का इस्तेमाल करता है। इस फ़ीचर की मदद से आप सेल्फ़ी और इमेज के ऊपर मज़ेदार और उपयोगी ऑगमेंटेड रिएलिटी इफ़ेक्ट्स डाल सकते हैं। हमारा कैमरा कुछ फ़ीचर्स (जैसे कि, आपके हाथ, आंख और नाक की जगह) का पता लगाने के लिए टेक्नॉलॉजी का इस्तेमाल करता है और उस जानकारी के इस्तेमाल से खुद महसूस की गई इमेज पर फ़ीचर को सटीक जगह पर लाया जाता है। इकठ्ठा की गई किसी भी जानकारी को जल्द से जल्द (आमतौर पर ऐप बंद करते ही) और तीन सालों के अंदर हमेशा के लिए डिलीट कर दिया जाएगा।<br/><br/>अगर आप सहमत हैं और जारी रखना चाहते हैं, तो नीचे टैप करें।`,
        legalPromptVariantGAdultOrChild: `क्या आप बच्चे हैं या व्यस्क?`,
        legalPromptVariantGFindYourParent: `प्लीज़ अपने माता-पिता या कानूनी गार्जियन का पता लगाएं।`,
        legalPromptVariantGIAmGuardian: `मैं बच्चे का गार्जियन हूं`,
        legalPromptVariantGCancel: `रद्द करें`,
        legalPromptVariantGAdult: `वयस्क`,
        legalPromptVariantGChild: `बच्चा`,
    },
    "id-ID": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Dengan menggunakan Lensa, kamu menyatakan bahwa kamu sudah membaca <a href="${0}" target="_blank">Kebijakan Privasi</a> Snap dan menyetujui <a href="${0}" target="_blank">Ketentuan Layanan</a> Snap. Beberapa lensa menggunakan informasi tentang wajah, tangan, dan suaramu agar bisa berfungsi dengan baik. <a href="${0}" target="_blank">Pelajari Selengkapnya</a>, dan silakan ketuk tombol di bawah jika kamu ingin menyetujuinya dan melanjutkan.`),
        legalPromptAccept: `Saya setuju`,
        legalPromptReject: `Tutup`,
        legalPromptTermsOfService: `Ketentuan Layanan`,
        legalPromptVariantGMessage: `Agar bisa berfungsi, fitur ini menggunakan informasi terkait wajah, tangan, dan suara yang dideteksi oleh kamera serta mikrofon. Dengan fitur ini, efek augmented reality yang menyenangkan dan berguna dapat diterapkan ke selfie dan gambar. Kamera kami menggunakan teknologi untuk menemukan lokasi fitur tertentu (misalnya menemukan bagian tangan, mata, dan hidung), lalu menggunakan informasi tersebut untuk menempatkan fitur secara akurat di gambar yang dideteksi oleh kamera. Informasi apa pun yang dikumpulkan akan segera dihapus (biasanya setelah aplikasi ditutup) dan selalu disimpan tidak lebih dari tiga tahun.<br/><br/>Jika ingin menyetujui dan melanjutkan, ketuk tombol di bawah ini.`,
        legalPromptVariantGAdultOrChild: `Apakah kamu orang dewasa atau anak-anak?`,
        legalPromptVariantGFindYourParent: `Panggil orang tua atau wali resmi.`,
        legalPromptVariantGIAmGuardian: `Saya wali si anak`,
        legalPromptVariantGCancel: `Batal`,
        legalPromptVariantGAdult: `Orang Dewasa`,
        legalPromptVariantGChild: `Anak-Anak`,
    },
    "it-IT": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Usando le Lenti, confermi di aver letto l\'<a href="${0}" target="_blank">Informativa sulla Privacy</a> di Snap Inc. e di accettare i <a href="${0}" target="_blank">Termini di Servizio</a> di Snap Inc. Alcune Lenti utilizzano informazioni sul tuo viso, le tue mani e la tua voce per funzionare. <a href="${0}" target="_blank">Scopri di più</a> e, se sei d\'accordo e vuoi continuare, tocca qui sotto.`),
        legalPromptAccept: `Accetto`,
        legalPromptReject: `Ignora`,
        legalPromptTermsOfService: `Termini di Servizio`,
        legalPromptVariantGMessage: `Questa funzionalità utilizza le informazioni su viso, mani e voce rilevate dalla fotocamera e dal microfono per funzionare. Ti consente di applicare effetti in realtà aumentata divertenti e utili ai selfie e alle immagini. La nostra Fotocamera sfrutta una tecnologia specifica per individuare certe parti del corpo (ad esempio mani, occhi e naso) e usa questi dati per posizionarle in modo accurato sull\'immagine rilevata. Qualsiasi informazione raccolta viene eliminata appena possibile (di solito poco dopo la chiusura dell\'app) e, in ogni caso, entro 3 anni.<br/><br/>Se sei d\'accordo e vuoi continuare, tocca qui sotto.`,
        legalPromptVariantGAdultOrChild: `Sei un adulto o un minore?`,
        legalPromptVariantGFindYourParent: `C\'è bisogno di un genitore o tutore legale.`,
        legalPromptVariantGIAmGuardian: `Sono il tutore del minore`,
        legalPromptVariantGCancel: `Annulla`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Minore`,
    },
    "ja-JP": {
        legalPromptMessage: legalPromptMessage((tag) => tag `レンズを使用することにより、Snap社の<a href="${0}" target="_blank">プライバシーポリシー</a>を読み、<a href="${0}" target="_blank">利用規約</a>に同意したことになります。レンズの中には、あなたの顔や手、声の情報を利用するものがあります。<a href="${0}" target="_blank">詳細はこちらからご覧いただき</a>、同意して利用を継続する場合には下をタップしてください。`),
        legalPromptAccept: `同意します`,
        legalPromptReject: `閉じる`,
        legalPromptTermsOfService: `利用規約`,
        legalPromptVariantGMessage: `この機能はカメラとマイクを使って検知した顔や手、声の情報を利用します。この機能で、自撮りや画像に楽しく便利な拡張現実の効果を適用できます。Snapのカメラは特定の特徴（例えばあなたの手や目、鼻などの位置）をとらえるテクノロジーを使用し、その情報を利用してカメラによって感知した画像に特徴を適用します。収集した情報はいずれもすぐに消去され（通常アプリが閉じられてからすぐ）、3年を超えて保存されることはありません。<br/><br/>同意して続行するには下記をタップしてください。`,
        legalPromptVariantGAdultOrChild: `大人ですか、子どもですか？`,
        legalPromptVariantGFindYourParent: `親または保護者を探してください。`,
        legalPromptVariantGIAmGuardian: `私はその子供の保護者です`,
        legalPromptVariantGCancel: `キャンセル`,
        legalPromptVariantGAdult: `大人`,
        legalPromptVariantGChild: `子ども`,
    },
    "kn-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `ಲೆನ್ಸ್‌ಗಳನ್ನು ಬಳಸುವ ಮೂಲಕ, Snap ನ <a href="${0}" target="_blank">ಗೌಪ್ಯತಾ ನೀತಿ</a> ಅನ್ನು ನೀವು ಓದಿದ್ದೀರಿ ಎಂದು ಅಂಗೀಕರಿಸುತ್ತೀರಿ ಮತ್ತು Snap ನ <a href="${0}" target="_blank">ಸೇವೆಯ ನಿಯಮಗಳು</a> ಅನ್ನು ಒಪ್ಪುತ್ತೀರಿ. ಕೆಲವು ಲೆನ್ಸ್‌ಗಳು ಕಾರ್ಯನಿರ್ವಹಿಸಲು ನಿಮ್ಮ ಮುಖ, ಕೈಗಳು ಮತ್ತು ಧ್ವನಿಯ ಮಾಹಿತಿಯನ್ನು ಬಳಸುತ್ತವೆ. <a href="${0}" target="_blank">ಇನ್ನಷ್ಟು ತಿಳಿಯಿರಿ</a>, ಹಾಗೂ ಒಂದು ವೇಳೆ ನೀವು ಒಪ್ಪಿ ಮುಂದುವರಿಯಲು ಬಯಸಿದರೆ, ಕೆಳಗೆ ಟ್ಯಾಪ್ ಮಾಡಿ.`),
        legalPromptAccept: `ನಾನು ಒಪ್ಪುತ್ತೇನೆ`,
        legalPromptReject: `ವಜಾಮಾಡಿ`,
        legalPromptTermsOfService: `ಸೇವೆಯ ನಿಯಮಗಳು`,
        legalPromptVariantGMessage: `ಈ ವೈಶಿಷ್ಟ್ಯವು ಕಾರ್ಯನಿರ್ವಹಿಸಲು ಕ್ಯಾಮರಾ ಮತ್ತು ಮೈಕ್ರೊಫೋನ್‌ನಿಂದ ಪತ್ತೆಯಾದ ಮುಖ(ಗಳು), ಕೈಗಳು ಮತ್ತು ಧ್ವನಿ(ಗಳು) ಕುರಿತು ಮಾಹಿತಿಯನ್ನು ಬಳಸುತ್ತದೆ. ಈ ವೈಶಿಷ್ಟ್ಯದೊಂದಿಗೆ, ನೀವು ಸೆಲ್ಫಿಗಳು ಮತ್ತು ಚಿತ್ರಗಳ ಮೇಲೆ ವಿನೋದ ಮತ್ತು ಉಪಯುಕ್ತ ಆಗ್ಮೆಂಟೆಡ್‌ ರಿಯಾಲಿಟಿ ಪರಿಣಾಮಗಳನ್ನು ಅನ್ವಯಿಸಬಹುದು. ನಮ್ಮ ಕ್ಯಾಮರಾ ಕೆಲವು ವೈಶಿಷ್ಟ್ಯಗಳನ್ನು (ನಿಮ್ಮ ಕೈಗಳು, ಕಣ್ಣುಗಳು ಮತ್ತು ಮೂಗು ಎಲ್ಲಿದೆ ಎಂದು) ಪತ್ತೆಹಚ್ಚಲು ತಂತ್ರಜ್ಞಾನವನ್ನು ಬಳಸುತ್ತದೆ ಮತ್ತು ಕ್ಯಾಮರಾದಿಂದ ಗ್ರಹಿಸಲ್ಪಟ್ಟ ಚಿತ್ರದೊಂದಿಗೆ ವೈಶಿಷ್ಟ್ಯವನ್ನು ನಿಖರವಾಗಿ ಇರಿಸಲು ಆ ಮಾಹಿತಿಯನ್ನು ಬಳಸುತ್ತದೆ. ಸಂಗ್ರಹಿಸಿದ ಯಾವುದೇ ಮಾಹಿತಿಯನ್ನು ಸಾಧ್ಯವಾದಷ್ಟು ಬೇಗ ಅಳಿಸಲಾಗುತ್ತದೆ (ಸಾಮಾನ್ಯವಾಗಿ ಆ್ಯಪ್‌ ಅನ್ನು ಮುಚ್ಚಿದ ನಂತರ) ಮತ್ತು ಎಂದಿಗೂ ಮೂರು ವರ್ಷಗಳ ನಂತರ ಇರಿಸಿಕೊಳ್ಳಲಾಗುವುದಿಲ್ಲ. <br/><br/> ನೀವು ಒಪ್ಪಿಕೊಳ್ಳಲು ಮತ್ತು ಮುಂದುವರಿಸಲು ಬಯಸಿದರೆ, ಕೆಳಗೆ ಟ್ಯಾಪ್ ಮಾಡಿ.`,
        legalPromptVariantGAdultOrChild: `ನೀವು ವಯಸ್ಕರೇ ಅಥವಾ ಮಗುವೇ?`,
        legalPromptVariantGFindYourParent: `ದಯವಿಟ್ಟು ನಿಮ್ಮ ಪೋಷಕರು ಅಥವಾ ಕಾನೂನು ಪಾಲಕರನ್ನು ಹುಡುಕಿ.`,
        legalPromptVariantGIAmGuardian: `ನಾನು ಮಗುವಿನ ಪೋಷಕ`,
        legalPromptVariantGCancel: `ರದ್ದುಮಾಡಿ`,
        legalPromptVariantGAdult: `ವಯಸ್ಕ`,
        legalPromptVariantGChild: `ಮಗು`,
    },
    "ko-KR": {
        legalPromptMessage: legalPromptMessage((tag) => tag `렌즈를 사용하면 Snap의 <a href="${0}" target="_blank">개인정보 보호정책</a>을 읽고 Snap의 <a href="${0}" target="_blank">이용 약관</a>에 동의하는 것으로 간주됩니다. 일부 렌즈는 회원님의 얼굴, 손 및 목소리 정보를 사용합니다. <a href="${0}" target="_blank">자세히 알아보고</a>, 동의 및 계속하려면 아래를 누르세요.`),
        legalPromptAccept: `동의함`,
        legalPromptReject: `취소`,
        legalPromptTermsOfService: `이용 약관`,
        legalPromptVariantGMessage: `이 기능은 카메라와 마이크가 감지한 얼굴, 손, 음성에 대한 정보를 사용하여 작동합니다. 이 기능을 사용하면 셀카 및 이미지에 재미있고 유용한 증강 현실 효과를 적용할 수 있습니다. Snapchat 카메라는 특정 특징(예: 손, 눈 및 코의 위치)을 찾아내는 기술을 사용하며, 해당 정보를 바탕으로 카메라가 감지한 이미지에서 특징의 위치를 정확하게 파악합니다. 수집된 모든 정보는 가능한 한 빨리(일반적으로 앱 종료 직후) 삭제되며, 항상 3년 이내에 삭제됩니다.<br/><br/>동의하고 계속하려면 아래를 누르세요.`,
        legalPromptVariantGAdultOrChild: `성인인가요, 아동인가요?`,
        legalPromptVariantGFindYourParent: `부모님 또는 법적 보호자와 함께 진행하세요.`,
        legalPromptVariantGIAmGuardian: `아동의 보호자입니다`,
        legalPromptVariantGCancel: `취소`,
        legalPromptVariantGAdult: `성인`,
        legalPromptVariantGChild: `아동`,
    },
    "ml-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `ലെൻസുകൾ ഉപയോഗിക്കുന്നതിലൂടെ നിങ്ങൾ Snap-ന്റെ <a href="${0}" target="_blank">സ്വകാര്യതാ നയം</a> വായിച്ചുവെന്ന് സമ്മതിക്കുകയും Snap-ന്റെ <a href="${0}" target="_blank">സേവന നിബന്ധനകൾ</a> അംഗീകരിക്കുകയും ചെയ്യുന്നു. പ്രവർത്തിക്കുന്നതിന് ചില ലെൻസുകൾ നിങ്ങളുടെ മുഖം, കൈകൾ, ശബ്ദം എന്നിവയേക്കുറിച്ചുള്ള വിവരങ്ങൾ ഉപയോഗിക്കുന്നു. <a href="${0}" target="_blank">കൂടുതലറിയുക</a>, അംഗീകരിച്ച് തുടരണമെങ്കിൽ ചുവടെ ടാപ്പ് ചെയ്യുക.`),
        legalPromptAccept: `ഞാൻ അംഗീകരിക്കുന്നു`,
        legalPromptReject: `ഡിസ്‌മിസ് ചെയ്യുക`,
        legalPromptTermsOfService: `സേവന വ്യവസ്ഥകൾ`,
        legalPromptVariantGMessage: `ഈ ആപ്പ് അതിന്റെ പ്രവർത്തനത്തിന്, ക്യാമറയും മൈക്രോഫോണും കണ്ടെത്തുന്ന മുഖം(ങ്ങൾ), കൈകളും ശബ്ദവും(ങ്ങളും) എന്നിവയുമായി ബന്ധപ്പെട്ട വിവരങ്ങൾ ഉപയോഗിക്കുന്നു. ഈ ഫീച്ചർ ഉപയോഗിച്ച് നിങ്ങളുടെ സെൽഫികൾക്കും ചിത്രങ്ങൾക്കും മുകളിൽ, ഉപയോഗപ്രദമായ ഓഗ്‌മെന്റഡ് റിയാലിറ്റി ഇഫക്റ്റുകൾ നൽകാനാകും. ഞങ്ങളുടെ ക്യാമറ ചില ഫീച്ചറുകൾ ലൊക്കേറ്റ് ചെയ്യാൻ (ഉദാഹരണത്തിന് നിങ്ങളുടെ കൈകൾ, കണ്ണുകൾ, മൂക്ക് എന്നിവ എവിടെയാണ്) സാങ്കേതികവിദ്യ ഉപയോഗിക്കുന്നു, ക്യാമറ സെൻസ് ചെയ്ത ചിത്രത്തിൽ ഈ ഫീച്ചർ കൃത്യമായി പൊസിഷൻ ചെയ്യാൻ ഈ വിവരങ്ങൾ ഉപയോഗിക്കുകയും ചെയ്യുന്നു. ശേഖരിക്കുന്ന എല്ലാ വിവരങ്ങളും എത്രയും വേഗവും (സാധാരണയായി ആപ്പ് അടച്ചാൽ ഉടൻ) മൂന്ന് വർഷത്തിനുള്ളിലും (എല്ലായ്‌പ്പോഴും) ഇല്ലാതാക്കുന്നു.<br/><br/>അംഗീകരിച്ച് തുടരണമെന്നുണ്ടെങ്കിൽ ചുവടെ ടാപ്പ് ചെയ്യുക.`,
        legalPromptVariantGAdultOrChild: `നിങ്ങൾ ഒരു കുട്ടിയാണോ അതോ മുതിർന്ന വ്യക്തിയാണോ?`,
        legalPromptVariantGFindYourParent: `നിങ്ങളുടെ രക്ഷിതാവിനെയോ നിയമപരമായ രക്ഷിതാവിനെയോ കണ്ടെത്തുക.`,
        legalPromptVariantGIAmGuardian: `ഞാൻ കുട്ടിയുടെ നിയമപരമായ രക്ഷിതാവാണ്`,
        legalPromptVariantGCancel: `റദ്ദാക്കുക`,
        legalPromptVariantGAdult: `മുതിർന്നവ്യക്തി`,
        legalPromptVariantGChild: `കുട്ടി`,
    },
    "mr-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `लेन्सेस वापरून, तुम्ही मान्य करता की तुम्ही Snap चे <a href="${0}" target="_blank">गोपनीयता धोरण</a> वाचले आहे आणि Snap च्या <a href="${0}" target="_blank">सेवा अटींना</a> सहमती देता. काही लेन्सेस कार्य करण्यासाठी तुमचा चेहरा, हात आणि आवाज याविषयी माहिती वापरतात. <a href="${0}" target="_blank">अधिक जाणून घ्या</a> आणि तुम्हाला सहमती देऊन चालू ठेवायचे असल्यास खाली टॅप करा.`),
        legalPromptAccept: `मी सहमत आहे`,
        legalPromptReject: `दुर्लक्ष करा`,
        legalPromptTermsOfService: `सेवा अटी`,
        legalPromptVariantGMessage: `हे वैशिष्ट्य कार्य करण्यासाठी कॅमेरा आणि मायक्रोफोनद्वारे तपासलेली चेहरा(चेहरे), हात आणि आवाजाची माहिती वापरते. या वैशिष्ट्यासह, तुम्ही सेल्फी आणि इमेजवर मजेशीर आणि उपयोगी ऑग्मेंटेड रिॲलिटी प्रभाव लागू करू शकता. आमचा कॅमेरा काही फीचर्स (जसे की तुमचे हात, डोळे आणि नाक कुठे आहेत) शोधण्यासाठी तंत्रज्ञान वापरतो आणि कॅमेऱ्याद्वारे ओळखलेल्या इमेजसह फीचर नेमक्या ठिकाणी दाखवण्यासाठी ती माहिती वापरतो. गोळा केलेली कोणतीही माहिती शक्य तितक्या लवकर (सहसा ॲप बंद केल्यावर लगेच) आणि नेहमी तीन वर्षांच्या आत हटवली जाईल.<br/><br/>तुम्हाला सहमती देऊन पुढे चालू ठेवायचे असेल तर, खाली टॅप करा.`,
        legalPromptVariantGAdultOrChild: `तुम्ही प्रौढ आहात किंवा लहान मूल आहात?`,
        legalPromptVariantGFindYourParent: `कृपया तुमचे आईवडील किंवा कायदेशीर पालकांना शोधा.`,
        legalPromptVariantGIAmGuardian: `मी मुलाचा पालक आहे`,
        legalPromptVariantGCancel: `रद्द करा`,
        legalPromptVariantGAdult: `प्रौढ`,
        legalPromptVariantGChild: `मूल`,
    },
    "ms-MY": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Dengan menggunakan Lensa, anda mengakui membaca <a href="${0}" target="_blank">Dasar Privasi</a> Snap dan bersetuju dengan <a href="${0}" target="_blank">Syarat Perkhidmatan</a> Snap. Sesetengan lensa menggunakan maklumat tentang muka anda, tangan dan suara untuk berfungsi. <a href="${0}" target="_blank">Ketahui Lebih Lanjut</a>, dan jika anda mahu bersetuju dan teruskan, ketik di bawah.`),
        legalPromptAccept: `Saya Setuju`,
        legalPromptReject: `Abaikan`,
        legalPromptTermsOfService: `Syarat Perkhidmatan`,
        legalPromptVariantGMessage: `Ciri ini menggunakan maklumat muka, tangan dan suara yang dikesan oleh kamera dan mikrofon untuk berfungsi. Dengan ciri ini, anda boleh menggunakan kesan realiti tambahan yang menyeronokkan dan berguna selain swafoto dan gambar. Kamera kami menggunakan teknologi untuk mengesan ciri tertentu (seperti di mana tangan, mata dan hidung anda) dan menggunakan maklumat tersebut untuk meletakkan ciri dengan tepat dengan imej yang dikesan oleh kamera. Sebarang maklumat yang dikumpul akan dipadamkan dengan segera (kebiasaannya sejurus aplikasi ditutup) dan sentiasa dalam tempoh tidak lebih daripada tiga tahun.<br/><br/>Jika anda bersetuju dan ingin teruskan, ketik dibawah.`,
        legalPromptVariantGAdultOrChild: `Adakah anda seorang dewasa atau kanak-kanak?`,
        legalPromptVariantGFindYourParent: `Sila cari ibu bapa atau penjaga anda yang sah.`,
        legalPromptVariantGIAmGuardian: `Saya penjaga kanak-kanak ini`,
        legalPromptVariantGCancel: `Batal`,
        legalPromptVariantGAdult: `Dewasa`,
        legalPromptVariantGChild: `Kanak-kanak`,
    },
    "nb-NO": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Ved å ta i bruk Linser bekrefter du at du har lest <a href="${0}" target="_blank">personvernbetingelsene</a> og at du godtar <a href="${0}" target="_blank">tjenestevilkårene</a> til Snap. Noen Linser bruker informasjon om ansiktet ditt, hendene dine og stemmen din for å fungere. <a href="${0}" target="_blank">Finn ut mer</a>. Hvis du godtar dette og vil gå videre, klikker du nedenfor.`),
        legalPromptAccept: `Jeg godtar`,
        legalPromptReject: `Avvis`,
        legalPromptTermsOfService: `Tjenestevilkår`,
        legalPromptVariantGMessage: `Denne funksjonen bruker informasjon om ansikter, hender og stemmer som oppdages av kameraet og mikrofonen, for å fungere. Med denne funksjonen kan du legge til artige og nyttige effekter i utvidet virkelighet på selfier og bilder. Kameraet vårt bruker teknologi for å oppdage visse trekk (som hvor hendene, øynene og nesen er), og bruker denne informasjonen til å plassere funksjonen oppå bildet som kameraet har fanget opp. All informasjon som samles inn, blir slettet så snart som mulig (vanligvis rett etter at appen lukkes) og alltid innen maks tre år.<br/><br/>Hvis du ønsker å godta og fortsette, trykker du nedenfor.`,
        legalPromptVariantGAdultOrChild: `Er du en voksen eller et barn?`,
        legalPromptVariantGFindYourParent: `Finn en forelder eller foresatt.`,
        legalPromptVariantGIAmGuardian: `Jeg er barnets foresatt`,
        legalPromptVariantGCancel: `Avbryt`,
        legalPromptVariantGAdult: `Voksen`,
        legalPromptVariantGChild: `Barn`,
    },
    "nl-NL": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Door Lenzen te gebruiken, geef je aan dat je het <a href="${0}" target="_blank">Privacybeleid</a> van Snap hebt gelezen en dat je akkoord gaat met de <a href="${0}" target="_blank">Servicevoorwaarden</a> van Snap. Sommige Lenzen gebruiken informatie over je gezicht, handen en stem om te functioneren. Lees <a href="${0}" target="_blank">meer informatie</a> en tik hieronder als je akkoord gaat en wilt doorgaan.`),
        legalPromptAccept: `Ik ga akkoord`,
        legalPromptReject: `Annuleren`,
        legalPromptTermsOfService: `Servicevoorwaarden`,
        legalPromptVariantGMessage: `Voor de werking van deze functie wordt informatie over gezicht(en), handen en stem(men) gebruikt die door camera en microfoon worden gedetecteerd. Je kunt met deze functie leuke en nuttige augmented reality-effecten op selfies en afbeeldingen plaatsen. Onze camera gebruikt technologie om de locatie te bepalen van bepaalde kenmerken (bijvoorbeeld waar je handen, ogen en neus zich bevinden) en gebruikt die informatie om het kenmerk nauwkeurig te positioneren in de afbeelding die is gedetecteerd met de camera. De verzamelde informatie wordt zo snel mogelijk verwijderd (gewoonlijk kort nadat de app is gesloten) en altijd binnen een periode van maximaal drie jaar.<br/><br/>Tik hieronder als je hiermee akkoord gaat en wilt doorgaan.`,
        legalPromptVariantGAdultOrChild: `Ben je een volwassene of een kind?`,
        legalPromptVariantGFindYourParent: `Vraag toestemming aan een ouder of wettelijke voogd.`,
        legalPromptVariantGIAmGuardian: `Ik ben de voogd van het kind`,
        legalPromptVariantGCancel: `Annuleren`,
        legalPromptVariantGAdult: `Volwassene`,
        legalPromptVariantGChild: `Kind`,
    },
    pa: {
        legalPromptMessage: legalPromptMessage((tag) => tag `ਲੈਂਜ਼ਾਂ ਦੀ ਵਰਤੋਂ ਕਰਕੇ, ਤੁਸੀਂ ਇਸ ਗੱਲ ਨੂੰ ਸਵੀਕਾਰ ਕਰਦੇ ਹੋ ਕਿ ਤੁਸੀਂ Snap ਦੀ <a href="${0}" target="_blank">ਪਰਦੇਦਾਰੀ ਬਾਰੇ ਨੀਤੀ</a> ਨੂੰ ਪੜ੍ਹ ਲਿਆ ਹੈ ਅਤੇ ਤੁਸੀਂ Snap ਦੀਆਂ <a href="${0}" target="_blank">ਸੇਵਾ ਦੀਆਂ ਮਦਾਂ</a> ਨਾਲ ਸਹਿਮਤ ਹੋ। ਕੁਝ ਲੈਂਜ਼ ਕੰਮ ਕਰਨ ਲਈ ਤੁਹਾਡੇ ਚਿਹਰੇ, ਹੱਥਾਂ ਅਤੇ ਆਵਾਜ਼ ਨਾਲ ਸੰਬੰਧਿਤ ਜਾਣਕਾਰੀ ਦੀ ਵਰਤੋਂ ਕਰਦੇ ਹਨ। <a href="${0}" target="_blank">ਹੋਰ ਜਾਣੋ</a> ਅਤੇ ਜੇਕਰ ਤੁਸੀਂ ਸਹਿਮਤ ਹੋ ਅਤੇ ਜਾਰੀ ਰੱਖਣਾ ਚਾਹੁੰਦੇ ਹੋ, ਤਾਂ ਹੇਠਾਂ ਟੈਪ ਕਰੋ।`),
        legalPromptAccept: `ਮੈਂ ਸਹਿਮਤ ਹਾਂ`,
        legalPromptReject: `ਖ਼ਾਰਜ ਕਰੋ`,
        legalPromptTermsOfService: `ਸੇਵਾ ਦੀਆਂ ਮਦਾਂ`,
        legalPromptVariantGMessage: `ਕੰਮ ਕਰਨ ਲਈ ਇਹ ਸੁਵਿਧਾ ਕੈਮਰੇ ਅਤੇ ਮਾਈਕ੍ਰੋਫ਼ੋਨ ਨਾਲ ਚਿਹਰੇ(ਚਿਹਰਿਆਂ), ਹੱਥਾਂ ਅਤੇ ਆਵਾਜ਼(ਆਵਾਜ਼ਾਂ) ਬਾਰੇ ਲਈ ਗਈ ਜਾਣਕਾਰੀ ਦੀ ਵਰਤੋਂ ਕਰਦੀ ਹੈ। ਇਸ ਸੁਵਿਧਾ ਨਾਲ, ਤੁਸੀਂ ਸੈਲਫ਼ੀਆਂ ਅਤੇ ਚਿੱਤਰਾਂ ਉੱਪਰ ਮਜ਼ੇਦਾਰ ਅਤੇ ਲਾਭਕਾਰੀ ਵਧਾਈ ਗਈ ਹਕੀਕਤ ਵਾਲੇ ਪ੍ਰਭਾਵ ਲਾਗੂ ਕਰ ਸਕਦੇ ਹੋ। ਸਾਡਾ ਕੈਮਰਾ ਕੁਝ ਸੁਵਿਧਾਵਾਂ (ਜਿਵੇਂ ਕਿ ਤੁਹਾਡੇ ਹੱਥ, ਅੱਖਾਂ ਅਤੇ ਨੱਕ ਕਿੱਥੇ ਹਨ) ਦਾ ਪਤਾ ਲਗਾਉਣ ਲਈ ਤਕਨਾਲੋਜੀ ਦੀ ਵਰਤੋਂ ਕਰਦਾ ਹੈ ਅਤੇ ਕੈਮਰੇ ਦੁਆਰਾ ਸੰਵੇਦਿਤ ਚਿੱਤਰ ਦੇ ਨਾਲ ਸੁਵਿਧਾ ਦੀ ਸਹੀ ਸਥਿਤੀ ਲਈ ਉਸ ਜਾਣਕਾਰੀ ਦੀ ਵਰਤੋਂ ਕਰਦਾ ਹੈ। ਇਕੱਠੀ ਕੀਤੀ ਜਾਣ ਵਾਲੀ ਕੋਈ ਵੀ ਜਾਣਕਾਰੀ ਜਿੰਨੀ ਜਲਦੀ ਹੋ ਸਕੇ ਮਿਟਾ ਦਿੱਤੀ ਜਾਵੇਗੀ (ਆਮ ਤੌਰ \'ਤੇ ਐਪ ਬੰਦ ਹੋਣ ਤੋਂ ਤੁਰੰਤ ਬਾਅਦ) ਅਤੇ ਹਮੇਸ਼ਾ ਤਿੰਨ ਸਾਲਾਂ ਦੇ ਅੰਦਰ।<br/><br/>ਜੇਕਰ ਤੁਸੀਂ ਸਹਿਮਤ ਹੋਣਾ ਅਤੇ ਜਾਰੀ ਰੱਖਣਾ ਚਾਹੁੰਦੇ ਹੋ, ਤਾਂ ਹੇਠਾਂ ਟੈਪ ਕਰੋ।`,
        legalPromptVariantGAdultOrChild: `ਕੀ ਤੁਸੀਂ ਬਾਲਗ ਹੋ ਜਾਂ ਬੱਚਾ ਹੋ?`,
        legalPromptVariantGFindYourParent: `ਕਿਰਪਾ ਕਰਕੇ ਆਪਣੇ ਮਾਤਾ-ਪਿਤਾ ਜਾਂ ਕਾਨੂੰਨੀ ਸਰਪ੍ਰਸਤ ਲੱਭੋ।`,
        legalPromptVariantGIAmGuardian: `ਮੈਂ ਬੱਚੇ ਦਾ ਸਰਪ੍ਰਸਤ ਹਾਂ`,
        legalPromptVariantGCancel: `ਰੱਦ ਕਰੋ`,
        legalPromptVariantGAdult: `ਬਾਲਗ`,
        legalPromptVariantGChild: `ਬੱਚਾ`,
    },
    "pl-PL": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Korzystając z nakładek, potwierdzasz zapoznanie się z <a href="${0}" target="_blank">Polityką prywatności</a> i akceptujesz <a href="${0}" target="_blank">Regulamin usługi</a>. Niektóre nakładki wykorzystują informacje o Twojej twarzy, dłoniach i głosie, aby działać poprawnie. <a href="${0}" target="_blank">Dowiedz się więcej</a>, a jeśli chcesz wyrazić zgodę i kontynuować, stuknij poniżej.`),
        legalPromptAccept: `Zgadzam się`,
        legalPromptReject: `Odrzuć`,
        legalPromptTermsOfService: `Regulamin`,
        legalPromptVariantGMessage: `Ta funkcja wykorzystuje do działania informacje o twarzy (twarzach), rękach i głosie (głosach) wykrytych przez kamerę i mikrofon. Dzięki niej możesz nakładać na selfie i zdjęcia zabawne i przydatne efekty rozszerzonej rzeczywistości. Nasza kamera wykorzystuje technologię do lokalizowania określonych cech (takich jak miejsce, w którym znajdują się Twoje ręce, oczy i nos) i wykorzystuje te informacje do dokładnego umiejscowienia danej cechy na obrazie wykrywanym przez kamerę. Wszelkie zebrane informacje zostaną usunięte możliwie jak najszybciej (zazwyczaj wkrótce po zamknięciu aplikacji) i zawsze nie później niż w ciągu trzech lat.<br/><br/>Jeśli chcesz wyrazić zgodę i kontynuować, stuknij poniżej.`,
        legalPromptVariantGAdultOrChild: `Jesteś osobą dorosłą czy dzieckiem?`,
        legalPromptVariantGFindYourParent: `Zwróć się do swojego rodzica lub opiekuna prawnego.`,
        legalPromptVariantGIAmGuardian: `Jestem opiekunem prawnym dziecka`,
        legalPromptVariantGCancel: `Anuluj`,
        legalPromptVariantGAdult: `Osoba dorosła`,
        legalPromptVariantGChild: `Dziecko`,
    },
    "pt-BR": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Ao usar as Lentes, você reconhece ter lido a <a href="${0}" target="_blank">Política de Privacidade</a> da Snap e concorda com os <a href="${0}" target="_blank">Termos de Serviço</a> da Snap. Algumas Lentes usam informações sobre seu rosto, mãos e voz para funcionar. <a href="${0}" target="_blank">Saiba mais</a> e, se quiser concordar e continuar, toque abaixo.`),
        legalPromptAccept: `Eu concordo`,
        legalPromptReject: `Recusar`,
        legalPromptTermsOfService: `Termos de Serviço`,
        legalPromptVariantGMessage: `Este recurso usa informações sobre rosto(s), mãos e voz(es) detectados pela câmera e pelo microfone para funcionar. Com este recurso, você pode aplicar efeitos divertidos e úteis de realidade aumentada em selfies e imagens. Nossa câmera usa tecnologia para localizar certos recursos (como onde estão suas mãos, olhos e nariz) e usa esta informação para posicionar corretamente o recurso na imagem detectada pela câmera. Qualquer informação coletada será apagada o mais rápido possível (geralmente logo depois que o aplicativo é fechado) e sempre antes de três dias.<br/><br/>Se você quiser concordar e continuar, toque abaixo.`,
        legalPromptVariantGAdultOrChild: `Você é adulto ou criança?`,
        legalPromptVariantGFindYourParent: `Localize seu pai/mãe ou representante legal.`,
        legalPromptVariantGIAmGuardian: `Sou representante da criança`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Criança`,
    },
    "pt-PT": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Ao utilizares as Lentes, confirmas a leitura da <a href="${0}" target="_blank">Política de Privacidade</a> da Snap e aceitas as <a href="${0}" target="_blank">Condições de Serviço</a> da Snap. Algumas Lentes utilizam informações sobre a tua cara, mãos e voz para funcionarem. <a href="${0}" target="_blank">Obtém mais informações</a> e, se quiseres aceitar e continuar, toca abaixo.`),
        legalPromptAccept: `Aceito`,
        legalPromptReject: `Fechar`,
        legalPromptTermsOfService: `Condições de Serviço`,
        legalPromptVariantGMessage: `Esta funcionalidade utiliza informações relacionadas com caras, mãos e vozes detetadas pela câmara e o microfone para poder funcionar. Com esta funcionalidade, pode aplicar efeitos de realidade aumentada de forma divertida e útil a selfies e imagens. A nossa câmara recorre a tecnologia para localizar determinadas caraterísticas (como a localização das tuas mãos, dos olhos e do nariz) e utiliza essas informações para posicionar de forma precisa a caraterística na imagem captada pela câmara. Quaisquer informações recolhidas serão eliminadas logo que possível (normalmente pouco depois de a app ser fechada) e nunca após um máximo de três anos. <br/><br/>Se quiser aceitar e continuar, toque abaixo.`,
        legalPromptVariantGAdultOrChild: `És um adulto ou uma criança?`,
        legalPromptVariantGFindYourParent: `Recorre ao teus pais ou ao(à) teu(tua) representante legal`,
        legalPromptVariantGIAmGuardian: `Sou o(a) representante da criança`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Criança`,
    },
    "ro-RO": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Dacă folosești lentile, confirmi că ai citit <a href="${0}" target="_blank">Politica de confidențialitate</a> Snap și că ești de acord cu <a href="${0}" target="_blank">Condițiile de utilizare</a> Snap. Unele lentile folosesc informații despre fața ta, despre mâinile tale și despre vocea ta pentru a funcționa. <a href="${0}" target="_blank">Află mai multe</a>, iar dacă dorești să accepți și să continui, atinge dedesubt.`),
        legalPromptAccept: `Accept`,
        legalPromptReject: `Respinge`,
        legalPromptTermsOfService: `Termeni de utilizare`,
        legalPromptVariantGMessage: `Pentru a rula, funcția utilizează informații despre chipul tău, mâinile tale și vocea ta detectate de cameră și microfon. Cu ajutorul acestei funcții, poți să aplici efecte de realitate augumentată amuzante și utile peste selfie-uri și imagini. Camera noastră folosește tehnologia pentru a găsi anumite caracteristici (de exemplu, unde se află mâinile, ochii și nasul tău) și utilizează aceste informații pentru a poziționa corect funcția în imaginea detectată de cameră. Toate informațiile colectate sunt șterse cât mai curând posibil (de obicei, la scurt timp după ce se închide aplicația), limita maximă fiind de trei ani.<br/><br/>Dacă ești de acord și dorești să continui, atinge mai jos.`,
        legalPromptVariantGAdultOrChild: `Ești adult sau copil?`,
        legalPromptVariantGFindYourParent: `Este necesară prezența părintelui sau a tutorelui.`,
        legalPromptVariantGIAmGuardian: `Sunt tutorele copilului`,
        legalPromptVariantGCancel: `Anulează`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Copil`,
    },
    "ru-RU": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Используя линзы, вы подтверждаете, что прочитали <a href="${0}" target="_blank">Политику конфиденциальности</a> Snap и принимаете <a href="${0}" target="_blank">Условия оказания услуг</a>. Для работы некоторых линз необходимы сведения о вашем лице, руках и голосе. <a href="${0}" target="_blank">Подробнее</a>. Если вы согласны продолжать, нажмите ниже.`),
        legalPromptAccept: `Принимаю`,
        legalPromptReject: `Закрыть`,
        legalPromptTermsOfService: `Условия оказания услуг`,
        legalPromptVariantGMessage: `Для работы этой функции используется регистрируемая камерой и микрофоном информация о лицах, руках и голосах. С её помощью к селфи и изображениям можно применять забавные и полезные эффекты дополненной реальности. Наша камера использует технологию, чтобы определять расположение конкретных элементов (например, ваших рук, глаз и носа), и использует эту информацию для точного наложения функции на изображение, которое уловила камера. Вся полученная информация удаляется в кратчайшие сроки (как правило, вскоре после закрытия приложения), но не позднее, чем через три года.<br/><br/>Если вы согласны и хотите продолжить, нажмите ниже.`,
        legalPromptVariantGAdultOrChild: `Вы ― взрослый или ребёнок?`,
        legalPromptVariantGFindYourParent: `Позовите родителя или законного опекуна.`,
        legalPromptVariantGIAmGuardian: `Я ― законный опекун ребёнка`,
        legalPromptVariantGCancel: `Отмена`,
        legalPromptVariantGAdult: `Взрослый`,
        legalPromptVariantGChild: `Ребёнок`,
    },
    "sv-SE": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Genom att använda linser intygar du att du har läst Snaps <a href="${0}" target="_blank">sekretessvillkor</a> och godkänner Snaps <a href="${0}" target="_blank">användarvillkor</a>. Vissa linser använder information om ditt ansikte, dina händer och din röst för att fungera. <a href="${0}" target="_blank">Läs mer</a> och om du vill godkänna och fortsätta så trycker du nedan.`),
        legalPromptAccept: `Jag godkänner`,
        legalPromptReject: `Avvisa`,
        legalPromptTermsOfService: `Användarvillkor`,
        legalPromptVariantGMessage: `För att fungera använder funktionen information om ansikte(n), händer och röst(er) som upptäckts av kameran och mikrofonen. Funktionen gör att du kan tillämpa roliga och användbara AR-effekter över selfies och bilder. Med hjälp av teknik kan vår kamera lokalisera vissa särdrag (som dina händer, ögon och din näsa). Informationen används sedan för att korrekt positionera funktionen över bilden som kameran fångat upp. All information som samlats in raderas så snart som möjligt (vanligtvis inom kort efter att appen stängts) och alltid inom tre år.<br/><br/>Tryck nedan om du vill godkänna och fortsätta.`,
        legalPromptVariantGAdultOrChild: `Är du vuxen eller ett barn?`,
        legalPromptVariantGFindYourParent: `Leta upp din förälder eller vårdnadshavare`,
        legalPromptVariantGIAmGuardian: `Jag är barnets vårdnadshavare`,
        legalPromptVariantGCancel: `Avbryt`,
        legalPromptVariantGAdult: `Vuxen`,
        legalPromptVariantGChild: `Barn`,
    },
    "ta-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `லென்ஸஸைப் பயன்படுத்துவதன் மூலம், நீங்கள் Snap இன் <a href="${0}" target="_blank">தனியுரிமைக் கொள்கையைப்</a> படித்துவிட்டதாக ஒப்புக்கொள்கிறீர்கள் மற்றும் Snap இன் <a href="${0}" target="_blank">சேவை நிபந்தனைகளை</a> ஏற்றுக்கொள்கிறீர்கள். சில லென்ஸஸ் வேலை செய்வதற்கு உங்கள் முகம், கைகள் மற்றும் குரலைப் பற்றிய தகவல்களைப் பயன்படுத்துகின்றன. <a href="${0}" target="_blank">மேலும் அறிக</a>, நீங்கள் ஒப்புக்கொண்டு தொடர விரும்பினால், கீழே தட்டுங்கள்.`),
        legalPromptAccept: `ஏற்கிறேன்`,
        legalPromptReject: `நிராகரி`,
        legalPromptTermsOfService: `சேவை நிபந்தனைகள்`,
        legalPromptVariantGMessage: `இந்த அம்சம் வேலை செய்ய கேமரா மற்றும் மைக்ரோஃபோனால் கண்டறியப்படும் முகம் (முகங்கள்), கைகள் மற்றும் குரல்(கள்) பற்றிய தகவல்களைப் பயன்படுத்துகிறது. இந்த அம்சத்தின் மூலம் நீங்கள் செல்ஃபிக்கள் மற்றும் படங்களில் வேடிக்கையான மற்றும் பயனுள்ள இணைப்பு நிஜமாக்கத்தைப் பயன்படுத்தலாம். எங்கள் கேமரா சில அம்சங்களைக் கண்டறிய (எடுத்துக்காட்டாக, உங்கள் கைகள், கண்கள், மூக்கு போன்றவை எங்கு உள்ளன என்று கண்டறிய) தொழில்நுட்பத்தைப் பயன்படுத்துகிறது, கேமராவால் கண்காணிக்கப்படும் படத்தில் அம்சத்தைத் துல்லியமாக வைக்க அந்தத் தகவல்களைப் பயன்படுத்துகிறது. திரட்டப்படும் எந்தத் தகவலும் இயன்றவரை விரைவாக நீக்கப்படும் (பொதுவாக, செயலி மூடப்பட்டவுடன்). மேலும், இது எப்போதும் மூன்று ஆண்டுகளுக்கு மேல் சேமிக்கப்படுவதில்லை.<br/><br/>நீங்கள் ஏற்றுக்கொண்டு தொடர விரும்பினால், கீழே தட்டுங்கள்.`,
        legalPromptVariantGAdultOrChild: `நீங்கள் வயதுவந்தவரா அல்லது சிறுவரா?`,
        legalPromptVariantGFindYourParent: `உங்கள் பெற்றோர் அல்லது சட்டப்பூர்வப் பாதுகாவலரைக் கண்டறியுங்கள்.`,
        legalPromptVariantGIAmGuardian: `நான் குழந்தையின் பாதுகாவலர்`,
        legalPromptVariantGCancel: `ரத்துசெய்`,
        legalPromptVariantGAdult: `வயதுவந்தவர்`,
        legalPromptVariantGChild: `சிறுவர்`,
    },
    "te-IN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `లెన్సెస్‌ను ఉపయోగించడం ద్వారా, మీరు Snap యొక్క <a href="${0}" target="_blank">గోప్యతా విధానాన్ని</a> చదివినట్లు అంగీకరిస్తున్నారు మరియు Snap <a href="${0}" target="_blank">సేవా నిబంధనలకు</a> అంగీకరిస్తున్నారు. కొన్ని లెన్సెస్ పని చేయడానికి మీ ముఖం, చేతులు మరియు వాయిస్ గురించిన సమాచారాన్ని ఉపయోగిస్తాయి. <a href="${0}" target="_blank">మరింత తెలుసుకోండి</a>, మీరు అంగీకరించి కొనసాగించాలనుకుంటే, దిగువన ట్యాప్ చేయండి.`),
        legalPromptAccept: `నేను అంగీకరిస్తున్నాను`,
        legalPromptReject: `డిస్మిస్ చేయండి`,
        legalPromptTermsOfService: `సేవా నిబంధనలు`,
        legalPromptVariantGMessage: `ఈ ఫీచర్ పని చేయడానికి కెమెరా మరియు మైక్రోఫోన్ ద్వారా గుర్తించబడిన ముఖం(లు), చేతులు మరియు వాయిస్(ల) గురించిన సమాచారాన్ని ఉపయోగిస్తుంది. ఈ ఫీచర్‌తో, మీరు సెల్ఫీలు, చిత్రాల పైన ఆహ్లాదకరమైన మరియు ఉపయోగకరమైన ఆగ్మెంటేడ్ రియాలిటీ ప్రభావాలను వర్తింపజేసుకోవచ్చు. మా కెమెరా నిర్దిష్ట ఫీచర్‌లను (మీ చేతులు, కళ్ళు మరియు ముక్కు ఎక్కడ ఉన్నాయో) గుర్తించడానికి సాంకేతికతను ఉపయోగిస్తుంది మరియు కెమెరా ద్వారా గ్రహించబడిన చిత్రంతో ఫీచర్‌ను ఖచ్చితంగా ఉంచడానికి ఆ సమాచారాన్ని ఉపయోగిస్తుంది. సేకరించిన ఏదైనా సమాచారం వీలైనంత త్వరగా (సాధారణంగా యాప్ మూసివేయబడిన వెంటనే) మరియు ఎల్లప్పుడూ మూడు సంవత్సరాలలోపు డిలీట్ చేయబడుతుంది.<br/><br/>మీరు అంగీకరించి కొనసాగించాలనుకుంటే, దిగువున ట్యాప్ చేయండి.`,
        legalPromptVariantGAdultOrChild: `మీరు పెద్దవారా లేదా చిన్నవారా?`,
        legalPromptVariantGFindYourParent: `దయచేసి మీ తల్లిదండ్రులు లేదా చట్టపరమైన సంరక్షకుడిని కనుగొనండి.`,
        legalPromptVariantGIAmGuardian: `నేను పిల్లవాడి సంరక్షకుడిని`,
        legalPromptVariantGCancel: `రద్దు`,
        legalPromptVariantGAdult: `వయోజనుడు`,
        legalPromptVariantGChild: `పిల్లవాడు`,
    },
    "th-TH": {
        legalPromptMessage: legalPromptMessage((tag) => tag `การใช้เลนส์แสดงว่าคุณยอมรับว่าคุณได้อ่าน <a href="${0}" target="_blank">นโยบายความเป็นส่วนตัว</a> ของ Snap และตกลงยอมรับ <a href="${0}" target="_blank">ข้อกำหนดการให้บริการ</a> ของ Snap เลนส์บางรายการต้องใช้ข้อมูลเกี่ยวกับใบหน้า มือ และเสียงของคุณจึงจะสามารถทำงานได้ <a href="${0}" target="_blank">เรียนรู้เพิ่มเติม</a> และหากคุณต้องการตกลงยอมรับและดำเนินการต่อ ให้แตะที่ด้านล่าง`),
        legalPromptAccept: `ฉันตกลงยอมรับ`,
        legalPromptReject: `เพิกเฉย`,
        legalPromptTermsOfService: `ข้อกำหนดการให้บริการ`,
        legalPromptVariantGMessage: `ฟีเจอร์นี้ใช้ข้อมูลเกี่ยวกับใบหน้า มือ และเสียงซึ่งตรวจจับโดยใช้กล้องและไมโครโฟน เมื่อใช้ฟีเจอร์นี้ คุณสามารถใช้เอฟเฟกต์ความเป็นจริงเสริม (AR) ที่ทั้งสนุกและมีประโยชน์เมื่อใช้กับภาพเซลฟีและรูปภาพ กล้องของเราใช้เทคโนโลยีเพื่อระบุตำแหน่งของฟีเจอร์บางอย่าง (เช่น ตำแหน่งของมือ ตา และจมูกของคุณ) และใช้ข้อมูลดังกล่าวเพื่อให้วางตำแหน่งฟีเจอร์ได้อย่างถูกต้องลงบนรูปภาพที่ตรวจจับโดยใช้กล้อง เราจะลบข้อมูลต่าง ๆ ที่รวบรวมไว้โดยเร็วที่สุดเท่าที่จะทำได้ (ส่วนใหญ่จะเป็นช่วงหลังจากที่ปิดแอปแล้วไม่นาน) และจะไม่เกินกว่าระยะเวลาสามปี<br/><br/>หากคุณต้องการตกลงยอมรับและดำเนินการต่อ ให้แตะที่ด้านล่างนี้`,
        legalPromptVariantGAdultOrChild: `คุณเป็นผู้ใหญ่หรือเด็ก?`,
        legalPromptVariantGFindYourParent: `โปรดค้นหาพ่อแม่หรือผู้ปกครองตามกฎหมายของคุณ`,
        legalPromptVariantGIAmGuardian: `ฉันเป็นผู้ปกครองของเด็ก`,
        legalPromptVariantGCancel: `ยกเลิก`,
        legalPromptVariantGAdult: `ผู้ใหญ่`,
        legalPromptVariantGChild: `เด็ก`,
    },
    "tr-TR": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Lensleri kullanarak, Snap\'in <a href="${0}" target="_blank">Gizlilik Politikası</a> içeriğini okuduğunu doğrulamış ve Snap\'in <a href="${0}" target="_blank">Kullanım Şartları</a> içeriğini kabul etmiş olursun. Bazı lenslerin çalışması için yüzün, ellerin ve sesinle ilgili bilgiler kullanılır. <a href="${0}" target="_blank">Daha Fazlasını Öğren</a> ve kabul edip devam etmek istiyorsan aşağıya dokun.`),
        legalPromptAccept: `Kabul Ediyorum`,
        legalPromptReject: `Yoksay`,
        legalPromptTermsOfService: `Kullanım Şartları`,
        legalPromptVariantGMessage: `Bu özelliğin çalışması için kamera ve mikrofon tarafından algılanan yüzler, eller ve sesler hakkındaki bilgiler kullanılır. Bu özellik sayesinde selfie\'lerin ve görüntülerin üzerine eğlenceli ve kullanışlı artırılmış gerçeklik efektleri uygulayabilirsin. Kameramız, belirli özellikleri (ellerinin, gözlerinin ve burnunun nerede olduğu gibi) bulmak için teknolojiden yararlanır ve bu bilgileri, kamera tarafından algılanan görüntüyle özelliği doğru şekilde konumlandırmak için kullanır. Toplanan tüm bilgiler mümkün olan en kısa sürede (genellikle uygulama kapatıldıktan kısa süre sonra) ve mutlaka en fazla üç yıl içinde silinir.<br/><br/>Kabul edip devam etmek istiyorsan aşağıya dokun.`,
        legalPromptVariantGAdultOrChild: `Yetişkin mi yoksa çocuk musun?`,
        legalPromptVariantGFindYourParent: `Lütfen ebeveynini veya yasal vasini bul.`,
        legalPromptVariantGIAmGuardian: `Ben çocuğun vasisiyim`,
        legalPromptVariantGCancel: `İptal Et`,
        legalPromptVariantGAdult: `Yetişkin`,
        legalPromptVariantGChild: `Çocuk`,
    },
    "ur-PK": {
        legalPromptMessage: legalPromptMessage((tag) => tag `لینزز استعمال کرنے کا مطلب ہے کہ آپ Snap کی <a href="${0}" target="_blank">پرائیویسی پالیسی</a> پڑھنے کا اعتراف کرتے ہیں اور Snap کی <a href="${0}" target="_blank">سروس کی شرائط</a> سے متفق ہیں۔ کچھ لینزز کام کرنے کیلئے آپ کے چہرے، ہاتھوں اور آواز کے بارے میں معلومات استعمال کرتے ہیں۔ <a href="${0}" target="_blank">مزید جانیں</a> اور اگر آپ متفق ہیں اور جاری رکھنا چاہتے ہیں تو ذیل میں ٹیپ کریں۔`),
        legalPromptAccept: `میں متفق ہوں`,
        legalPromptReject: `برخاست کریں`,
        legalPromptTermsOfService: `سروس کی شرائط`,
        legalPromptVariantGMessage: `یہ خصوصیت کام کرنے کیلئے چہرہ (چہرے)، ہاتھوں اور آوازوں کے بارے میں معلومات استعمال کرتی ہے جن کا پتا کیمرے اور مائیکرو فون کے ذریعے لگایا جاتا ہے۔ اس خصوصیت کے ساتھ، آپ سیلفیز اور تصاویر پر دلچسپ اور کارآمد افزودہ حقیقت کے ایفیکٹس کا اطلاق کر سکتے ہیں۔ ہمارا کیمرا مخصوص خصوصیات کے لوکیشن کا تعین کرنے (جیسے کہ آپ کے ہاتھ، آنکھیں اور ناک کہاں ہیں) کیلئے ٹیکنالوجی استعمال کرتا ہے اور ان معلومات کی مدد سے خصوصیت کو کیمرا کی جانب سے محسوس کی گئی تصویر کے ساتھ درست طور پر پوزیشن کرتا ہے۔ اکٹھی کی گئی کوئی بھی معلومات جلد از جلد ڈیلیٹ ہو جائیں گی (عموماً ایپ بند ہونے کے فوراً بعد) نیز ہر صورت میں تین سال کے اندر ڈیلیٹ ہو جائیں گی۔<br/><br/>اگر آپ اتفاق کرنا اور جاری رکھنا چاہتے ہیں تو ذیل میں ٹیپ کریں۔`,
        legalPromptVariantGAdultOrChild: `کیا آپ ایک بالغ یا بچہ ہیں؟`,
        legalPromptVariantGFindYourParent: `براہ کرم اپنے والد/والدہ یا قانونی سرپرست کو تلاش کریں۔`,
        legalPromptVariantGIAmGuardian: `میں بچہ کا/کی سرپرست ہوں`,
        legalPromptVariantGCancel: `منسوخ کریں`,
        legalPromptVariantGAdult: `بالغ`,
        legalPromptVariantGChild: `بچہ`,
    },
    "vi-VN": {
        legalPromptMessage: legalPromptMessage((tag) => tag `Bằng cách sử dụng Ống Kính, bạn xác nhận đã đọc <a href="${0}" target="_blank">Chính Sách Bảo Mật</a> của Snap và đồng ý với <a href="${0}" target="_blank">Điều Khoản Dịch Vụ</a>của Snap. Một số ống kính sử dụng thông tin về khuôn mặt, bàn tay và giọng nói của bạn để hoạt động. Bạn có thể <a href="${0}" target="_blank">Tìm Hiểu Thêm</a>, còn nếu bạn muốn đồng ý và tiếp tục, hãy chạm vào bên dưới.`),
        legalPromptAccept: `Tôi Đồng Ý`,
        legalPromptReject: `Bỏ Qua`,
        legalPromptTermsOfService: `Điều Khoản Dịch Vụ`,
        legalPromptVariantGMessage: `Tính năng này hoạt động dựa trên việc sử dụng thông tin về khuôn mặt, bàn tay và giọng nói mà camera và micrô phát hiện được. Bạn có thể sử dụng tính năng này để áp dụng các hiệu ứng thực tế tăng cường thú vị và hữu ích lên ảnh tự sướng và hình ảnh. Camera của chúng tôi áp dụng công nghệ để tìm những đặc điểm nhất định (chẳng hạn như vị trí bàn tay, mắt và mũi của bạn), rồi sử dụng thông tin đó để xác định chính xác vị trí của đặc điểm trong hình ảnh mà camera chụp được. Chúng tôi sẽ xóa mọi thông tin được thu thập sớm nhất có thể (thường ngay sau khi bạn đóng ứng dụng) và luôn xóa trong khoảng thời gian không quá ba năm.<br/><br/>Nếu bạn muốn đồng ý và tiếp tục, hãy chạm vào bên dưới.`,
        legalPromptVariantGAdultOrChild: `Bạn là người lớn hay trẻ em?`,
        legalPromptVariantGFindYourParent: `Vui lòng tìm phụ huynh hoặc người giám hộ hợp pháp.`,
        legalPromptVariantGIAmGuardian: `Tôi là người giám hộ của trẻ`,
        legalPromptVariantGCancel: `Hủy Bỏ`,
        legalPromptVariantGAdult: `Người lớn`,
        legalPromptVariantGChild: `Trẻ em`,
    },
    "zh-Hans": {
        legalPromptMessage: legalPromptMessage((tag) => tag `使用特效镜头，即表示你确认已经阅读 Snap 的<a href="${0}" target="_blank">隐私政策</a>，并同意 Snap 的<a href="${0}" target="_blank">服务条款</a>。一些特效镜头需要使用有关你的脸、手和声音的信息才能正常工作。<a href="${0}" target="_blank">了解更多</a>，如果你同意并继续，请点击下面。`),
        legalPromptAccept: `我同意`,
        legalPromptReject: `忽略`,
        legalPromptTermsOfService: `服务条款`,
        legalPromptVariantGMessage: `此功能会使用相机和麦克风检测到的面部、手部和声音信息。使用此功能，你可以对自拍照和图片应用有趣和有用的增强现实效果。我们的相机会使用技术，定位某些特征信息（例如：你的手、眼睛和鼻子的位置），并使用这些信息和相机感知到的图像来准确定位这些特征。收集的所有信息都将尽快删除（通常在应用关闭后不久），最久不会超过三年。<br/><br/>如果你同意并想继续，请点击下方。`,
        legalPromptVariantGAdultOrChild: `你是成人还是儿童？`,
        legalPromptVariantGFindYourParent: `请通知你的家长或法定监护人。`,
        legalPromptVariantGIAmGuardian: `我是这名儿童的监护人`,
        legalPromptVariantGCancel: `取消`,
        legalPromptVariantGAdult: `成人`,
        legalPromptVariantGChild: `儿童`,
    },
    "zh-Hant": {
        legalPromptMessage: legalPromptMessage((tag) => tag `使用特效鏡頭，代表你已閱讀 Snap 的<a href="${0}" target="_blank">隱私政策</a>並同意 Snap 的<a href="${0}" target="_blank">服務條款</a>。有些特效鏡頭需使用你的臉部、手部和聲音資訊才能運作。<a href="${0}" target="_blank">請按這裡以了解更多資訊</a>，如果你同意並想繼續使用功能，請點按下方。`),
        legalPromptAccept: `我同意`,
        legalPromptReject: `略過`,
        legalPromptTermsOfService: `服務條款`,
        legalPromptVariantGMessage: `這個功能會使用相機和麥克風偵測到的臉部、手部和聲音資訊來進行運作。使用這個功能，你可以針對自拍照和圖片套用好玩和有作用的擴增實境效果。我們的相機會使用科技技術，定位某些特徵資訊 (例如：你的手、眼睛和鼻子的位置)，並使用這些資訊和相機感應到的影像來正確地定位這些特徵。所收集的資訊將盡快刪除 (通常會在應用程式關閉後)，最久不會超過三年。<br/><br/>如果你同意並想繼續使用此功能，請點按下方。`,
        legalPromptVariantGAdultOrChild: `你是成人或兒童？`,
        legalPromptVariantGFindYourParent: `請通知你的父母或法定監護人。`,
        legalPromptVariantGIAmGuardian: `我是這個兒童的監護人`,
        legalPromptVariantGCancel: `取消`,
        legalPromptVariantGAdult: `成人`,
        legalPromptVariantGChild: `兒童`,
    },
};
const languageDefaultLocale = {
    bn: "bn-BD",
    da: "da-DK",
    de: "de-DE",
    el: "el-GR",
    en: "en-US",
    es: "es-ES",
    fi: "fi-FI",
    fil: "fil-PH",
    fr: "fr-FR",
    gu: "gu-IN",
    hi: "hi-IN",
    id: "id-ID",
    it: "it-IT",
    ja: "ja-JP",
    kn: "kn-IN",
    ko: "ko-KR",
    ml: "ml-IN",
    mr: "mr-IN",
    ms: "ms-MY",
    nb: "nb-NO",
    nl: "nl-NL",
    pl: "pl-PL",
    pt: "pt-BR",
    ro: "ro-RO",
    ru: "ru-RU",
    sv: "sv-SE",
    ta: "ta-IN",
    te: "te-IN",
    th: "th-TH",
    tr: "tr-TR",
    ur: "ur-PK",
    vi: "vi-VN",
    zh: "zh-Hans",
};
const synonyms = {
    "zh-TW": "zh-Hant",
    "zh-CN": "zh-Hans",
};
const isLocaleString = (value) => value in allStrings;
const defaultLocale = "en-US";
function getSupportedLocale() {
    const locale = getPlatformInfo().locale;
    if (isLocaleString(locale))
        return locale;
    const synonym = synonyms[locale];
    if (synonym && synonym in allStrings)
        return synonym;
    const langCode = locale.split("-")[0];
    if (langCode && langCode in allStrings)
        return langCode;
    if (langCode && langCode in languageDefaultLocale)
        return languageDefaultLocale[langCode];
    return defaultLocale;
}
const supportedLocale = getSupportedLocale();
function localizedString(stringId) {
    return allStrings[supportedLocale][stringId];
}
//# sourceMappingURL=localization.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/dialog.js

const stylesCss = `
dialog {
    display: flex;
    flex-direction: column;

    background-color: #fff;
    border: #efefef 1px solid;
    border-radius: 20px;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.3);

    max-width: 80vw;
    max-height: 80vh;
    padding: 44px 0 24px 0;

    font-size: 16px;
    font-family: sans-serif;
    font-style: normal;
    font-weight: 600;
    line-height: 24px;
}

dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.4);
}

.title {
    color: #16191C;
    padding: 0 32px;
    text-align: center;
}

.body {
    color: #656D78;
    font-size: 14px;
    font-weight: 500;
    margin-top: 16px;
    max-width: 350px;
    padding: 0 32px;
    overflow: auto;
}

a {
    color: rgb(78, 171, 248);
}

button {
    cursor: pointer;
}

button.dismiss {
    position: absolute;
    top: 7px;
    right: 7px;
    padding: 0;
    height: 36px;
    width: 36px;
    margin: 0;
    background-color: transparent;
    border: 0;
}

button.dismiss svg {
    fill: black;
}

.buttons {
    margin-top: 8px;
    padding: 0 32px;
}

.buttons button {
    background: #0FADFF;
    border: 0;
    border-radius: 25px;

    width: 100%;
    padding: 1rem;
    margin-top: 8px;

    color: #fff;
    font-weight: inherit;
    font-family: inherit;
    font-size: inherit;
    font-style: inherit;
}

.buttons button.secondary {
    background-color: transparent;
    color: #656D78;
}

// Proper filling of X button in High Contrast themes
@media (forced-colors: active) {
    button.dismiss svg {
        fill: ButtonText;
    }
}
`;
function getDismissButtonHtml(button) {
    return `
        <button class="dismiss" autofocus data-key=${button.key}>
            <svg xmlns="http://www.w3.org/2000/svg" role="img" width="36" height="36" viewBox="0 0 36 36">
                <title>${button.text}</title>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M12.6763 11.2621C12.2858 10.8716 11.6527 10.8716 11.2621 11.2621C10.8716 11.6527 10.8716 12.2858 11.2621 12.6763L16.5858 18L11.2621 23.3237C10.8716 23.7142 10.8716 24.3474 11.2621 24.7379C11.6527 25.1284 12.2858 25.1284 12.6764 24.7379L18 19.4142L23.3237 24.7379C23.7142 25.1284 24.3474 25.1284 24.7379 24.7379C25.1284 24.3474 25.1284 23.7142 24.7379 23.3237L19.4142 18L24.7379 12.6763C25.1284 12.2858 25.1284 11.6527 24.7379 11.2621C24.3474 10.8716 23.7142 10.8716 23.3237 11.2621L18 16.5858L12.6763 11.2621Z" fill-opacity="0.4"/>
            </svg>
        </button>`;
}
function getTitleHtml(title) {
    return title ? `<div class="title" role="heading">${title}</div>` : "";
}
function getBodyHtml(body) {
    return body ? `<div class="body">${body}</div>` : "";
}
function getButtonHtml(button) {
    return `<button data-key="${button.key}"${button.isSecondary ? ` class="secondary"` : ""}>${button.text}</button>`;
}
function getButtonsHtml(buttons) {
    if (buttons.length === 0)
        return "";
    return `
        <div class="buttons">
        ${buttons.map((b) => getButtonHtml(b)).join("\n")}
        </div>`;
}
function setAttribute(element, attr, value) {
    if (value)
        element.setAttribute(attr, value);
}
function showDialog(options) {
    return new Promise((res) => {
        var _a, _b, _c;
        const element = document.createElement("div");
        setAttribute(element, "data-testid", options.dataTestId);
        const shadow = element.attachShadow({ mode: "open" });
        const style = document.createElement("style");
        shadow.appendChild(style);
        style.innerHTML = stylesCss;
        const prompt = document.createElement("dialog");
        setAttribute(prompt, "aria-label", (_a = options.titleText) !== null && _a !== void 0 ? _a : options.title);
        setAttribute(prompt, "lang", options.lang);
        setAttribute(prompt, "dir", "auto");
        shadow.appendChild(prompt);
        prompt.innerHTML = `
            ${getDismissButtonHtml({ key: "dismiss", text: (_b = options.dismissButtonText) !== null && _b !== void 0 ? _b : "Dismiss" })}
            ${getTitleHtml(options.title)}
            ${getBodyHtml(options.body)}
            ${getButtonsHtml((_c = options.buttons) !== null && _c !== void 0 ? _c : [])}
        `;
        const buttonsElements = Array.from(prompt.querySelectorAll("button"));
        merge(...buttonsElements.map((b) => fromEvent(b, "click").pipe(map(() => b.dataset.key))), fromEvent(prompt, "cancel").pipe(map(() => "dismiss")))
            .pipe(take(1))
            .subscribe({ next: res, complete: () => element.remove() });
        options.container.appendChild(element);
        prompt.showModal();
    });
}
//# sourceMappingURL=dialog.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/hash.js
const computeHash = (str) => {
    let h1 = 0xdeadbeef;
    let h2 = 0x41c6ce57;
    for (let i = 0; i < str.length; i++) {
        const ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
    return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(16);
};
//# sourceMappingURL=hash.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/legal/legalPrompt.js






const snapIcon = `
<svg xmlns="http://www.w3.org/2000/svg" role="img" viewBox="0 0 32 32" height="48px">
    <g>
        <path
            d="M 30.898 23.477 C 30.77 23.045 30.148 22.743 30.148 22.743 C 30.092 22.71 30.039 22.684 29.994 22.663 C 28.962 22.161 28.048 21.561 27.277 20.876 C 26.659 20.325 26.128 19.719 25.701 19.074 C 25.182 18.288 24.937 17.632 24.831 17.275 C 24.773 17.043 24.782 16.951 24.831 16.832 C 24.873 16.731 24.99 16.632 25.049 16.588 C 25.397 16.341 25.96 15.976 26.303 15.75 C 26.602 15.556 26.859 15.389 27.009 15.283 C 27.494 14.944 27.824 14.596 28.02 14.223 C 28.275 13.74 28.303 13.208 28.107 12.684 C 27.84 11.978 27.184 11.556 26.35 11.556 C 26.163 11.556 25.974 11.577 25.785 11.62 C 25.308 11.723 24.852 11.894 24.474 12.042 C 24.446 12.054 24.416 12.032 24.418 12.002 C 24.457 11.059 24.502 9.79 24.399 8.584 C 24.306 7.493 24.082 6.576 23.717 5.776 C 23.351 4.972 22.874 4.376 22.5 3.947 C 22.143 3.536 21.519 2.936 20.577 2.394 C 19.251 1.631 17.742 1.244 16.09 1.244 C 14.443 1.244 12.934 1.631 11.605 2.394 C 10.607 2.966 9.97 3.614 9.678 3.947 C 9.304 4.376 8.827 4.972 8.46 5.776 C 8.096 6.576 7.872 7.496 7.778 8.584 C 7.673 9.792 7.715 10.96 7.76 11.999 C 7.762 12.03 7.732 12.051 7.704 12.039 C 7.325 11.892 6.87 11.72 6.393 11.617 C 6.204 11.575 6.012 11.554 5.828 11.554 C 4.994 11.554 4.337 11.976 4.071 12.682 C 3.875 13.205 3.903 13.738 4.157 14.221 C 4.354 14.594 4.685 14.941 5.169 15.281 C 5.318 15.387 5.575 15.553 5.874 15.748 C 6.211 15.968 6.758 16.323 7.108 16.569 C 7.152 16.599 7.299 16.712 7.346 16.827 C 7.397 16.951 7.404 17.045 7.341 17.289 C 7.234 17.648 6.989 18.298 6.479 19.069 C 6.052 19.715 5.522 20.32 4.902 20.871 C 4.132 21.556 3.218 22.157 2.186 22.658 C 2.137 22.682 2.078 22.712 2.015 22.748 C 2.015 22.748 1.399 23.064 1.282 23.472 C 1.109 24.075 1.567 24.64 2.036 24.943 C 2.8 25.438 3.732 25.703 4.272 25.849 C 4.421 25.889 4.559 25.926 4.683 25.964 C 4.76 25.989 4.956 26.062 5.038 26.17 C 5.143 26.306 5.155 26.473 5.192 26.66 C 5.253 26.977 5.384 27.373 5.774 27.643 C 6.204 27.941 6.75 27.962 7.444 27.99 C 8.168 28.018 9.07 28.054 10.1 28.394 C 10.579 28.553 11.011 28.818 11.514 29.128 C 12.56 29.773 13.864 30.578 16.09 30.578 C 18.318 30.578 19.629 29.768 20.685 29.119 C 21.183 28.811 21.612 28.546 22.08 28.391 C 23.11 28.049 24.011 28.014 24.735 27.988 C 25.427 27.962 25.974 27.941 26.404 27.641 C 26.822 27.35 26.943 26.918 26.997 26.59 C 27.027 26.428 27.046 26.285 27.14 26.165 C 27.219 26.064 27.399 25.992 27.483 25.964 C 27.609 25.924 27.751 25.886 27.906 25.844 C 28.445 25.698 29.123 25.527 29.945 25.061 C 30.933 24.511 31.001 23.82 30.898 23.477"
            fill="#ffffff"
            stroke="#00000000"
            stroke-width="1"
        />
    </g>
    <g>
        <path
            d="M 29.56 24.299 C 28.21 25.045 27.312 24.965 26.613 25.414 C 26.021 25.795 26.37 26.618 25.939 26.915 C 25.411 27.279 23.843 26.889 21.822 27.555 C 20.155 28.107 19.09 29.689 16.089 29.689 C 13.081 29.689 12.047 28.114 10.357 27.555 C 8.335 26.889 6.768 27.279 6.24 26.915 C 5.809 26.618 6.16 25.795 5.566 25.414 C 4.869 24.965 3.969 25.045 2.619 24.299 C 1.758 23.825 2.247 23.53 2.532 23.393 C 7.426 21.027 8.204 17.372 8.24 17.096 C 8.282 16.769 8.328 16.509 7.966 16.175 C 7.615 15.853 6.066 14.895 5.636 14.593 C 4.925 14.098 4.612 13.6 4.841 12.99 C 5 12.569 5.395 12.41 5.812 12.41 C 5.94 12.41 6.071 12.426 6.2 12.452 C 6.981 12.623 7.741 13.013 8.179 13.118 C 8.24 13.132 8.293 13.139 8.34 13.139 C 8.574 13.139 8.656 13.022 8.639 12.754 C 8.59 11.9 8.469 10.234 8.602 8.677 C 8.787 6.536 9.477 5.476 10.298 4.538 C 10.693 4.087 12.543 2.133 16.082 2.133 C 19.633 2.133 21.474 4.087 21.867 4.538 C 22.688 5.478 23.378 6.536 23.563 8.677 C 23.698 10.234 23.581 11.898 23.525 12.754 C 23.506 13.034 23.591 13.139 23.825 13.139 C 23.872 13.139 23.925 13.132 23.986 13.118 C 24.426 13.013 25.184 12.62 25.965 12.452 C 26.091 12.424 26.222 12.41 26.353 12.41 C 26.77 12.41 27.165 12.569 27.324 12.99 C 27.555 13.6 27.242 14.095 26.529 14.593 C 26.098 14.892 24.547 15.85 24.199 16.175 C 23.836 16.509 23.883 16.767 23.925 17.096 C 23.96 17.372 24.739 21.025 29.633 23.393 C 29.932 23.53 30.421 23.825 29.56 24.299 M 31.709 23.12 C 31.489 22.523 31.07 22.203 30.594 21.939 C 30.505 21.887 30.423 21.845 30.355 21.812 C 30.212 21.74 30.067 21.667 29.922 21.592 C 28.435 20.806 27.275 19.812 26.469 18.635 C 26.198 18.238 26.008 17.88 25.877 17.587 C 25.809 17.391 25.811 17.281 25.86 17.178 C 25.898 17.101 25.996 17.019 26.05 16.979 C 26.305 16.811 26.57 16.64 26.748 16.525 C 27.067 16.319 27.317 16.156 27.481 16.043 C 28.093 15.617 28.519 15.164 28.786 14.658 C 29.163 13.945 29.21 13.131 28.919 12.363 C 28.517 11.301 27.509 10.642 26.291 10.642 C 26.038 10.642 25.783 10.67 25.527 10.726 C 25.46 10.74 25.394 10.756 25.328 10.773 C 25.34 10.05 25.324 9.278 25.258 8.524 C 25.029 5.872 24.099 4.48 23.129 3.371 C 22.724 2.908 22.021 2.232 20.964 1.628 C 19.491 0.781 17.821 0.356 16 0.356 C 14.185 0.356 12.518 0.781 11.044 1.623 C 9.983 2.229 9.278 2.905 8.875 3.366 C 7.905 4.475 6.975 5.867 6.746 8.52 C 6.68 9.273 6.663 10.045 6.675 10.768 C 6.61 10.752 6.544 10.735 6.476 10.721 C 6.221 10.665 5.965 10.637 5.713 10.637 C 4.494 10.637 3.487 11.297 3.084 12.359 C 2.794 13.126 2.841 13.94 3.218 14.654 C 3.485 15.159 3.911 15.613 4.522 16.039 C 4.686 16.153 4.937 16.314 5.256 16.52 C 5.427 16.633 5.68 16.794 5.926 16.958 C 5.963 16.984 6.097 17.082 6.141 17.173 C 6.193 17.279 6.195 17.393 6.118 17.604 C 5.987 17.891 5.801 18.242 5.535 18.631 C 4.747 19.782 3.62 20.757 2.18 21.536 C 1.419 21.941 0.54 22.355 0.29 23.118 C 0.039 23.88 0.203 24.582 0.842 25.239 C 1.053 25.466 1.318 25.665 1.653 25.85 C 2.438 26.283 3.105 26.496 3.63 26.641 C 3.721 26.669 3.937 26.736 4.031 26.819 C 4.265 27.022 4.23 27.331 4.543 27.78 C 4.731 28.061 4.949 28.25 5.129 28.374 C 5.783 28.826 6.516 28.854 7.294 28.881 C 7.997 28.908 8.793 28.94 9.702 29.24 C 10.079 29.364 10.47 29.605 10.922 29.883 C 12.011 30.552 13.501 31.467 15.998 31.467 C 18.493 31.467 19.995 30.547 21.091 29.876 C 21.541 29.6 21.93 29.361 22.297 29.242 C 23.206 28.942 24.003 28.912 24.706 28.884 C 25.483 28.854 26.216 28.826 26.87 28.377 C 27.076 28.234 27.331 28.004 27.535 27.651 C 27.76 27.272 27.753 27.003 27.964 26.821 C 28.05 26.746 28.238 26.68 28.338 26.65 C 28.868 26.505 29.545 26.292 30.344 25.852 C 30.697 25.658 30.976 25.443 31.192 25.2 C 31.194 25.197 31.196 25.192 31.199 25.19 C 31.805 24.544 31.955 23.787 31.709 23.12"
            fill="#000000"
            stroke="#00000000"
            stroke-width="1"
        />
    </g>
</svg>`;
function showTosDialog(title, titleText, body) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const result = yield showDialog({
            container: document.body,
            dataTestId: "tos-dialog",
            lang: supportedLocale,
            title,
            titleText,
            body,
            dismissButtonText: localizedString("legalPromptReject"),
            buttons: [
                {
                    text: localizedString("legalPromptAccept"),
                    key: "accept",
                },
            ],
        });
        return result === "accept";
    });
}
function showAdultOrChildDialog() {
    return showDialog({
        container: document.body,
        dataTestId: "adult-or-child-dialog",
        lang: supportedLocale,
        title: localizedString("legalPromptVariantGAdultOrChild"),
        buttons: [
            {
                text: localizedString("legalPromptVariantGAdult"),
                key: "adult",
            },
            {
                text: localizedString("legalPromptVariantGChild"),
                key: "child",
            },
        ],
    });
}
function showFindGuardianDialog() {
    return showDialog({
        container: document.body,
        dataTestId: "find-guardian-dialog",
        lang: supportedLocale,
        title: localizedString("legalPromptVariantGFindYourParent"),
        buttons: [
            {
                text: localizedString("legalPromptVariantGIAmGuardian"),
                key: "guardian",
            },
            {
                text: localizedString("legalPromptVariantGCancel"),
                key: "cancel",
                isSecondary: true,
            },
        ],
    });
}
const legalPromptFactory = Injectable("legalPrompt", () => {
    return function legalPrompt(privacyPolicy, termsOfService, learnMore, childrenProtectionActRestricted) {
        const legalMessage = childrenProtectionActRestricted
            ? localizedString("legalPromptVariantGMessage")
            : localizedString("legalPromptMessage")({
                privacyPolicyUrl: privacyPolicy.webUrl,
                termsOfServiceUrl: termsOfService.webUrl,
                learnMoreUrl: learnMore.webUrl,
            });
        const legalTitleText = localizedString("legalPromptTermsOfService");
        const legalTitle = childrenProtectionActRestricted ? legalTitleText : snapIcon;
        return {
            contentHash: computeHash(legalMessage),
            show() {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (!childrenProtectionActRestricted) {
                        return showTosDialog(legalTitle, legalTitleText, legalMessage);
                    }
                    while (true) {
                        const adultOrChild = yield showAdultOrChildDialog();
                        switch (adultOrChild) {
                            case "child": {
                                const findGuardian = yield showFindGuardianDialog();
                                switch (findGuardian) {
                                    case "cancel":
                                        continue;
                                    case "guardian":
                                        return showTosDialog(legalTitle, legalTitleText, legalMessage);
                                    case "dismiss":
                                        return false;
                                    default:
                                        assertUnreachable(findGuardian);
                                }
                            }
                            case "adult":
                                return showTosDialog(legalTitle, legalTitleText, legalMessage);
                            case "dismiss":
                                return false;
                            default:
                                assertUnreachable(adultOrChild);
                        }
                    }
                });
            },
        };
    };
});
//# sourceMappingURL=legalPrompt.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/legal/legalState.js










const legalState_logger = getLogger("LegalState");
const tosContentHashExpiry = 12 * 60 * 60;
const tosContentHashKey = "lastAcceptedTosContentHash";
const createLegalState = () => {
    const states = defineStates(defineState("unknown")(), defineState("accepted")(), defineState("rejected")());
    const actions = defineActions(defineAction("requestLegalPrompt")(), defineAction("accept")(), defineAction("reject")());
    return new StateMachine(actions, states, states.unknown(), (actions) => {
        return merge(actions.pipe(inStates("unknown"), forActions("accept"), map(() => states.accepted())), actions.pipe(inStates("unknown"), forActions("reject"), map(() => states.rejected())), actions.pipe(inStates("rejected"), forActions("requestLegalPrompt"), map(() => states.unknown())));
    });
};
const defaultLegalDocumentDate = new Date("2021-09-30T00:00:00+00:00");
const defaultLegalPrompt = LegalPrompt.fromPartial({
    documents: [
        LegalDocument.fromPartial({
            type: LegalDocument_Type.PRIVACY_POLICY,
            webUrl: "https://values.snap.com/privacy/privacy-policy",
            version: "1",
            timestamp: defaultLegalDocumentDate,
        }),
        LegalDocument.fromPartial({
            type: LegalDocument_Type.TERMS_OF_SERVICE,
            webUrl: "https://snap.com/terms",
            version: "1",
            timestamp: defaultLegalDocumentDate,
        }),
        LegalDocument.fromPartial({
            type: LegalDocument_Type.LEARN_MORE,
            webUrl: "https://support.snapchat.com/article/camera-information-use",
            version: "1",
            timestamp: defaultLegalDocumentDate,
        }),
    ],
    disabled: true,
});
const defaultInitConfig = GetInitializationConfigResponse.fromPartial({});
const hasAnyValue = (c) => {
    var _a, _b;
    return ((_b = (_a = c.value) === null || _a === void 0 ? void 0 : _a.anyValue) === null || _b === void 0 ? void 0 : _b.value) instanceof Uint8Array;
};
const getDocumentOrDefault = (documents) => (type) => {
    var _a;
    return ((_a = documents.find((d) => d.type === type)) !== null && _a !== void 0 ? _a : defaultLegalPrompt.documents.find((d) => d.type === type));
};
const legalStateFactory = Injectable("legalState", [remoteConfigurationFactory.token, legalPromptFactory.token], (remoteConfig, legalPrompt) => {
    const persistance = new ExpiringPersistence(() => tosContentHashExpiry, new IndexedDBPersistence({ databaseName: "Legal" }));
    const getLastAcceptedTosContentHash = () => from_from(persistance.retrieve(tosContentHashKey).catch((error) => legalState_logger.warn(error)));
    const setLastAcceptedTosContentHash = (hash) => persistance.store(tosContentHashKey, hash).catch((error) => legalState_logger.warn(error));
    const legalState = createLegalState();
    legalState.events
        .pipe(inStates("unknown"), forActions("requestLegalPrompt"), switchMap(() => forkJoin({
        cofConfig: remoteConfig.get("CAMERA_KIT_LEGAL_PROMPT").pipe(map((configResults) => {
            const config = configResults.find(hasAnyValue);
            if (!config)
                return defaultLegalPrompt;
            return LegalPrompt.decode(config.value.anyValue.value);
        }), catchError((error) => {
            legalState_logger.error(error);
            return of(defaultLegalPrompt);
        })),
        initConfig: remoteConfig.getInitializationConfig().pipe(catchError((error) => {
            legalState_logger.error(error);
            return of(defaultInitConfig);
        })),
    })), switchMap(({ cofConfig, initConfig }) => {
        var _a;
        if ((_a = initConfig.legalPrompt) === null || _a === void 0 ? void 0 : _a.disabled) {
            return of(legalState.actions.accept("disabled"));
        }
        if (cofConfig.disabled) {
            return of(legalState.actions.accept("disabled"));
        }
        const documentOfType = getDocumentOrDefault(cofConfig.documents);
        const prompt = legalPrompt(documentOfType(LegalDocument_Type.PRIVACY_POLICY), documentOfType(LegalDocument_Type.TERMS_OF_SERVICE), documentOfType(LegalDocument_Type.LEARN_MORE), initConfig.childrenProtectionActRestricted);
        return getLastAcceptedTosContentHash().pipe(switchMap((lastAcceptedTosContentHash) => {
            if (prompt.contentHash === lastAcceptedTosContentHash)
                return of(true);
            return prompt.show();
        }), map((didAccept) => {
            if (!didAccept)
                return legalState.actions.reject(prompt.contentHash);
            setLastAcceptedTosContentHash(prompt.contentHash);
            return legalState.actions.accept(prompt.contentHash);
        }));
    }), dispatch(legalState))
        .subscribe({
        error: legalState_logger.error,
    });
    return legalState;
});
//# sourceMappingURL=legalState.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/defer.js


function defer(observableFactory) {
    return new Observable_Observable(function (subscriber) {
        innerFrom_innerFrom(observableFactory()).subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/finalize.js

function finalize(callback) {
    return operate(function (source, subscriber) {
        try {
            source.subscribe(subscriber);
        }
        finally {
            subscriber.add(callback);
        }
    });
}
//# sourceMappingURL=finalize.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/observable-operators/unsubscribed.js

function unsubscribed(callback) {
    return (source) => defer(() => {
        let completedOrErrored = false;
        return source.pipe(tap({
            complete: () => (completedOrErrored = true),
            error: () => (completedOrErrored = true),
        }), finalize(() => {
            if (completedOrErrored)
                return;
            callback();
        }));
    });
}
//# sourceMappingURL=unsubscribed.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/fetchWatermarkLens.js






const fetchWatermarkLens_logger = getLogger("fetchWatermarkLens");
const watermarksLensGroup = "watermarks";
const fetchWatermarkLens = Injectable("fetchWatermarkLens", [remoteConfigurationFactory.token, lensRepositoryFactory.token], (remoteConfiguration, lensRepository) => {
    remoteConfiguration
        .getInitializationConfig()
        .pipe(take(1))
        .subscribe({
        next: (config) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            if (config.watermarkEnabled) {
                const lens = yield lensRepository.loadLens("", watermarksLensGroup);
                yield lensRepository.cacheLensContent([lens]);
            }
        }),
        error: fetchWatermarkLens_logger.error,
    });
});
//# sourceMappingURL=fetchWatermarkLens.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/userDataAccessResolver.js

const userDataAccessResolverFactory = Injectable("userDataAccessResolver", () => () => "unrestricted");
//# sourceMappingURL=userDataAccessResolver.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/lensState.js


















const lensState_logger = getLogger("LensState");
const createLensState = () => {
    const actions = defineActions(defineAction("applyLens")(), defineAction("downloadComplete")(), defineAction("turnedOn")(), defineAction("resourcesLoaded")(), defineAction("firstFrameProcessed")(), defineAction("applyLensComplete")(), defineAction("applyLensFailed")(), defineAction("applyLensAborted")(), defineAction("removeLens")(), defineAction("turnedOff")(), defineAction("removeLensComplete")(), defineAction("removeLensFailed")());
    const states = defineStates(defineState("noLensApplied")(), defineState("applyingLens")(), defineState("lensApplied")());
    return new StateMachine(actions, states, states.noLensApplied(), (events) => merge(events.pipe(inStates("noLensApplied", "applyingLens", "lensApplied"), forActions("applyLens"), map(([a]) => states.applyingLens(a.data.lens))), events.pipe(inStates("applyingLens"), forActions("applyLensComplete"), map(([a]) => states.lensApplied(a.data))), events.pipe(inStates("applyingLens"), forActions("applyLensFailed"), map(() => states.noLensApplied())), events.pipe(inStates("lensApplied"), forActions("removeLensComplete"), map(() => states.noLensApplied()))));
};
const lensStateFactory = Injectable("lensState", [
    lensCoreFactory.token,
    lensRepositoryFactory.token,
    lensAssetRepositoryFactory.token,
    lensPersistenceStoreFactory.token,
    legalStateFactory.token,
    metricsClientFactory.token,
    remoteConfigurationFactory.token,
    userDataAccessResolverFactory.token,
], (lensCore, lensRepository, lensAssetRepository, lensPersistence, legalState, metrics, remoteConfig, getUserDataAccess) => {
    const lensState = createLensState();
    let firstLensApply = true;
    lensState.events
        .pipe(forActions("applyLens"), exhaustMap(([a]) => of(legalState.actions.requestLegalPrompt()).pipe(dispatch(legalState), inStates("accepted", "rejected"), take(1), map(([, { name }]) => {
        if (name === "accepted")
            return a;
        return lensState.actions.applyLensFailed({
            error: legalError(`Failed to apply lens ${a.data.lens.id}. Required legal terms were not accepted.`),
            lens: a.data.lens,
        });
    }))), switchMap((a) => {
        if (a.name === "applyLensFailed")
            return of(a);
        const { lens } = a.data;
        const dispatch = (action) => {
            lensState.dispatch(action, lens);
        };
        const applyTimer = new Timer("lens").mark("apply", { first: `${firstLensApply}` });
        firstLensApply = false;
        return forkJoin({
            watermarkInput: remoteConfig.getInitializationConfig().pipe(mergeMap((config) => {
                if (!config.watermarkEnabled)
                    return of(undefined);
                return from_from(lensRepository.loadLens("", watermarksLensGroup)).pipe(mergeMap((watermark) => from_from(lensRepository.getLensContent(watermark)).pipe(map(({ lensBuffer, lensChecksum }) => {
                    return {
                        lensId: watermark.id,
                        lensDataBuffer: lensBuffer.slice(0),
                        lensChecksum,
                        launchData: new ArrayBuffer(0),
                    };
                }))));
            })),
            lensInput: of(a.data).pipe(mergeMap(({ lens, launchData }) => {
                return from_from(lensPersistence.retrieve(lens.id).catch(() => undefined)).pipe(map((persistentStore) => ({ lens, launchData, persistentStore })));
            }), map(({ lens, launchData, persistentStore }) => {
                const lensDetails = lensRepository.getLensMetadata(lens.id);
                if (!lensDetails) {
                    throw new Error(`Cannot apply lens ${lens.id}. It has not been loaded by the Lens ` +
                        `repository. Use CameraKit.lensRepository.loadLens (or loadLensGroups) ` +
                        `to load lens metadata before calling CameraKitSession.applyLens.`);
                }
                const { content, isThirdParty } = lensDetails;
                if (!content) {
                    throw new Error(`Cannot apply lens ${lens.id}. Metadata retrieved for this lens does not ` +
                        `include the lens content URL.`);
                }
                return {
                    lens,
                    launchData: encodeLensLaunchData(launchData !== null && launchData !== void 0 ? launchData : {}, persistentStore !== null && persistentStore !== void 0 ? persistentStore : new ArrayBuffer(0)),
                    content,
                    isThirdParty,
                };
            }), mergeMap(({ lens, launchData, content, isThirdParty }) => {
                const networkTimer = applyTimer.mark("network");
                return from_from(Promise.all([
                    lensRepository.getLensContent(lens).finally(() => networkTimer.measure("lens")),
                    isThirdParty ? getUserDataAccess(lens) : undefined,
                    content.assetManifest.length > 0
                        ? lensAssetRepository
                            .cacheAssets(content.assetManifest, lens)
                            .finally(() => networkTimer.measure("assets"))
                        : Promise.resolve(),
                ])).pipe(tap(() => {
                    networkTimer.measure();
                    lensState.dispatch("downloadComplete", lens);
                }), map(([{ lensBuffer, lensChecksum }, userDataAccess]) => {
                    const lensDataBuffer = lensBuffer.slice(0);
                    return {
                        lensId: lens.id,
                        lensDataBuffer,
                        lensChecksum,
                        launchData,
                        apiVisibility: isThirdParty
                            ? lensCore.LensApiVisibility.Public
                            : lensCore.LensApiVisibility.Private,
                        publicApiUserDataAccess: userDataAccess === "restricted"
                            ? lensCore.UserDataAccess.Restricted
                            : lensCore.UserDataAccess.Unrestricted,
                    };
                }));
            })),
        }).pipe(takeUntil(lensState.events.pipe(forActions("removeLens"))), mergeMap(({ lensInput, watermarkInput }) => new Observable_Observable((subscriber) => {
            const coreTimer = applyTimer.mark("core");
            lensCore
                .replaceLenses({
                lenses: [
                    Object.assign(Object.assign({}, lensInput), { onTurnOn: () => dispatch("turnedOn"), onResourcesLoaded: () => dispatch("resourcesLoaded"), onFirstFrameProcessed: () => {
                            coreTimer.measure("first-frame");
                            applyTimer.measure("success");
                            applyTimer.stopAndReport(metrics);
                            dispatch("firstFrameProcessed");
                        }, onTurnOff: () => dispatch("turnedOff") }),
                    ...(watermarkInput ? [watermarkInput] : []),
                ],
            })
                .then(() => {
                coreTimer.measure("success");
                subscriber.next(lensState.actions.applyLensComplete(lens));
                subscriber.complete();
            })
                .catch((lensCoreError) => {
                coreTimer.measure("failure");
                applyTimer.measure("failure");
                applyTimer.stopAndReport(metrics);
                const message = `Failed to apply lens ${lensInput.lensId}.`;
                const error = /validation failed/.test(lensCoreError.message)
                    ? lensContentValidationError(message, lensCoreError)
                    : lensError(message, lensCoreError);
                subscriber.next(lensState.actions.applyLensFailed({ error, lens }));
                subscriber.complete();
            });
        })), catchError((error) => {
            applyTimer.measure("failure");
            applyTimer.stopAndReport(metrics);
            return of(lensState.actions.applyLensFailed({ error, lens }));
        }), unsubscribed(() => {
            applyTimer.measure("abort");
            applyTimer.stopAndReport(metrics);
        }));
    }), dispatch(lensState))
        .subscribe({
        error: lensState_logger.error,
    });
    lensState.events
        .pipe(inStates("lensApplied", "noLensApplied"), forActions("removeLens"), mergeMap(() => new Observable_Observable((subscriber) => {
        lensCore
            .clearAllLenses()
            .then(() => {
            subscriber.next(lensState.actions.removeLensComplete());
            subscriber.complete();
        })
            .catch((lensCoreError) => {
            const error = new Error("Failed to remove lenses.", { cause: lensCoreError });
            subscriber.next(lensState.actions.removeLensFailed(error));
            subscriber.complete();
        });
    })), dispatch(lensState))
        .subscribe({
        error: lensState_logger.error,
    });
    lensState.events
        .pipe(inStates("applyingLens"), forActions("removeLens"), switchMap(([a]) => lensState.events.pipe(inStates("lensApplied"), takeUntil(lensState.events.pipe(forActions("applyLens"))), map(() => a))), dispatch(lensState))
        .subscribe({
        error: lensState_logger.error,
    });
    lensState.events.subscribe(([a, s]) => {
        const data = extractLoggableData(a);
        lensState_logger.debug(`Action: "${a.name}", state: "${s.name}"${data ? ", data: " + JSON.stringify(data) : ""}`);
    });
    return lensState;
});
function extractLoggableData(action) {
    switch (action.name) {
        case "applyLens":
            return { lensId: action.data.lens.id };
        case "applyLensFailed":
            return { lensId: action.data.lens.id, error: action.data.error.message };
        case "downloadComplete":
        case "turnedOn":
        case "resourcesLoaded":
        case "firstFrameProcessed":
        case "applyLensComplete":
        case "applyLensAborted":
        case "turnedOff":
            return { lensId: action.data.id };
        case "removeLens":
        case "removeLensComplete":
            return undefined;
        case "removeLensFailed":
            return { error: action.data.message };
        default:
            assertUnreachable(action);
    }
}
//# sourceMappingURL=lensState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/sessionState.js



const createSessionState = () => {
    const actions = defineActions(defineAction("suspend")(), defineAction("resume")(), defineAction("destroy")());
    const states = defineStates(defineState("inactive")(), defineState("active")(), defineState("destroyed")());
    return new StateMachine(actions, states, defineState("inactive")()(), (events) => {
        return merge(events.pipe(forActions("resume"), map(([a]) => states.active(a.data))), events.pipe(forActions("suspend"), map(() => states.inactive())), events.pipe(forActions("destroy"), map(() => states.destroyed())));
    });
};
const sessionStateFactory = Injectable("sessionState", () => createSessionState());
//# sourceMappingURL=sessionState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/LensKeyboard.js





class LensKeyboard {
    constructor(lensState) {
        this.lensState = lensState;
        this.active = false;
        this.element = document.createElement("textarea");
        this.element.addEventListener("keypress", (event) => {
            if (event.code === "Enter" && !event.shiftKey) {
                event.preventDefault();
                this.handleReply(this.element.value);
            }
        });
        this.events = new TypedEventTarget();
        this.handleReply = () => { };
        this.uriHandler = {
            uri: "app://textInput/requestKeyboard",
            handleRequest: (_request, reply) => {
                this.element.autofocus = true;
                this.handleReply = (text) => {
                    const opt = {
                        text: text,
                        start: text.length,
                        end: text.length,
                        done: true,
                        shouldNotify: true,
                    };
                    const output = new TextEncoder().encode(JSON.stringify(opt));
                    reply({
                        code: 200,
                        description: "",
                        contentType: "application/json",
                        data: output,
                    });
                };
                this.active = true;
                this.updateStatus();
                this.element.focus();
            },
        };
        lensState.events.pipe(forActions("turnedOff")).subscribe(() => {
            this.dismiss();
        });
    }
    dismiss() {
        if (this.active) {
            this.active = false;
            this.element.value = "";
            this.updateStatus();
        }
    }
    getElement() {
        return this.element;
    }
    sendInputToLens(text) {
        this.element.value = text;
        this.handleReply(text);
    }
    addEventListener(type, callback, options) {
        this.events.addEventListener(type, callback, options);
    }
    removeEventListener(type, callback) {
        this.events.removeEventListener(type, callback);
    }
    toPublicInterface() {
        return {
            addEventListener: this.addEventListener.bind(this),
            removeEventListener: this.removeEventListener.bind(this),
            getElement: this.getElement.bind(this),
            sendInputToLens: this.sendInputToLens.bind(this),
            dismiss: this.dismiss.bind(this),
        };
    }
    updateStatus() {
        const state = this.lensState.getState();
        if (isState(state, "noLensApplied"))
            return;
        this.events.dispatchEvent(new TypedCustomEvent("active", {
            element: this.element,
            active: this.active,
            lens: state.data,
        }));
    }
}
const lensKeyboardFactory = Injectable("lensKeyboard", [lensStateFactory.token], (lensState) => new LensKeyboard(lensState));
//# sourceMappingURL=LensKeyboard.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/CameraKitSessionEvents.js
const isReachable = (_) => false;
function isPublicLensError(value) {
    if (!(value instanceof Error))
        return false;
    const maybeSessionErrorName = value.name;
    switch (maybeSessionErrorName) {
        case "LensAbortError":
        case "LensExecutionError":
        case "LensImagePickerError":
            return true;
        default:
            return isReachable(maybeSessionErrorName);
    }
}
//# sourceMappingURL=CameraKitSessionEvents.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/session/CameraKitSession.js
























const CameraKitSession_logger = getLogger("CameraKitSession");
function isAllowedSource(value) {
    return isCameraKitSource(value) || isMediaStream(value) || isHTMLVideoElement(value);
}
function isMediaStream(value) {
    return value instanceof MediaStream;
}
function isHTMLVideoElement(value) {
    return value instanceof HTMLVideoElement;
}
function isRenderTargetOrUndefined(value) {
    return isUndefined(value) || value === "live" || value === "capture";
}
let CameraKitSession_CameraKitSession = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _applyLens_decorators;
    let _removeLens_decorators;
    let _play_decorators;
    let _pause_decorators;
    let _mute_decorators;
    let _unmute_decorators;
    let _setSource_decorators;
    let _setFPSLimit_decorators;
    let _destroy_decorators;
    return _a = class CameraKitSession {
            constructor(keyboard, lensCore, sessionState, lensState, logEntries, pageVisibility) {
                this.keyboard = (__runInitializers(this, _instanceExtraInitializers), keyboard);
                this.lensCore = lensCore;
                this.sessionState = sessionState;
                this.lensState = lensState;
                this.events = new TypedEventTarget();
                const outputs = this.lensCore.getOutputCanvases();
                this.output = {
                    live: outputs[this.lensCore.CanvasType.Preview.value],
                    capture: outputs[this.lensCore.CanvasType.Capture.value],
                };
                this.playing = {
                    live: false,
                    capture: false,
                };
                this.metrics = new LensPerformanceMetrics(this.lensCore);
                const removeOnHidden = pageVisibility.onPageHidden(() => this.sessionState.dispatch("suspend", this));
                const removeOnVisible = pageVisibility.onPageVisible(() => this.sessionState.dispatch("resume", this));
                this.removePageVisibilityHandlers = () => {
                    removeOnHidden();
                    removeOnVisible();
                };
                this.subscriptions = [
                    lensCore.errors
                        .pipe(filter((error) => error.name === "LensCoreAbortError"))
                        .subscribe(() => this.destroy()),
                    lensCore.errors
                        .pipe(filter((error) => error.name !== "LensCoreAbortError" && error.isFrameError))
                        .subscribe(() => this.removeLens()),
                    logEntries
                        .pipe(filter((entry) => entry.level === "error"), map((entry) => entry.messages.find((e) => e instanceof Error)), filter(isPublicLensError))
                        .subscribe((error) => {
                        const state = lensState.getState();
                        if (!isState(state, "noLensApplied")) {
                            this.events.dispatchEvent(new TypedCustomEvent("error", { error, lens: state.data }));
                        }
                        else {
                            CameraKitSession_logger.warn("Lens error occurred even though there is no active lens.", error);
                        }
                    }),
                ];
            }
            applyLens(lens, launchData) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const action = this.lensState.actions.applyLens({ lens, launchData });
                    return firstValueFrom(of(action).pipe(dispatch(this.lensState), takeUntil(this.lensState.events.pipe(forActions("applyLens"), filter(([a]) => a !== action))), tap(([a]) => {
                        if (isAction(a, "applyLensFailed") && a.data.lens.id === lens.id)
                            throw a.data.error;
                    }), inStates("lensApplied"), map(() => true)), { defaultValue: false });
                });
            }
            removeLens() {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (isState(this.lensState.getState(), "noLensApplied"))
                        return true;
                    return firstValueFrom(of(this.lensState.actions.removeLens()).pipe(dispatch(this.lensState), tap(([a]) => {
                        if (isAction(a, "removeLensFailed"))
                            throw a.data;
                    }), inStates("noLensApplied"), takeUntil(this.lensState.events.pipe(forActions("applyLens"))), map(() => true)), { defaultValue: false });
                });
            }
            play(target = "live") {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (this.playing[target])
                        return;
                    this.playing[target] = true;
                    const type = this.renderTargetToCanvasType(target);
                    return this.lensCore.playCanvas({ type }).catch((error) => {
                        this.playing[target] = false;
                        throw error;
                    });
                });
            }
            pause(target = "live") {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (this.playing[target] === false)
                        return;
                    this.playing[target] = false;
                    const type = this.renderTargetToCanvasType(target);
                    return this.lensCore.pauseCanvas({ type }).catch((error) => {
                        this.playing[target] = true;
                        throw error;
                    });
                });
            }
            mute(fade = false) {
                this.lensCore.setAllSoundsMuted({
                    muted: true,
                    fade,
                });
            }
            unmute(fade = false) {
                this.lensCore.setAllSoundsMuted({
                    muted: false,
                    fade,
                });
            }
            setSource(source, options = {}) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    yield this.safelyDetachSource();
                    const cameraKitSource = isMediaStream(source)
                        ? createMediaStreamSource(source, options)
                        : isHTMLVideoElement(source)
                            ? createVideoSource(source, options)
                            : source;
                    const priorPlayingState = this.playing;
                    this.playing = {
                        live: false,
                        capture: false,
                    };
                    yield cameraKitSource.attach(this.lensCore, (error) => {
                        CameraKitSession_logger.error(cameraKitSourceError("Error occurred during source attachment.", error));
                    });
                    this.source = cameraKitSource;
                    if (priorPlayingState.live)
                        yield this.play("live");
                    if (priorPlayingState.capture)
                        yield this.play("capture");
                    return cameraKitSource;
                });
            }
            setFPSLimit(fpsLimit) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const fps = fpsLimit < Number.POSITIVE_INFINITY ? fpsLimit : 0;
                    return this.lensCore.setFPSLimit({ fps });
                });
            }
            destroy() {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.lensCore.clearAllLenses();
                        yield this.lensCore.teardown();
                    }
                    catch (error) {
                        CameraKitSession_logger.warn("An error occurred in LensCore during the session termination process.", error);
                    }
                    this.subscriptions.forEach((sub) => sub.unsubscribe());
                    yield this.safelyDetachSource();
                    this.removePageVisibilityHandlers();
                    this.sessionState.dispatch("destroy", undefined);
                });
            }
            renderTargetToCanvasType(target) {
                return target === "capture" ? this.lensCore.CanvasType.Capture : this.lensCore.CanvasType.Preview;
            }
            safelyDetachSource() {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (this.source) {
                        try {
                            yield this.source.detach((error) => {
                                CameraKitSession_logger.error(cameraKitSourceError("Error occurred during source detachment.", error));
                            });
                        }
                        catch (error) {
                            CameraKitSession_logger.error(cameraKitSourceError(`Detaching prior source of type ${getTypeName(this.source)} failed.`, error));
                        }
                    }
                });
            }
        },
        (() => {
            _applyLens_decorators = [validate_validate(isLens, isLensLaunchDataOrUndefined), errorLoggingDecorator(CameraKitSession_logger)];
            _removeLens_decorators = [errorLoggingDecorator(CameraKitSession_logger)];
            _play_decorators = [validate_validate(isRenderTargetOrUndefined), errorLoggingDecorator(CameraKitSession_logger)];
            _pause_decorators = [validate_validate(isRenderTargetOrUndefined), errorLoggingDecorator(CameraKitSession_logger)];
            _mute_decorators = [errorLoggingDecorator(CameraKitSession_logger)];
            _unmute_decorators = [errorLoggingDecorator(CameraKitSession_logger)];
            _setSource_decorators = [validate_validate(isAllowedSource, isPartialCameraKitDeviceOptionsOrUndefined), errorLoggingDecorator(CameraKitSession_logger)];
            _setFPSLimit_decorators = [validate_validate(isValidNumber), errorLoggingDecorator(CameraKitSession_logger)];
            _destroy_decorators = [errorLoggingDecorator(CameraKitSession_logger)];
            __esDecorate(_a, null, _applyLens_decorators, { kind: "method", name: "applyLens", static: false, private: false, access: { has: obj => "applyLens" in obj, get: obj => obj.applyLens } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _removeLens_decorators, { kind: "method", name: "removeLens", static: false, private: false, access: { has: obj => "removeLens" in obj, get: obj => obj.removeLens } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _play_decorators, { kind: "method", name: "play", static: false, private: false, access: { has: obj => "play" in obj, get: obj => obj.play } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _pause_decorators, { kind: "method", name: "pause", static: false, private: false, access: { has: obj => "pause" in obj, get: obj => obj.pause } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _mute_decorators, { kind: "method", name: "mute", static: false, private: false, access: { has: obj => "mute" in obj, get: obj => obj.mute } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _unmute_decorators, { kind: "method", name: "unmute", static: false, private: false, access: { has: obj => "unmute" in obj, get: obj => obj.unmute } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setSource_decorators, { kind: "method", name: "setSource", static: false, private: false, access: { has: obj => "setSource" in obj, get: obj => obj.setSource } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setFPSLimit_decorators, { kind: "method", name: "setFPSLimit", static: false, private: false, access: { has: obj => "setFPSLimit" in obj, get: obj => obj.setFPSLimit } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _destroy_decorators, { kind: "method", name: "destroy", static: false, private: false, access: { has: obj => "destroy" in obj, get: obj => obj.destroy } }, null, _instanceExtraInitializers);
        })(),
        _a;
})();

const cameraKitSessionFactory = Injectable("CameraKitSession", [
    lensCoreFactory.token,
    logEntriesFactory.token,
    lensKeyboardFactory.token,
    sessionStateFactory.token,
    lensStateFactory.token,
    pageVisibilityFactory.token,
], (lensCore, logEntries, keyboard, sessionState, lensState, pageVisibility) => new CameraKitSession_CameraKitSession(keyboard, lensCore, sessionState, lensState, logEntries, pageVisibility));
//# sourceMappingURL=CameraKitSession.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/assets/LensAssetsProvider.js









const LensAssetsProvider_logger = getLogger("LensAssetProvider");
const maxConsecutiveErrors = 3;
const registerLensAssetsProvider = Injectable("registerLensAssetsProvider", [
    lensCoreFactory.token,
    lensRepositoryFactory.token,
    lensAssetRepositoryFactory.token,
    lensStateFactory.token,
], (lensCore, lensRepository, lensAssetRepository, lensState) => {
    const consecutiveErrorsPerAsset = new Map();
    lensCore.setRemoteAssetsProvider((assetDescriptor) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        const { assetId, assetType, effectId } = assetDescriptor;
        try {
            if (((_a = consecutiveErrorsPerAsset.get(assetId)) !== null && _a !== void 0 ? _a : 0) > maxConsecutiveErrors) {
                throw new Error(`Maximum consecutive asset load errors reached for asset ${assetId}`);
            }
            const lensId = effectId !== null && effectId !== void 0 ? effectId : (_b = lensState.getState().data) === null || _b === void 0 ? void 0 : _b.id;
            const lens = lensId ? lensRepository.getLensMetadata(lensId) : undefined;
            yield lensAssetRepository.loadAsset({
                assetDescriptor,
                lens: lens && toPublicLens(lens),
                assetManifest: (_d = (_c = lens === null || lens === void 0 ? void 0 : lens.content) === null || _c === void 0 ? void 0 : _c.assetManifest) !== null && _d !== void 0 ? _d : [],
                lowPriority: false,
            });
            consecutiveErrorsPerAsset.set(assetId, 0);
        }
        catch (error) {
            lensCore.provideRemoteAssetsResponse({
                assetId,
                assetType,
            });
            const consecutiveErrors = ((_e = consecutiveErrorsPerAsset.get(assetId)) !== null && _e !== void 0 ? _e : 0) + 1;
            consecutiveErrorsPerAsset.set(assetId, consecutiveErrors);
            if (consecutiveErrors <= maxConsecutiveErrors) {
                LensAssetsProvider_logger.error(lensAssetError(`Error occurred while handling lens asset ${assetId} request.`, error));
            }
            else {
                LensAssetsProvider_logger.warn(`Maximum consecutive asset load errors reached for asset ${assetId}`);
            }
        }
    }));
});
//# sourceMappingURL=LensAssetsProvider.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/remote_api_spec.js

const remote_api_spec_protobufPackage = "com.snap.camerakit.v3";
var RemoteEndpoint_HttpRequestMethod;
(function (RemoteEndpoint_HttpRequestMethod) {
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["METHOD_UNSET"] = 0] = "METHOD_UNSET";
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["GET"] = 1] = "GET";
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["POST"] = 2] = "POST";
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["PUT"] = 3] = "PUT";
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["DELETE"] = 4] = "DELETE";
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["PATCH"] = 5] = "PATCH";
    RemoteEndpoint_HttpRequestMethod[RemoteEndpoint_HttpRequestMethod["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RemoteEndpoint_HttpRequestMethod || (RemoteEndpoint_HttpRequestMethod = {}));
var RemoteParameter_ParameterLocation;
(function (RemoteParameter_ParameterLocation) {
    RemoteParameter_ParameterLocation[RemoteParameter_ParameterLocation["LOCATION_UNSET"] = 0] = "LOCATION_UNSET";
    RemoteParameter_ParameterLocation[RemoteParameter_ParameterLocation["QUERY"] = 1] = "QUERY";
    RemoteParameter_ParameterLocation[RemoteParameter_ParameterLocation["HEADER"] = 2] = "HEADER";
    RemoteParameter_ParameterLocation[RemoteParameter_ParameterLocation["PATH"] = 3] = "PATH";
    RemoteParameter_ParameterLocation[RemoteParameter_ParameterLocation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RemoteParameter_ParameterLocation || (RemoteParameter_ParameterLocation = {}));
function createBaseGetRemoteApiSpecsRequest() {
    return {};
}
const GetRemoteApiSpecsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRemoteApiSpecsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetRemoteApiSpecsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetRemoteApiSpecsRequest();
        return message;
    },
};
function createBaseGetRemoteApiSpecsResponse() {
    return { remoteApiSpecs: [] };
}
const GetRemoteApiSpecsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.remoteApiSpecs) {
            RemoteApiSpec.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRemoteApiSpecsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.remoteApiSpecs.push(RemoteApiSpec.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetRemoteApiSpecsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetRemoteApiSpecsResponse();
        message.remoteApiSpecs = ((_a = object.remoteApiSpecs) === null || _a === void 0 ? void 0 : _a.map((e) => RemoteApiSpec.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRemoteApiSpec() {
    return {
        id: "",
        host: "",
        endpoints: [],
        tlsRequired: false,
        maxRequestSizeBytes: 0,
        maxResponseSizeBytes: 0,
        maxResponseTimeMillis: 0,
    };
}
const RemoteApiSpec = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.host !== "") {
            writer.uint32(18).string(message.host);
        }
        for (const v of message.endpoints) {
            RemoteEndpoint.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.tlsRequired !== false) {
            writer.uint32(32).bool(message.tlsRequired);
        }
        if (message.maxRequestSizeBytes !== 0) {
            writer.uint32(40).int32(message.maxRequestSizeBytes);
        }
        if (message.maxResponseSizeBytes !== 0) {
            writer.uint32(48).int32(message.maxResponseSizeBytes);
        }
        if (message.maxResponseTimeMillis !== 0) {
            writer.uint32(56).int32(message.maxResponseTimeMillis);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteApiSpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.endpoints.push(RemoteEndpoint.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.tlsRequired = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.maxRequestSizeBytes = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.maxResponseSizeBytes = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.maxResponseTimeMillis = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RemoteApiSpec.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseRemoteApiSpec();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.host = (_b = object.host) !== null && _b !== void 0 ? _b : "";
        message.endpoints = ((_c = object.endpoints) === null || _c === void 0 ? void 0 : _c.map((e) => RemoteEndpoint.fromPartial(e))) || [];
        message.tlsRequired = (_d = object.tlsRequired) !== null && _d !== void 0 ? _d : false;
        message.maxRequestSizeBytes = (_e = object.maxRequestSizeBytes) !== null && _e !== void 0 ? _e : 0;
        message.maxResponseSizeBytes = (_f = object.maxResponseSizeBytes) !== null && _f !== void 0 ? _f : 0;
        message.maxResponseTimeMillis = (_g = object.maxResponseTimeMillis) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBaseRemoteEndpoint() {
    return { path: "", methods: [], parameters: [], refId: "" };
}
const RemoteEndpoint = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        writer.uint32(18).fork();
        for (const v of message.methods) {
            writer.int32(v);
        }
        writer.join();
        for (const v of message.parameters) {
            RemoteParameter.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.refId !== "") {
            writer.uint32(34).string(message.refId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteEndpoint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.methods.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.methods.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.parameters.push(RemoteParameter.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.refId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RemoteEndpoint.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRemoteEndpoint();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : "";
        message.methods = ((_b = object.methods) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.parameters = ((_c = object.parameters) === null || _c === void 0 ? void 0 : _c.map((e) => RemoteParameter.fromPartial(e))) || [];
        message.refId = (_d = object.refId) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseRemoteParameter() {
    return { name: "", location: 0, optional: false, externalName: "", defaultValue: "", constant: false };
}
const RemoteParameter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.location !== 0) {
            writer.uint32(16).int32(message.location);
        }
        if (message.optional !== false) {
            writer.uint32(24).bool(message.optional);
        }
        if (message.externalName !== "") {
            writer.uint32(34).string(message.externalName);
        }
        if (message.defaultValue !== "") {
            writer.uint32(42).string(message.defaultValue);
        }
        if (message.constant !== false) {
            writer.uint32(48).bool(message.constant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteParameter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.location = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.optional = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.externalName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.defaultValue = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.constant = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RemoteParameter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseRemoteParameter();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.location = (_b = object.location) !== null && _b !== void 0 ? _b : 0;
        message.optional = (_c = object.optional) !== null && _c !== void 0 ? _c : false;
        message.externalName = (_d = object.externalName) !== null && _d !== void 0 ? _d : "";
        message.defaultValue = (_e = object.defaultValue) !== null && _e !== void 0 ? _e : "";
        message.constant = (_f = object.constant) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
const RemoteApiSpecsDefinition = {
    name: "RemoteApiSpecs",
    fullName: "com.snap.camerakit.v3.RemoteApiSpecs",
    methods: {
        getRemoteApiSpecs: {
            name: "GetRemoteApiSpecs",
            requestType: GetRemoteApiSpecsRequest,
            requestStream: false,
            responseType: GetRemoteApiSpecsResponse,
            responseStream: false,
            options: { idempotencyLevel: "NO_SIDE_EFFECTS" },
        },
    },
};
//# sourceMappingURL=remote_api_spec.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/clients/remoteApiSpecsClient.js




const remoteApiSpecsClientFactory = Injectable("remoteApiSpecsClient", [grpcHandlerFactory.token], (grpcHandler) => createTsProtoClient(RemoteApiSpecsDefinition, grpcHandler));
//# sourceMappingURL=remoteApiSpecsClient.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isDate.js
function isDate_isValidDate(value) {
    return value instanceof Date && !isNaN(value);
}
//# sourceMappingURL=isDate.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/timer.js




function timer(dueTime, intervalOrScheduler, scheduler) {
    if (dueTime === void 0) { dueTime = 0; }
    if (scheduler === void 0) { scheduler = async_async; }
    var intervalDuration = -1;
    if (intervalOrScheduler != null) {
        if (isScheduler(intervalOrScheduler)) {
            scheduler = intervalOrScheduler;
        }
        else {
            intervalDuration = intervalOrScheduler;
        }
    }
    return new Observable_Observable(function (subscriber) {
        var due = isDate_isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
        if (due < 0) {
            due = 0;
        }
        var n = 0;
        return scheduler.schedule(function () {
            if (!subscriber.closed) {
                subscriber.next(n++);
                if (0 <= intervalDuration) {
                    this.schedule(undefined, intervalDuration);
                }
                else {
                    subscriber.complete();
                }
            }
        }, due);
    });
}
//# sourceMappingURL=timer.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/retry.js





function retry(configOrCount) {
    if (configOrCount === void 0) { configOrCount = Infinity; }
    var config;
    if (configOrCount && typeof configOrCount === 'object') {
        config = configOrCount;
    }
    else {
        config = {
            count: configOrCount,
        };
    }
    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
    return count <= 0
        ? identity_identity
        : operate(function (source, subscriber) {
            var soFar = 0;
            var innerSub;
            var subscribeForRetry = function () {
                var syncUnsub = false;
                innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                    if (resetOnSuccess) {
                        soFar = 0;
                    }
                    subscriber.next(value);
                }, undefined, function (err) {
                    if (soFar++ < count) {
                        var resub_1 = function () {
                            if (innerSub) {
                                innerSub.unsubscribe();
                                innerSub = null;
                                subscribeForRetry();
                            }
                            else {
                                syncUnsub = true;
                            }
                        };
                        if (delay != null) {
                            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom_innerFrom(delay(err, soFar));
                            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {
                                notifierSubscriber_1.unsubscribe();
                                resub_1();
                            }, function () {
                                subscriber.complete();
                            });
                            notifier.subscribe(notifierSubscriber_1);
                        }
                        else {
                            resub_1();
                        }
                    }
                    else {
                        subscriber.error(err);
                    }
                }));
                if (syncUnsub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    subscribeForRetry();
                }
            };
            subscribeForRetry();
        });
}
//# sourceMappingURL=retry.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/uri-handlers/uriRequestProcessor.js


function callCancellationHandler(cancellationHandlers, ...keys) {
    var _a;
    for (const key of keys) {
        (_a = cancellationHandlers.get(key)) === null || _a === void 0 ? void 0 : _a();
        cancellationHandlers.delete(key);
    }
}
function handleLensApplicationEnd(lensRequestState, ...lensIds) {
    for (const lensId of lensIds) {
        const state = lensRequestState.get(lensId);
        if (state) {
            callCancellationHandler(state.cancellationHandlers, ...state.cancellationHandlers.keys());
            lensRequestState.delete(lensId);
        }
    }
}
function createUriRequestProcessor({ uri, lensState, sessionState, createLensRequestState, processRequest, processInternalError, }) {
    const uriRequests = new Subject();
    const uriCancelRequests = new Subject();
    const lensRequestState = new Map();
    const lensTurnOffEvents = lensState.events.pipe(forActions("turnedOff"), tap(([action]) => handleLensApplicationEnd(lensRequestState, action.data.id)));
    const uriRequestEvents = uriRequests.pipe(map(({ request, lens, reply }) => {
        if (!lensRequestState.has(lens.id)) {
            const custom = createLensRequestState === null || createLensRequestState === void 0 ? void 0 : createLensRequestState(request, lens);
            const state = {
                cancellationHandlers: new Map(),
                custom: custom,
            };
            lensRequestState.set(lens.id, state);
        }
        const requestState = lensRequestState.get(lens.id);
        return {
            request,
            reply,
            lens,
            state: requestState.custom,
            setCancellationHandler: (fn) => {
                requestState.cancellationHandlers.set(request.identifier, fn);
            },
        };
    }), tap(processRequest));
    const uriCancelRequestEvents = uriCancelRequests.pipe(tap((uriRequest) => {
        var _a;
        const cancellationHandlers = (_a = lensRequestState.get(uriRequest.lens.id)) === null || _a === void 0 ? void 0 : _a.cancellationHandlers;
        if (cancellationHandlers) {
            callCancellationHandler(cancellationHandlers, uriRequest.request.requestId);
        }
    }));
    merge(lensTurnOffEvents, uriRequestEvents, uriCancelRequestEvents)
        .pipe(catchError((error, sourcePipe) => {
        processInternalError(error);
        return sourcePipe;
    }), retry(), takeUntil(sessionState.events.pipe(forActions("destroy"))))
        .subscribe({
        complete: () => handleLensApplicationEnd(lensRequestState, ...lensRequestState.keys()),
    });
    return {
        uri,
        handleRequest(request, reply, lens) {
            uriRequests.next({ request, reply, lens });
        },
        cancelRequest(request, lens) {
            uriCancelRequests.next({ request, lens });
        },
    };
}
//# sourceMappingURL=uriRequestProcessor.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/uri-handlers/internal-handlers/httpValidators.js




const requestValidationErrorName = "RequestValidationError";
const requestValidationError = namedError(requestValidationErrorName);
function validateRequest(request, specs) {
    var _a, _b, _c;
    for (const spec of specs) {
        const url = `${spec.tlsRequired ? "https://" : "http://"}${spec.host}`;
        if (!request.uri.startsWith(url))
            continue;
        const path = ((_a = request.uri.split(url)[1]) !== null && _a !== void 0 ? _a : "").replace(/^\//, "").replace(/\/$/, "");
        for (const endpoint of spec.endpoints) {
            const endpointPath = endpoint.path.replace(/^\//, "").replace(/\/$/, "");
            if (!path.startsWith(endpointPath))
                continue;
            const method = (_b = RemoteEndpoint_HttpRequestMethod[request.method]) !== null && _b !== void 0 ? _b : RemoteEndpoint_HttpRequestMethod.UNRECOGNIZED;
            if (!endpoint.methods.includes(method))
                continue;
            validatePath((_c = path.split(endpointPath)[1]) !== null && _c !== void 0 ? _c : "", endpoint.parameters);
            validateHeaders(request.metadata, endpoint.parameters);
            validateQuery(request.uri, endpoint.parameters);
            return;
        }
    }
    throw requestValidationError("The request does not match any of the Remote API specifications.");
}
function validatePath(path, parameters) {
    const pathComponents = path.split("/").filter(Boolean);
    let paramIndex = 0;
    for (const param of parameters) {
        if (param.location !== RemoteParameter_ParameterLocation.PATH)
            continue;
        const paramNameComponent = pathComponents[paramIndex];
        const paramValueComponent = pathComponents[paramIndex + 1];
        if (param.constant) {
            if (paramNameComponent === param.name && paramValueComponent === param.defaultValue) {
                paramIndex += 2;
            }
            else {
                throw requestValidationError(`Expected constant parameter '${param.name}' with value '${param.defaultValue}' ` +
                    `at position ${paramIndex}, but found '${paramNameComponent}' and '${paramValueComponent}'.`);
            }
        }
        else if (param.optional) {
            if (paramNameComponent === param.name) {
                paramIndex += 2;
            }
        }
        else {
            if (paramNameComponent === param.name && paramValueComponent !== undefined) {
                paramIndex += 2;
            }
            else {
                throw requestValidationError(`Expected parameter '${param.name}' with a value at position ${paramIndex}, ` +
                    `but found '${paramNameComponent}' and '${paramValueComponent}'.`);
            }
        }
    }
    if (paramIndex !== pathComponents.length) {
        const invalidPath = pathComponents.slice(paramIndex).join("/");
        throw requestValidationError(`Unexpected extra path components starting at position ${paramIndex}: '${invalidPath}'.`);
    }
}
function validateHeaders(headers, parameters) {
    for (const param of parameters) {
        if (param.location !== RemoteParameter_ParameterLocation.HEADER)
            continue;
        const headerValue = headers[param.name];
        if (param.constant) {
            if (headerValue !== param.defaultValue) {
                throw requestValidationError(`Expected constant header '${param.name}' with value '${param.defaultValue}', ` +
                    `but found '${headerValue !== null && headerValue !== void 0 ? headerValue : "undefined"}'.`);
            }
        }
        else if (param.optional) {
            if (headerValue != undefined && isEmptyString(headerValue)) {
                throw requestValidationError(`Header '${param.name}' is present but empty. If provided, it should not be empty.`);
            }
        }
        else {
            if (headerValue == undefined || isEmptyString(headerValue)) {
                throw requestValidationError(`Required header '${param.name}' is missing or empty.`);
            }
        }
    }
}
function validateQuery(uri, parameters) {
    const url = new URL(uri);
    const queryParams = new URLSearchParams(url.search);
    for (const param of parameters) {
        if (param.location !== RemoteParameter_ParameterLocation.QUERY)
            continue;
        const paramValue = queryParams.get(param.name);
        if (param.constant) {
            if (paramValue !== param.defaultValue) {
                throw requestValidationError(`Expected constant query parameter '${param.name}' with value '${param.defaultValue}', ` +
                    `but found '${paramValue !== null && paramValue !== void 0 ? paramValue : "undefined"}'.`);
            }
        }
        else if (param.optional) {
            if (paramValue != undefined && isEmptyString(paramValue)) {
                throw requestValidationError(`Optional query parameter '${param.name}' is present but empty. ` +
                    `If provided, it should not be empty.`);
            }
        }
        else {
            if (paramValue == undefined || isEmptyString(paramValue)) {
                throw requestValidationError(`Required query parameter '${param.name}' is missing or empty.`);
            }
        }
    }
}
//# sourceMappingURL=httpValidators.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/uri-handlers/internal-handlers/httpUriHandler.js






const httpUriHandler_logger = getLogger("lensHttpHandler");
const lensHttpHandlerErrorName = "LensHttpHandlerError";
const lensHttpHandlerError = namedError(lensHttpHandlerErrorName);
const allowedResponseHeaders = [
    "Accept-Ranges",
    "Cache-Control",
    "Content-Language",
    "Content-Length",
    "Content-Type",
    "Date",
    "ETag",
    "Expires",
    "Last-Modified",
    "Location",
];
function createHttpUriHandler(lensState, sessionState, remoteApiSpecsClient, customLentFetchHandler) {
    let allowlistPromise = undefined;
    return createUriRequestProcessor({
        uri: ["http://", "https://"],
        lensState,
        sessionState,
        processRequest({ request, lens, reply, setCancellationHandler }) {
            return tslib_es6_awaiter(this, void 0, void 0, function* () {
                allowlistPromise = allowlistPromise !== null && allowlistPromise !== void 0 ? allowlistPromise : getAllowlist(remoteApiSpecsClient);
                const allowlist = yield allowlistPromise;
                handleHttpUriRequest(request, lens, reply, setCancellationHandler, allowlist, customLentFetchHandler);
            });
        },
        processInternalError(error) {
            httpUriHandler_logger.error(error);
        },
    });
}
function getAllowlist(remoteApiSpecsClient) {
    var _a, _b;
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const result = yield remoteApiSpecsClient.getRemoteApiSpecs({});
        if (!result.ok)
            throw new Error("Failed getting Remote API specs.", { cause: result.unwrapErr() });
        return (_b = (_a = result.unwrap().message) === null || _a === void 0 ? void 0 : _a.remoteApiSpecs) !== null && _b !== void 0 ? _b : [];
    });
}
function handleHttpUriRequest(request, lens, reply, setCancellationHandler, allowlist, customLensHttpHandler) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        try {
            validateRequest(request, allowlist);
            const { url, init } = mapLensToFetchRequest(request);
            const abortController = new AbortController();
            init.signal = abortController.signal;
            setCancellationHandler(() => abortController.abort());
            let response;
            if (customLensHttpHandler) {
                const handlerName = "lensHttpHandler";
                try {
                    const { uri, identifier, method, metadata, data } = request;
                    const responsePromise = customLensHttpHandler(url, init, {
                        url: uri,
                        identifier,
                        method,
                        data,
                        headers: metadata,
                        lens,
                    });
                    if (!isPromise(responsePromise)) {
                        throw lensHttpHandlerError(`The '${handlerName}' callback provided to Camera Kit must return a Promise.`);
                    }
                    response = yield responsePromise;
                }
                catch (error) {
                    error =
                        error instanceof Error && error.name === lensHttpHandlerErrorName
                            ? error
                            : lensHttpHandlerError(`The '${handlerName}' callback provided to Camera Kit configuration failed.`, error);
                    throw error;
                }
            }
            else {
                response = yield fetch(url, init);
            }
            reply(yield mapFetchToLensResponse(response));
        }
        catch (error) {
            if (error instanceof Error && error.name === lensHttpHandlerErrorName) {
                httpUriHandler_logger.warn(error);
                reply(getErrorResponse("LensHttpHandlerError", `The lens HTTP request handler provided to Camera Kit failed.`));
            }
            else if (error instanceof Error && error.name === requestValidationErrorName) {
                httpUriHandler_logger.warn(error);
                reply(getErrorResponse("RequestValidationError", error.message));
            }
            else {
                httpUriHandler_logger.error(error);
                reply(getErrorResponse("UnknownError", "An unknown error occurred."));
            }
        }
    });
}
function getErrorResponse(errorType, message) {
    return {
        code: 400,
        description: "",
        contentType: "text/plain",
        metadata: {
            "x-camera-kit-error-type": errorType,
        },
        data: new TextEncoder().encode(message),
    };
}
function mapLensToFetchRequest({ uri, method, metadata, data }) {
    return {
        url: uri,
        init: {
            headers: metadata,
            body: method !== "GET" && method !== "HEAD" && method !== undefined ? data : undefined,
            method,
        },
    };
}
function mapFetchToLensResponse(response) {
    var _a;
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const metadata = {};
        for (const allowedHeader of allowedResponseHeaders) {
            const value = response.headers.get(allowedHeader);
            if (value) {
                metadata[allowedHeader.toLowerCase()] = value;
            }
        }
        return {
            code: response.status,
            description: "",
            contentType: ((_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : ""),
            metadata,
            data: yield response.arrayBuffer(),
        };
    });
}
//# sourceMappingURL=httpUriHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/uri-handlers/UriHandlers.js


const SEPARATOR = "://";
function extractSchemeAndRoute(uri) {
    const separatorIndex = uri.indexOf(SEPARATOR);
    const scheme = uri.slice(0, separatorIndex);
    const route = uri.slice(separatorIndex + SEPARATOR.length);
    return { scheme, route };
}
function isUri(value) {
    return typeguards_isString(value) && value.includes(SEPARATOR);
}
function isUriHandler(value) {
    return (typeguards_isRecord(value) &&
        (isUri(value.uri) || isArrayOfType(isUri, value.uri)) &&
        typeguards_isFunction(value.handleRequest) &&
        (isUndefined(value.cancelRequest) || typeguards_isFunction(value.cancelRequest)));
}
function isUriHandlers(value) {
    return isArrayOfType(isUriHandler, value);
}
function isUriResponse(value) {
    return (typeguards_isRecord(value) &&
        isNumber(value.code) &&
        typeguards_isString(value.description) &&
        typeguards_isString(value.contentType) &&
        (isArrayBuffer(value.data) || isTypedArray(value.data)) &&
        (isUndefined(value.metadata) || typeguards_predicateRecordValues(typeguards_isString)(value.metadata)));
}
const uriHandlersFactory = Injectable("UriHandlers", () => {
    const uriHandlers = [];
    return uriHandlers;
});
//# sourceMappingURL=UriHandlers.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/camera_kit/v3/features/remote_api_info.js

const remote_api_info_protobufPackage = "com.snap.camerakit.v3.features";
function createBaseRemoteApiInfo() {
    return { apiSpecIds: [] };
}
const RemoteApiInfo = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.apiSpecIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteApiInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apiSpecIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RemoteApiInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoteApiInfo();
        message.apiSpecIds = ((_a = object.apiSpecIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
//# sourceMappingURL=remote_api_info.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/generated-proto/pb_schema/lenses/remote_api/remote_api_service.js

const remote_api_service_protobufPackage = "snapchat.lenses";
var HttpRequestMethod;
(function (HttpRequestMethod) {
    HttpRequestMethod["HTTP_METHOD_UNSET"] = "HTTP_METHOD_UNSET";
    HttpRequestMethod["HTTP_METHOD_GET"] = "HTTP_METHOD_GET";
    HttpRequestMethod["HTTP_METHOD_POST"] = "HTTP_METHOD_POST";
    HttpRequestMethod["HTTP_METHOD_PUT"] = "HTTP_METHOD_PUT";
    HttpRequestMethod["HTTP_METHOD_DELETE"] = "HTTP_METHOD_DELETE";
    HttpRequestMethod["HTTP_METHOD_PATCH"] = "HTTP_METHOD_PATCH";
    HttpRequestMethod["UNRECOGNIZED"] = "UNRECOGNIZED";
})(HttpRequestMethod || (HttpRequestMethod = {}));
function httpRequestMethodFromJSON(object) {
    switch (object) {
        case 0:
        case "HTTP_METHOD_UNSET":
            return HttpRequestMethod.HTTP_METHOD_UNSET;
        case 1:
        case "HTTP_METHOD_GET":
            return HttpRequestMethod.HTTP_METHOD_GET;
        case 2:
        case "HTTP_METHOD_POST":
            return HttpRequestMethod.HTTP_METHOD_POST;
        case 3:
        case "HTTP_METHOD_PUT":
            return HttpRequestMethod.HTTP_METHOD_PUT;
        case 4:
        case "HTTP_METHOD_DELETE":
            return HttpRequestMethod.HTTP_METHOD_DELETE;
        case 5:
        case "HTTP_METHOD_PATCH":
            return HttpRequestMethod.HTTP_METHOD_PATCH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return HttpRequestMethod.UNRECOGNIZED;
    }
}
function httpRequestMethodToNumber(object) {
    switch (object) {
        case HttpRequestMethod.HTTP_METHOD_UNSET:
            return 0;
        case HttpRequestMethod.HTTP_METHOD_GET:
            return 1;
        case HttpRequestMethod.HTTP_METHOD_POST:
            return 2;
        case HttpRequestMethod.HTTP_METHOD_PUT:
            return 3;
        case HttpRequestMethod.HTTP_METHOD_DELETE:
            return 4;
        case HttpRequestMethod.HTTP_METHOD_PATCH:
            return 5;
        case HttpRequestMethod.UNRECOGNIZED:
        default:
            return -1;
    }
}
var ResponseCode;
(function (ResponseCode) {
    ResponseCode["RESPONSE_CODE_UNSET"] = "RESPONSE_CODE_UNSET";
    ResponseCode["SUCCESS"] = "SUCCESS";
    ResponseCode["REDIRECTED"] = "REDIRECTED";
    ResponseCode["BAD_REQUEST"] = "BAD_REQUEST";
    ResponseCode["ACCESS_DENIED"] = "ACCESS_DENIED";
    ResponseCode["NOT_FOUND"] = "NOT_FOUND";
    ResponseCode["TIMEOUT"] = "TIMEOUT";
    ResponseCode["REQUEST_TOO_LARGE"] = "REQUEST_TOO_LARGE";
    ResponseCode["SERVER_ERROR"] = "SERVER_ERROR";
    ResponseCode["CANCELLED"] = "CANCELLED";
    ResponseCode["PROXY_ERROR"] = "PROXY_ERROR";
    ResponseCode["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ResponseCode || (ResponseCode = {}));
function responseCodeFromJSON(object) {
    switch (object) {
        case 0:
        case "RESPONSE_CODE_UNSET":
            return ResponseCode.RESPONSE_CODE_UNSET;
        case 1:
        case "SUCCESS":
            return ResponseCode.SUCCESS;
        case 2:
        case "REDIRECTED":
            return ResponseCode.REDIRECTED;
        case 3:
        case "BAD_REQUEST":
            return ResponseCode.BAD_REQUEST;
        case 4:
        case "ACCESS_DENIED":
            return ResponseCode.ACCESS_DENIED;
        case 5:
        case "NOT_FOUND":
            return ResponseCode.NOT_FOUND;
        case 6:
        case "TIMEOUT":
            return ResponseCode.TIMEOUT;
        case 7:
        case "REQUEST_TOO_LARGE":
            return ResponseCode.REQUEST_TOO_LARGE;
        case 8:
        case "SERVER_ERROR":
            return ResponseCode.SERVER_ERROR;
        case 9:
        case "CANCELLED":
            return ResponseCode.CANCELLED;
        case 10:
        case "PROXY_ERROR":
            return ResponseCode.PROXY_ERROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ResponseCode.UNRECOGNIZED;
    }
}
function responseCodeToNumber(object) {
    switch (object) {
        case ResponseCode.RESPONSE_CODE_UNSET:
            return 0;
        case ResponseCode.SUCCESS:
            return 1;
        case ResponseCode.REDIRECTED:
            return 2;
        case ResponseCode.BAD_REQUEST:
            return 3;
        case ResponseCode.ACCESS_DENIED:
            return 4;
        case ResponseCode.NOT_FOUND:
            return 5;
        case ResponseCode.TIMEOUT:
            return 6;
        case ResponseCode.REQUEST_TOO_LARGE:
            return 7;
        case ResponseCode.SERVER_ERROR:
            return 8;
        case ResponseCode.CANCELLED:
            return 9;
        case ResponseCode.PROXY_ERROR:
            return 10;
        case ResponseCode.UNRECOGNIZED:
        default:
            return -1;
    }
}
var GetOAuth2InfoResponse_GrantType;
(function (GetOAuth2InfoResponse_GrantType) {
    GetOAuth2InfoResponse_GrantType["GRANT_TYPE_UNSET"] = "GRANT_TYPE_UNSET";
    GetOAuth2InfoResponse_GrantType["AUTHORIZATION_CODE"] = "AUTHORIZATION_CODE";
    GetOAuth2InfoResponse_GrantType["AUTHORIZATION_CODE_WITH_PKCE"] = "AUTHORIZATION_CODE_WITH_PKCE";
    GetOAuth2InfoResponse_GrantType["IMPLICIT"] = "IMPLICIT";
    GetOAuth2InfoResponse_GrantType["CLIENT_CREDENTIALS"] = "CLIENT_CREDENTIALS";
    GetOAuth2InfoResponse_GrantType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(GetOAuth2InfoResponse_GrantType || (GetOAuth2InfoResponse_GrantType = {}));
function getOAuth2InfoResponse_GrantTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "GRANT_TYPE_UNSET":
            return GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET;
        case 1:
        case "AUTHORIZATION_CODE":
            return GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE;
        case 2:
        case "AUTHORIZATION_CODE_WITH_PKCE":
            return GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE_WITH_PKCE;
        case 3:
        case "IMPLICIT":
            return GetOAuth2InfoResponse_GrantType.IMPLICIT;
        case 4:
        case "CLIENT_CREDENTIALS":
            return GetOAuth2InfoResponse_GrantType.CLIENT_CREDENTIALS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GetOAuth2InfoResponse_GrantType.UNRECOGNIZED;
    }
}
function getOAuth2InfoResponse_GrantTypeToNumber(object) {
    switch (object) {
        case GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET:
            return 0;
        case GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE:
            return 1;
        case GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE_WITH_PKCE:
            return 2;
        case GetOAuth2InfoResponse_GrantType.IMPLICIT:
            return 3;
        case GetOAuth2InfoResponse_GrantType.CLIENT_CREDENTIALS:
            return 4;
        case GetOAuth2InfoResponse_GrantType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var TokenExchangeError_TokenExchangeErrorType;
(function (TokenExchangeError_TokenExchangeErrorType) {
    TokenExchangeError_TokenExchangeErrorType["ERROR_TYPE_UNSET"] = "ERROR_TYPE_UNSET";
    TokenExchangeError_TokenExchangeErrorType["INVALID_REQUEST"] = "INVALID_REQUEST";
    TokenExchangeError_TokenExchangeErrorType["INVALID_CLIENT"] = "INVALID_CLIENT";
    TokenExchangeError_TokenExchangeErrorType["INVALID_GRANT"] = "INVALID_GRANT";
    TokenExchangeError_TokenExchangeErrorType["UNAUTHORIZED_CLIENT"] = "UNAUTHORIZED_CLIENT";
    TokenExchangeError_TokenExchangeErrorType["UNSUPPORTED_GRANT_TYPE"] = "UNSUPPORTED_GRANT_TYPE";
    TokenExchangeError_TokenExchangeErrorType["INVALID_SCOPE"] = "INVALID_SCOPE";
    TokenExchangeError_TokenExchangeErrorType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(TokenExchangeError_TokenExchangeErrorType || (TokenExchangeError_TokenExchangeErrorType = {}));
function tokenExchangeError_TokenExchangeErrorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ERROR_TYPE_UNSET":
            return TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET;
        case 1:
        case "INVALID_REQUEST":
            return TokenExchangeError_TokenExchangeErrorType.INVALID_REQUEST;
        case 2:
        case "INVALID_CLIENT":
            return TokenExchangeError_TokenExchangeErrorType.INVALID_CLIENT;
        case 3:
        case "INVALID_GRANT":
            return TokenExchangeError_TokenExchangeErrorType.INVALID_GRANT;
        case 4:
        case "UNAUTHORIZED_CLIENT":
            return TokenExchangeError_TokenExchangeErrorType.UNAUTHORIZED_CLIENT;
        case 5:
        case "UNSUPPORTED_GRANT_TYPE":
            return TokenExchangeError_TokenExchangeErrorType.UNSUPPORTED_GRANT_TYPE;
        case 6:
        case "INVALID_SCOPE":
            return TokenExchangeError_TokenExchangeErrorType.INVALID_SCOPE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TokenExchangeError_TokenExchangeErrorType.UNRECOGNIZED;
    }
}
function tokenExchangeError_TokenExchangeErrorTypeToNumber(object) {
    switch (object) {
        case TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET:
            return 0;
        case TokenExchangeError_TokenExchangeErrorType.INVALID_REQUEST:
            return 1;
        case TokenExchangeError_TokenExchangeErrorType.INVALID_CLIENT:
            return 2;
        case TokenExchangeError_TokenExchangeErrorType.INVALID_GRANT:
            return 3;
        case TokenExchangeError_TokenExchangeErrorType.UNAUTHORIZED_CLIENT:
            return 4;
        case TokenExchangeError_TokenExchangeErrorType.UNSUPPORTED_GRANT_TYPE:
            return 5;
        case TokenExchangeError_TokenExchangeErrorType.INVALID_SCOPE:
            return 6;
        case TokenExchangeError_TokenExchangeErrorType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBasePerformHttpCallRequest() {
    return {
        url: "",
        method: HttpRequestMethod.HTTP_METHOD_UNSET,
        headers: {},
        body: new Uint8Array(0),
        apiSpecId: "",
        isStudioDev: false,
    };
}
const PerformHttpCallRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.method !== HttpRequestMethod.HTTP_METHOD_UNSET) {
            writer.uint32(16).int32(httpRequestMethodToNumber(message.method));
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            PerformHttpCallRequest_HeadersEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.body.length !== 0) {
            writer.uint32(34).bytes(message.body);
        }
        if (message.apiSpecId !== "") {
            writer.uint32(42).string(message.apiSpecId);
        }
        if (message.isStudioDev !== false) {
            writer.uint32(48).bool(message.isStudioDev);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformHttpCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = httpRequestMethodFromJSON(reader.int32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = PerformHttpCallRequest_HeadersEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.headers[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.apiSpecId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isStudioDev = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformHttpCallRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePerformHttpCallRequest();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.method = (_b = object.method) !== null && _b !== void 0 ? _b : HttpRequestMethod.HTTP_METHOD_UNSET;
        message.headers = Object.entries((_c = object.headers) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.body = (_d = object.body) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.apiSpecId = (_e = object.apiSpecId) !== null && _e !== void 0 ? _e : "";
        message.isStudioDev = (_f = object.isStudioDev) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBasePerformHttpCallRequest_HeadersEntry() {
    return { key: "", value: "" };
}
const PerformHttpCallRequest_HeadersEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformHttpCallRequest_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformHttpCallRequest_HeadersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePerformHttpCallRequest_HeadersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBasePerformHttpCallResponse() {
    return { code: 0, headers: {}, body: new Uint8Array(0) };
}
const PerformHttpCallResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            PerformHttpCallResponse_HeadersEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.body.length !== 0) {
            writer.uint32(26).bytes(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformHttpCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = PerformHttpCallResponse_HeadersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.headers[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformHttpCallResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePerformHttpCallResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.headers = Object.entries((_b = object.headers) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.body = (_c = object.body) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        return message;
    },
};
function createBasePerformHttpCallResponse_HeadersEntry() {
    return { key: "", value: "" };
}
const PerformHttpCallResponse_HeadersEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformHttpCallResponse_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformHttpCallResponse_HeadersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePerformHttpCallResponse_HeadersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetOAuth2InfoRequest() {
    return { apiSpecId: "" };
}
const GetOAuth2InfoRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.apiSpecId !== "") {
            writer.uint32(10).string(message.apiSpecId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOAuth2InfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apiSpecId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetOAuth2InfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetOAuth2InfoRequest();
        message.apiSpecId = (_a = object.apiSpecId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetOAuth2InfoResponse() {
    return { clientId: "", grantType: GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET, authorizationUrl: "", scope: "" };
}
const GetOAuth2InfoResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.grantType !== GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET) {
            writer.uint32(16).int32(getOAuth2InfoResponse_GrantTypeToNumber(message.grantType));
        }
        if (message.authorizationUrl !== "") {
            writer.uint32(26).string(message.authorizationUrl);
        }
        if (message.scope !== "") {
            writer.uint32(34).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOAuth2InfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.grantType = getOAuth2InfoResponse_GrantTypeFromJSON(reader.int32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.authorizationUrl = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return GetOAuth2InfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGetOAuth2InfoResponse();
        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : "";
        message.grantType = (_b = object.grantType) !== null && _b !== void 0 ? _b : GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET;
        message.authorizationUrl = (_c = object.authorizationUrl) !== null && _c !== void 0 ? _c : "";
        message.scope = (_d = object.scope) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseTokenExchangeError() {
    return { error: TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET, errorDescription: "" };
}
const TokenExchangeError = {
    encode(message, writer = new BinaryWriter()) {
        if (message.error !== TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET) {
            writer.uint32(8).int32(tokenExchangeError_TokenExchangeErrorTypeToNumber(message.error));
        }
        if (message.errorDescription !== "") {
            writer.uint32(18).string(message.errorDescription);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenExchangeError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.error = tokenExchangeError_TokenExchangeErrorTypeFromJSON(reader.int32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.errorDescription = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return TokenExchangeError.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTokenExchangeError();
        message.error = (_a = object.error) !== null && _a !== void 0 ? _a : TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET;
        message.errorDescription = (_b = object.errorDescription) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTokenDetails() {
    return { accessToken: "", tokenType: "", expiresInSeconds: "0", refreshToken: "", scope: "" };
}
const TokenDetails = {
    encode(message, writer = new BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.tokenType !== "") {
            writer.uint32(18).string(message.tokenType);
        }
        if (message.expiresInSeconds !== "0") {
            writer.uint32(24).int64(message.expiresInSeconds);
        }
        if (message.refreshToken !== "") {
            writer.uint32(34).string(message.refreshToken);
        }
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.expiresInSeconds = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return TokenDetails.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseTokenDetails();
        message.accessToken = (_a = object.accessToken) !== null && _a !== void 0 ? _a : "";
        message.tokenType = (_b = object.tokenType) !== null && _b !== void 0 ? _b : "";
        message.expiresInSeconds = (_c = object.expiresInSeconds) !== null && _c !== void 0 ? _c : "0";
        message.refreshToken = (_d = object.refreshToken) !== null && _d !== void 0 ? _d : "";
        message.scope = (_e = object.scope) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBasePerformTokenExchangeRequest() {
    return { apiSpecId: "", authorizationCode: "", codeVerifier: "" };
}
const PerformTokenExchangeRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.apiSpecId !== "") {
            writer.uint32(10).string(message.apiSpecId);
        }
        if (message.authorizationCode !== "") {
            writer.uint32(18).string(message.authorizationCode);
        }
        if (message.codeVerifier !== "") {
            writer.uint32(26).string(message.codeVerifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformTokenExchangeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apiSpecId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.authorizationCode = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.codeVerifier = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformTokenExchangeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePerformTokenExchangeRequest();
        message.apiSpecId = (_a = object.apiSpecId) !== null && _a !== void 0 ? _a : "";
        message.authorizationCode = (_b = object.authorizationCode) !== null && _b !== void 0 ? _b : "";
        message.codeVerifier = (_c = object.codeVerifier) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBasePerformTokenExchangeResponse() {
    return { response: undefined };
}
const PerformTokenExchangeResponse = {
    encode(message, writer = new BinaryWriter()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "tokenDetails":
                TokenDetails.encode(message.response.tokenDetails, writer.uint32(10).fork()).join();
                break;
            case "error":
                TokenExchangeError.encode(message.response.error, writer.uint32(18).fork()).join();
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformTokenExchangeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "tokenDetails", tokenDetails: TokenDetails.decode(reader, reader.uint32()) };
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = { $case: "error", error: TokenExchangeError.decode(reader, reader.uint32()) };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformTokenExchangeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePerformTokenExchangeResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "tokenDetails" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.tokenDetails) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.tokenDetails) !== null) {
            message.response = {
                $case: "tokenDetails",
                tokenDetails: TokenDetails.fromPartial(object.response.tokenDetails),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "error" && ((_e = object.response) === null || _e === void 0 ? void 0 : _e.error) !== undefined && ((_f = object.response) === null || _f === void 0 ? void 0 : _f.error) !== null) {
            message.response = { $case: "error", error: TokenExchangeError.fromPartial(object.response.error) };
        }
        return message;
    },
};
function createBaseRefreshTokenRequest() {
    return { apiSpecId: "", refreshToken: "" };
}
const RefreshTokenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.apiSpecId !== "") {
            writer.uint32(10).string(message.apiSpecId);
        }
        if (message.refreshToken !== "") {
            writer.uint32(18).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefreshTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apiSpecId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RefreshTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRefreshTokenRequest();
        message.apiSpecId = (_a = object.apiSpecId) !== null && _a !== void 0 ? _a : "";
        message.refreshToken = (_b = object.refreshToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRefreshTokenResponse() {
    return { response: undefined };
}
const RefreshTokenResponse = {
    encode(message, writer = new BinaryWriter()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "tokenDetails":
                TokenDetails.encode(message.response.tokenDetails, writer.uint32(10).fork()).join();
                break;
            case "error":
                TokenExchangeError.encode(message.response.error, writer.uint32(18).fork()).join();
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefreshTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "tokenDetails", tokenDetails: TokenDetails.decode(reader, reader.uint32()) };
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = { $case: "error", error: TokenExchangeError.decode(reader, reader.uint32()) };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return RefreshTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseRefreshTokenResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "tokenDetails" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.tokenDetails) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.tokenDetails) !== null) {
            message.response = {
                $case: "tokenDetails",
                tokenDetails: TokenDetails.fromPartial(object.response.tokenDetails),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "error" && ((_e = object.response) === null || _e === void 0 ? void 0 : _e.error) !== undefined && ((_f = object.response) === null || _f === void 0 ? void 0 : _f.error) !== null) {
            message.response = { $case: "error", error: TokenExchangeError.fromPartial(object.response.error) };
        }
        return message;
    },
};
function createBasePerformApiCallRequest() {
    return {
        apiSpecSetId: "",
        endpointRefId: "",
        parameters: {},
        body: new Uint8Array(0),
        lensId: "",
        isStudioDev: false,
        cacheTtlSec: 0,
        linkedResources: [],
    };
}
const PerformApiCallRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.apiSpecSetId !== "") {
            writer.uint32(10).string(message.apiSpecSetId);
        }
        if (message.endpointRefId !== "") {
            writer.uint32(18).string(message.endpointRefId);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            PerformApiCallRequest_ParametersEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.body.length !== 0) {
            writer.uint32(34).bytes(message.body);
        }
        if (message.lensId !== "") {
            writer.uint32(42).string(message.lensId);
        }
        if (message.isStudioDev !== false) {
            writer.uint32(48).bool(message.isStudioDev);
        }
        if (message.cacheTtlSec !== 0) {
            writer.uint32(56).int32(message.cacheTtlSec);
        }
        for (const v of message.linkedResources) {
            LinkedResource.encode(v, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformApiCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apiSpecSetId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.endpointRefId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = PerformApiCallRequest_ParametersEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.parameters[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lensId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isStudioDev = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.cacheTtlSec = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.linkedResources.push(LinkedResource.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformApiCallRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBasePerformApiCallRequest();
        message.apiSpecSetId = (_a = object.apiSpecSetId) !== null && _a !== void 0 ? _a : "";
        message.endpointRefId = (_b = object.endpointRefId) !== null && _b !== void 0 ? _b : "";
        message.parameters = Object.entries((_c = object.parameters) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.body = (_d = object.body) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.lensId = (_e = object.lensId) !== null && _e !== void 0 ? _e : "";
        message.isStudioDev = (_f = object.isStudioDev) !== null && _f !== void 0 ? _f : false;
        message.cacheTtlSec = (_g = object.cacheTtlSec) !== null && _g !== void 0 ? _g : 0;
        message.linkedResources = ((_h = object.linkedResources) === null || _h === void 0 ? void 0 : _h.map((e) => LinkedResource.fromPartial(e))) || [];
        return message;
    },
};
function createBasePerformApiCallRequest_ParametersEntry() {
    return { key: "", value: "" };
}
const PerformApiCallRequest_ParametersEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformApiCallRequest_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformApiCallRequest_ParametersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePerformApiCallRequest_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBasePerformApiCallResponse() {
    return {
        responseCode: ResponseCode.RESPONSE_CODE_UNSET,
        metadata: {},
        body: new Uint8Array(0),
        userLocationUsed: false,
        linkedResources: [],
    };
}
const PerformApiCallResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.responseCode !== ResponseCode.RESPONSE_CODE_UNSET) {
            writer.uint32(8).int32(responseCodeToNumber(message.responseCode));
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            PerformApiCallResponse_MetadataEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.body.length !== 0) {
            writer.uint32(26).bytes(message.body);
        }
        if (message.userLocationUsed !== false) {
            writer.uint32(32).bool(message.userLocationUsed);
        }
        for (const v of message.linkedResources) {
            LinkedResource.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformApiCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.responseCode = responseCodeFromJSON(reader.int32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = PerformApiCallResponse_MetadataEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.metadata[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.userLocationUsed = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.linkedResources.push(LinkedResource.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformApiCallResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePerformApiCallResponse();
        message.responseCode = (_a = object.responseCode) !== null && _a !== void 0 ? _a : ResponseCode.RESPONSE_CODE_UNSET;
        message.metadata = Object.entries((_b = object.metadata) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.body = (_c = object.body) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.userLocationUsed = (_d = object.userLocationUsed) !== null && _d !== void 0 ? _d : false;
        message.linkedResources = ((_e = object.linkedResources) === null || _e === void 0 ? void 0 : _e.map((e) => LinkedResource.fromPartial(e))) || [];
        return message;
    },
};
function createBasePerformApiCallResponse_MetadataEntry() {
    return { key: "", value: "" };
}
const PerformApiCallResponse_MetadataEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerformApiCallResponse_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return PerformApiCallResponse_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePerformApiCallResponse_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLinkedResource() {
    return { url: "", encryptionKey: new Uint8Array(0) };
}
const LinkedResource = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.encryptionKey.length !== 0) {
            writer.uint32(18).bytes(message.encryptionKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.encryptionKey = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LinkedResource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLinkedResource();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.encryptionKey = (_b = object.encryptionKey) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=remote_api_service.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/uri-handlers/internal-handlers/remoteApiUriHandler.js








const remoteApiUriHandler_logger = getLogger("RemoteApiServices");
const uriResponseOkCode = 200;
const apiResponseStatusHeader = ":sc_lens_api_status";
const apiBinaryContentType = "application/octet-stream";
const remoteApiInfoProtobufTypeUrl = "type.googleapis.com/com.snap.camerakit.v3.features.RemoteApiInfo";
const remoteApiUploadImageSpecId = "af3f69c8-2e62-441f-8b1c-d3956f7b336c";
const statusToResponseCodeMap = {
    success: ResponseCode.SUCCESS,
    redirected: ResponseCode.REDIRECTED,
    badRequest: ResponseCode.BAD_REQUEST,
    accessDenied: ResponseCode.ACCESS_DENIED,
    notFound: ResponseCode.NOT_FOUND,
    timeout: ResponseCode.TIMEOUT,
    requestTooLarge: ResponseCode.REQUEST_TOO_LARGE,
    serverError: ResponseCode.SERVER_ERROR,
    cancelled: ResponseCode.CANCELLED,
    proxyError: ResponseCode.PROXY_ERROR,
};
const remoteApiServicesFactory = Injectable("remoteApiServices", () => {
    const remoteApiServices = [];
    return remoteApiServices;
});
function createRemoteApiUriHandler(registeredServices, sessionState, lensState, lensRepository, metrics) {
    const registeredServiceMap = new Map();
    for (const service of registeredServices) {
        const existingServices = registeredServiceMap.get(service.apiSpecId) || [];
        registeredServiceMap.set(service.apiSpecId, [...existingServices, service]);
    }
    return createUriRequestProcessor({
        uri: "app://remote-api/performApiRequest",
        lensState,
        sessionState,
        createLensRequestState(_request, lens) {
            var _a, _b;
            return {
                supportedSpecIds: new Set([
                    ...((_b = (_a = lensRepository.getLensMetadata(lens.id)) === null || _a === void 0 ? void 0 : _a.featureMetadata) !== null && _b !== void 0 ? _b : [])
                        .filter((feature) => feature.typeUrl === remoteApiInfoProtobufTypeUrl)
                        .flatMap((any) => RemoteApiInfo.decode(any.value).apiSpecIds),
                    remoteApiUploadImageSpecId,
                ]),
            };
        },
        processRequest({ request, reply, lens, setCancellationHandler, state }) {
            var _a;
            const { route } = extractSchemeAndRoute(request.uri);
            const [specId, endpointIdWithQuery] = route.split("/").slice(2);
            const [endpointId] = endpointIdWithQuery.split("?");
            if (!(state === null || state === void 0 ? void 0 : state.supportedSpecIds.has(specId)))
                return;
            if (!registeredServiceMap.has(specId))
                return;
            const dimensions = { specId };
            const reportSingleCount = (name) => {
                metrics.setOperationalMetrics(Count.count(joinMetricNames(["lens", "remote-api", name]), 1, dimensions));
            };
            reportSingleCount("requests");
            const remoteApiRequest = {
                apiSpecId: specId,
                body: request.data,
                endpointId,
                parameters: request.metadata,
            };
            for (const service of (_a = registeredServiceMap.get(specId)) !== null && _a !== void 0 ? _a : []) {
                let requestHandler = undefined;
                try {
                    requestHandler = service.getRequestHandler(remoteApiRequest, lens);
                }
                catch (error) {
                    remoteApiUriHandler_logger.warn("Client's Remote API request handler factory threw an error.", error);
                }
                if (requestHandler) {
                    reportSingleCount("handled-requests");
                    let cancellationHandler = undefined;
                    try {
                        cancellationHandler = requestHandler((response) => {
                            var _a;
                            reportSingleCount("responses");
                            const responseCode = (_a = statusToResponseCodeMap[response.status]) !== null && _a !== void 0 ? _a : ResponseCode.UNRECOGNIZED;
                            const uriResponse = {
                                code: uriResponseOkCode,
                                description: "",
                                contentType: apiBinaryContentType,
                                data: response.body,
                                metadata: Object.assign(Object.assign({}, response.metadata), { [apiResponseStatusHeader]: responseCodeToNumber(responseCode).toString() }),
                            };
                            reply(uriResponse);
                        });
                    }
                    catch (error) {
                        remoteApiUriHandler_logger.warn("Client's Remote API request handler threw an error.", error);
                    }
                    if (typeof cancellationHandler === "function") {
                        setCancellationHandler(() => {
                            try {
                                cancellationHandler();
                            }
                            catch (error) {
                                remoteApiUriHandler_logger.warn("Client's Remote API request cancellation handler threw an error.", error);
                            }
                        });
                    }
                    break;
                }
            }
        },
        processInternalError(error) {
            remoteApiUriHandler_logger.error(error);
            metrics.setOperationalMetrics(Count.count(joinMetricNames(["lens", "remote-api", "errors"]), 1));
        },
    });
}
//# sourceMappingURL=remoteApiUriHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/uri-handlers/uriHandlersRegister.js














const uriHandlersRegister_logger = getLogger("uriHandlersRegister");
const registerUriHandlers = Injectable("registerUriHandlers", [
    configurationToken,
    lensCoreFactory.token,
    lensStateFactory.token,
    uriHandlersFactory.token,
    lensKeyboardFactory.token,
    remoteApiServicesFactory.token,
    lensRepositoryFactory.token,
    sessionStateFactory.token,
    metricsClientFactory.token,
    remoteApiSpecsClientFactory.token,
], (configuration, lensCore, lensState, userHandlers, lensKeyboard, remoteApiServices, lensRepository, sessionState, metrics, remoteApiSpecsClient) => {
    if (!isUriHandlers(userHandlers)) {
        throw new Error("Expected an array of UriHandler objects");
    }
    const allHandlers = [
        createHttpUriHandler(lensState, sessionState, remoteApiSpecsClient, configuration.lensHttpHandler),
        ...userHandlers,
        lensKeyboard.uriHandler,
        createRemoteApiUriHandler(remoteApiServices, sessionState, lensState, lensRepository, metrics),
    ];
    for (const { uri, handleRequest, cancelRequest } of allHandlers) {
        const uris = Array.isArray(uri) ? uri : [uri];
        for (const { scheme, route } of uris.map(extractSchemeAndRoute)) {
            lensCore.registerUriListener(scheme, route, {
                handleRequest: (request) => {
                    const reply = (response) => {
                        if (!isUriResponse(response)) {
                            throw new Error("Expected UriResponse object");
                        }
                        lensCore.provideUriResponse(request.identifier, response);
                    };
                    const state = lensState.getState();
                    if (isState(state, "noLensApplied")) {
                        uriHandlersRegister_logger.warn(`Got a URI request for ${request.uri}, but there is no active lens. The ` +
                            `request will not be processed.`);
                        return;
                    }
                    handleRequest(request, reply, state.data);
                },
                cancelRequest: (request) => {
                    if (cancelRequest) {
                        const state = lensState.getState();
                        if (isState(state, "noLensApplied")) {
                            uriHandlersRegister_logger.warn(`Got a URI cancel request for ${request.uri}, but there is no active ` +
                                `lens. The cancel request will not be processed.`);
                            return;
                        }
                        cancelRequest(request, state.data);
                    }
                },
            });
        }
    }
});
//# sourceMappingURL=uriHandlersRegister.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}
//# sourceMappingURL=scanInternals.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scan.js


function scan(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}
//# sourceMappingURL=scan.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportGlobalException.js











const logMethods = entries_entries(logLevelMap).map(([level]) => level);
const maxBufferedEntries = 15;
const contextSeparator = "\n\n----------------- Context -----------------\n\n";
const methodLength = logMethods.reduce((max, method) => Math.max(max, method.length), 0);
function getContextString(logEntries) {
    const result = [];
    for (const { entry, count, lastTime } of logEntries) {
        const time = entry.time.toISOString();
        const method = entry.level.padStart(methodLength);
        const messages = entry.messages.map(prettyPrintMessage).join(" ");
        let dupSuffix = count > 1 ? ` (Repeated ${count} times with the last occurrence at ${lastTime.toISOString()})` : "";
        result.push(`${time} [${entry.module}] ${method}: ${messages}${dupSuffix}`);
    }
    return result.join("\n");
}
function prettyPrintMessage(message) {
    if (message instanceof Error)
        return stringifyErrorMessage(message);
    if (message instanceof Date)
        return message.toISOString();
    return message + "";
}
function reportExceptionToBlizzard(logEntries, metricsEventTarget, metrics, lensState) {
    logEntries
        .pipe(scan(({ entries }, newEntry) => {
        const lastEntry = entries[entries.length - 1];
        const isNewEntryRepeated = lastEntry &&
            lastEntry.entry.messages.join() === newEntry.messages.join() &&
            lastEntry.entry.level === newEntry.level;
        if (isNewEntryRepeated) {
            lastEntry.count += 1;
            lastEntry.lastTime = newEntry.time;
        }
        else {
            entries.push({
                entry: newEntry,
                count: 1,
                lastTime: newEntry.time,
            });
        }
        return {
            entries: entries.slice(-maxBufferedEntries),
            recent: newEntry,
        };
    }, { entries: [], recent: { time: new Date(), module: "any", level: "debug", messages: [] } }), filter(({ recent }) => recent.level === "error"), map(({ entries, recent }) => ({
        context: entries,
        error: recent.messages.find((e) => e instanceof Error),
    })), filter(({ error }) => !!error))
        .subscribe(({ error, context }) => {
        const currentLensState = lensState === null || lensState === void 0 ? void 0 : lensState.getState();
        const lensId = currentLensState && !isState(currentLensState, "noLensApplied") ? currentLensState.data.id : "none";
        metricsEventTarget.dispatchEvent(new TypedCustomEvent("exception", {
            name: "exception",
            lensId,
            type: error.name,
            reason: `${stringifyError(error)}${contextSeparator}${getContextString(context)}`,
        }));
        metrics.setOperationalMetrics(Count.count("handled_exception", 1, { type: error.name }));
    });
}
const reportGlobalException = Injectable("reportGlobalException", [logEntriesFactory.token, metricsEventTargetFactory.token, metricsClientFactory.token], (logEntries, metricsEventTarget, metrics) => {
    const cancellationSubject = new Subject();
    reportExceptionToBlizzard(logEntries.pipe(takeUntil(cancellationSubject)), metricsEventTarget, metrics);
    return {
        attachLensContext: (lensState) => {
            cancellationSubject.next();
            reportExceptionToBlizzard(logEntries, metricsEventTarget, metrics, lensState);
        },
    };
});
//# sourceMappingURL=reportGlobalException.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportSessionException.js



const reportSessionException = Injectable("reportSessionException", [reportGlobalException.token, lensStateFactory.token], (globalExceptionReporter, lensState) => {
    globalExceptionReporter.attachLensContext(lensState);
});
//# sourceMappingURL=reportSessionException.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/operational/Histogram.js

class Histogram extends Metric {
    static level(name, level, dimensions = {}) {
        const histogram = new Histogram(name, dimensions);
        histogram.add(level);
        return histogram;
    }
    constructor(name, dimensions = {}) {
        super(name, dimensions);
        this.name = name;
        this.levels = [];
    }
    add(level) {
        this.levels.push(level);
    }
    toOperationalMetric() {
        const timestamp = new Date();
        const name = `${this.name}${serializeMetricDimensions(this.dimensions)}`;
        return this.levels.map((level) => ({
            name,
            timestamp,
            metric: { $case: "histogram", histogram: `${Math.ceil(level)}` },
        }));
    }
}
//# sourceMappingURL=Histogram.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportBenchmarks.js







const reportableBenchmarks = ["gflops"];
const reportBenchmarks = Injectable("reportBenchmarks", [metricsEventTargetFactory.token, metricsClientFactory.token, configurationToken], (metricsEventTarget, metrics, config) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    if (config.lensPerformance === undefined)
        return;
    const lensPerformance = yield config.lensPerformance;
    const baseBenchmark = {
        name: "benchmarkComplete",
        performanceCluster: `${lensPerformance.cluster}`,
        webglRendererInfo: lensPerformance.webglRendererInfo,
    };
    const dimensions = { performance_cluster: lensPerformance.cluster.toString() };
    for (const benchmark of lensPerformance.benchmarks) {
        if (!reportableBenchmarks.includes(benchmark.name))
            continue;
        const benchmarkComplete = Object.assign(Object.assign({}, baseBenchmark), { benchmarkName: benchmark.name, benchmarkValue: benchmark.value });
        metricsEventTarget.dispatchEvent(new TypedCustomEvent("benchmarkComplete", benchmarkComplete));
        metrics.setOperationalMetrics(Histogram.level(`benchmark.${benchmark.name}`, benchmark.value, dimensions));
    }
}));
//# sourceMappingURL=reportBenchmarks.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/events/scan.js


const scan_scan = (seedState) => (source, eventTypes, accumulator) => {
    let state = seedState;
    const sink = new TypedEventTarget();
    const listener = (event) => {
        state = accumulator(state, event);
        sink.dispatchEvent(new TypedCustomEvent("state", state));
    };
    let hasListener = false;
    sink.addEventListener = new Proxy(sink.addEventListener, {
        apply: (target, thisArg, args) => {
            if (hasListener)
                throw new Error("Cannot add another event listener. The TypedEventTarget returned by scan only " +
                    "supports a single listener, and one has already been added.");
            hasListener = true;
            eventTypes.forEach((eventType) => source.addEventListener(eventType, listener));
            target.apply(thisArg, args);
        },
    });
    sink.removeEventListener = new Proxy(sink.removeEventListener, {
        apply: (target, thisArg, args) => {
            eventTypes.forEach((eventType) => source.removeEventListener(eventType, listener));
            target.apply(thisArg, args);
        },
    });
    return sink;
};
//# sourceMappingURL=scan.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportHttpMetrics.js











const reportableMetricRequestTypes = [
    "asset",
    "lens_content",
    LENS_CORE_JS_REQUEST_TYPE,
    LENS_CORE_WASM_REQUEST_TYPE,
    COF_REQUEST_TYPE,
    GRPC_CALL_REQUEST_TYPE,
];
const getAdditionalDimensions = (dimensions) => {
    switch (dimensions.requestType) {
        case COF_REQUEST_TYPE:
            return [["delta", dimensions.delta]];
        case GRPC_CALL_REQUEST_TYPE:
            return [["method", dimensions.methodName]];
        case LENS_CORE_JS_REQUEST_TYPE:
        case LENS_CORE_WASM_REQUEST_TYPE:
            return [["custom", dimensions.customBuild]];
        default:
            return [];
    }
};
const getContentType = (dimensions) => {
    if (dimensions.requestType === "asset") {
        return dimensions.assetType;
    }
    return dimensions.requestType;
};
const getSizeKb = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            return 0;
        case "completed":
            return event.detail.sizeByte / 1024;
        default:
            assertUnreachable(event);
    }
};
const getStatus = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            return "0";
        case "completed":
            return event.detail.status.toString();
        default:
            assertUnreachable(event);
    }
};
const isRelevantRequest = (value) => {
    const reportableMetricDimensions = value;
    return reportableMetricRequestTypes.includes(reportableMetricDimensions.requestType);
};
const reportHttpMetrics = Injectable("reportHttpMetrics", [metricsClientFactory.token, requestStateEventTargetFactory.token], (metrics, requestStateEventTarget) => {
    scan_scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        var _a;
        const { inProgress } = state;
        const { dimensions, requestId } = event.detail;
        if (!isRelevantRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                const timer = event.detail.timer;
                inProgress.set(requestId, { timer });
                return { name: "inProgress", inProgress };
            case "completed":
            case "errored":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const downloadSizeKb = getSizeKb(event);
                const status = getStatus(event);
                const operationalDimensions = {
                    content_type: getContentType(dimensions),
                    network_type: (_a = getPlatformInfo().connectionType) !== null && _a !== void 0 ? _a : "unknown",
                    status,
                };
                for (const [key, value] of getAdditionalDimensions(dimensions)) {
                    operationalDimensions[key] = value;
                }
                completedRequest.timer.measure(operationalDimensions);
                return {
                    name: "completed",
                    inProgress: state.inProgress,
                    dimensions: operationalDimensions,
                    downloadSizeKb,
                    timer: completedRequest.timer,
                };
            default:
                assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        const { dimensions, timer, downloadSizeKb } = state;
        metrics.setOperationalMetrics(Count.count("download_finished", 1, dimensions));
        metrics.setOperationalMetrics(Histogram.level("download_size_kb", downloadSizeKb, dimensions));
        metrics.setOperationalMetrics(timer);
    });
});
//# sourceMappingURL=reportHttpMetrics.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportLegalState.js









const reportLegalState = Injectable("reportLegalState", [legalStateFactory.token, metricsEventTargetFactory.token, metricsClientFactory.token], (legalState, metricsEventTarget, metrics) => {
    legalState.events
        .pipe(forActions("accept", "reject"), map(([{ data, name }]) => ({
        name: "legalPrompt",
        legalPromptId: data,
        legalPromptResult: name === "accept"
            ? CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED
            : CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_DISMISSED,
    })))
        .subscribe({
        next: (legalPromptEvent) => {
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("legalPrompt", legalPromptEvent));
            metrics.setOperationalMetrics(Count.count("legal_prompt_interaction", 1, {
                accepted: (legalPromptEvent.legalPromptResult ===
                    CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED).toString(),
            }));
        },
    });
});
//# sourceMappingURL=reportLegalState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportLensAndAssetDownload.js









const relevantRequestTypes = ["lens_content", "asset"];
const isLensOrAssetRequest = (value) => {
    const requestType = value["requestType"];
    return typeof requestType === "string" && relevantRequestTypes.includes(requestType);
};
const reportLensAndAssetDownload = Injectable("reportLensAndAssetDownload", [metricsEventTargetFactory.token, metricsClientFactory.token, requestStateEventTargetFactory.token], (metricsEventTarget, metrics, requestStateEventTarget) => {
    scan_scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        var _a;
        const { inProgress } = state;
        const { dimensions, requestId } = event.detail;
        if (!isLensOrAssetRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                const timer = event.detail.timer;
                inProgress.set(requestId, { timer });
                return { name: "inProgress", inProgress };
            case "completed":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const { duration } = (_a = completedRequest.timer.measure()) !== null && _a !== void 0 ? _a : { duration: 0 };
                const downloadTimeSec = duration / 1000;
                const { sizeByte } = event.detail;
                switch (dimensions.requestType) {
                    case "lens_content":
                        return {
                            name: "completed",
                            inProgress,
                            event: new TypedCustomEvent("lensDownload", {
                                name: "lensDownload",
                                lensId: dimensions.lensId,
                                automaticDownload: false,
                                sizeByte: `${Math.ceil(sizeByte)}`,
                                downloadTimeSec,
                            }),
                        };
                    case "asset":
                        return {
                            name: "completed",
                            inProgress,
                            event: new TypedCustomEvent("assetDownload", {
                                name: "assetDownload",
                                assetId: dimensions.assetId,
                                automaticDownload: false,
                                sizeByte: `${Math.ceil(sizeByte)}`,
                                downloadTimeSec,
                            }),
                        };
                    default:
                        assertUnreachable(dimensions);
                }
            case "errored":
                const erroredRequest = inProgress.get(requestId);
                if (!erroredRequest)
                    return state;
                inProgress.delete(requestId);
                const error = event.detail.error;
                return {
                    name: "completed",
                    inProgress,
                    event: new TypedCustomEvent("exception", {
                        name: "exception",
                        lensId: dimensions.lensId,
                        type: dimensions.requestType === "lens_content" ? "lens" : "asset",
                        reason: stringifyError(error),
                    }),
                };
            default:
                assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        metricsEventTarget.dispatchEvent(state.event);
        if (state.event.detail.name === "exception") {
            metrics.setOperationalMetrics(Count.count("handled_exception", 1, { type: state.event.detail.type }));
        }
    });
});
//# sourceMappingURL=reportLensAndAssetDownload.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportLensValidationFailed.js






const reportLensValidationFailed = Injectable("reportLensValidationFailed", [lensStateFactory.token, metricsEventTargetFactory.token], (lensState, metricsEventTarget) => {
    lensState.events
        .pipe(forActions("applyLensFailed"), filter(([a]) => a.data.error.name === "LensContentValidationError"))
        .subscribe({
        next: ([{ data }]) => {
            const { lens } = data;
            const lensContentValidationFailed = {
                name: "lensContentValidationFailed",
                lensId: lens.id,
            };
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("lensContentValidationFailed", lensContentValidationFailed));
        },
    });
});
//# sourceMappingURL=reportLensValidationFailed.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js









function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return from([], scheduler);
    }
    var result = new Observable(combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return createObject(keys, values); }
        :
            identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = identity_identity; }
    return function (subscriber) {
        maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                maybeSchedule(scheduler, function () {
                    var source = from_from(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        executeSchedule(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}
//# sourceMappingURL=combineLatest.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var argsOrArgArray_isArray = Array.isArray;
function argsOrArgArray_argsOrArgArray(args) {
    return args.length === 1 && argsOrArgArray_isArray(args[0]) ? args[0] : args;
}
//# sourceMappingURL=argsOrArgArray.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js







function combineLatest_combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = args_popResultSelector(args);
    return resultSelector
        ? pipe(combineLatest_combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs_mapOneOrManyArgs(resultSelector))
        : operate(function (source, subscriber) {
            combineLatestInit(__spreadArray([source], __read(argsOrArgArray_argsOrArgArray(args))))(subscriber);
        });
}
//# sourceMappingURL=combineLatest.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js


function combineLatestWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return combineLatest_combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
}
//# sourceMappingURL=combineLatestWith.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/common/date.js
const DEFAULT_TIMEZONE = "America/Los_Angeles";
const dayFormatter = new Intl.DateTimeFormat("en-US", {
    timeZone: DEFAULT_TIMEZONE,
    year: "numeric",
    month: "numeric",
    day: "numeric",
});
const monthFormatter = new Intl.DateTimeFormat("en-US", {
    timeZone: DEFAULT_TIMEZONE,
    year: "numeric",
    month: "numeric",
});
//# sourceMappingURL=date.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportLensView.js
















const viewTimeThresholdSec = 0.1;
function isFirstTimeWithinPeriods(lensId, persistence) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        let isLensFirstWithinDay = false;
        let isLensFirstWithinMonth = false;
        try {
            const lensLastViewDate = yield persistence.retrieve(lensId);
            const currentDate = new Date();
            if (!lensLastViewDate) {
                isLensFirstWithinDay = true;
                isLensFirstWithinMonth = true;
            }
            else {
                isLensFirstWithinDay = dayFormatter.format(lensLastViewDate) !== dayFormatter.format(currentDate);
                isLensFirstWithinMonth = monthFormatter.format(lensLastViewDate) !== monthFormatter.format(currentDate);
            }
            yield persistence.store(lensId, currentDate);
        }
        catch (error) {
            console.error(`Error handling persistence for lensId ${lensId}: ${error}`);
            isLensFirstWithinDay = false;
            isLensFirstWithinMonth = false;
        }
        return { isLensFirstWithinDay, isLensFirstWithinMonth };
    });
}
const reportLensView = Injectable("reportLensView", [
    cameraKitSessionFactory.token,
    lensStateFactory.token,
    sessionStateFactory.token,
    metricsEventTargetFactory.token,
    metricsClientFactory.token,
    configurationToken,
], (session, lensState, sessionState, metricsEventTarget, metrics, configuration) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { cluster: performanceCluster, webglRendererInfo } = (_a = (yield configuration.lensPerformance)) !== null && _a !== void 0 ? _a : {
        cluster: 0,
        webglRendererInfo: "unknown",
    };
    const lensViewPersistence = new ExpiringPersistence(() => 60 * 24 * 60 * 60, new IndexedDBPersistence({ databaseName: "recentLensViews" }));
    merge(lensState.events.pipe(forActions("downloadComplete"), map(([a]) => a.data)), lensState.events.pipe(inStates("lensApplied"), switchMap(([, s]) => sessionState.events.pipe(forActions("resume"), takeUntil(lensState.events.pipe(forActions("removeLens"))), map(() => s.data)))))
        .pipe(map((lens) => [getTimeMs(), lens.id, lens.groupId]), mergeMap(([applyLensStartTime, lensId, lensGroupId]) => {
        const alreadyOn = isState(lensState.getState(), "lensApplied");
        const applyDelay = alreadyOn
            ? of(0)
            : lensState.events.pipe(forActions("resourcesLoaded"), filter(([a]) => a.data.id === lensId), take(1), map(() => (getTimeMs() - applyLensStartTime) / 1000));
        const viewMetrics = (alreadyOn
            ? of([getTimeMs(), session.metrics.beginMeasurement()])
            : lensState.events.pipe(forActions("turnedOn"), filter(([a]) => a.data.id === lensId), map(() => [getTimeMs(), session.metrics.beginMeasurement()]))).pipe(take(1), mergeMap(([lensTurnedOnTime, metricsMeasurement]) => lensState.events.pipe(forActions("turnedOff"), filter(([a]) => a.data.id === lensId), raceWith(sessionState.events.pipe(forActions("suspend"))), map(() => {
            metricsMeasurement.end();
            return Object.assign({ viewTimeSec: (getTimeMs() - lensTurnedOnTime) / 1000 }, metricsMeasurement.measure());
        }))));
        return applyDelay.pipe(combineLatestWith(viewMetrics, from_from(isFirstTimeWithinPeriods(lensId, lensViewPersistence))), takeUntil(lensState.events.pipe(forActions("turnedOn"), filter(([a]) => a.data.id !== lensId))), take(1), map(([applyDelaySec, viewMetrics, isFirstTimeResults]) => (Object.assign(Object.assign({ applyDelaySec,
            lensId,
            lensGroupId }, viewMetrics), isFirstTimeResults))));
    }))
        .subscribe({
        next: ({ applyDelaySec, lensId, lensGroupId, viewTimeSec, avgFps, lensFrameProcessingTimeMsAvg, lensFrameProcessingTimeMsStd, lensFrameProcessingTimeMsMedian, lensFrameProcessingN, isLensFirstWithinDay, isLensFirstWithinMonth, }) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            if (viewTimeSec < viewTimeThresholdSec)
                return;
            const lensView = {
                name: "lensView",
                applyDelaySec,
                avgFps,
                lensId,
                lensGroupId,
                lensFrameProcessingTimeMsAvg,
                lensFrameProcessingTimeMsStd,
                recordingTimeSec: 0,
                viewTimeSec,
                isLensFirstWithinDay,
                isLensFirstWithinMonth,
                performanceCluster: `${performanceCluster}`,
                webglRendererInfo,
            };
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("lensView", lensView));
            metrics.setOperationalMetrics(Histogram.level("lens_view", viewTimeSec * 1000));
            if (lensFrameProcessingN >= 30) {
                metrics.setOperationalMetrics(Histogram.level("lens_view_frame-processing-time", lensFrameProcessingTimeMsMedian, {
                    performance_cluster: performanceCluster.toString(),
                }));
            }
        }),
    });
}));
//# sourceMappingURL=reportLensView.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportLensWait.js







const reportLensWait_viewTimeThresholdSec = 0.1;
const reportLensWait = Injectable("reportLensWait", [lensStateFactory.token, metricsEventTargetFactory.token], (lensState, metricsEventTarget) => {
    lensState.events
        .pipe(forActions("applyLens"), mergeMap(([a]) => {
        const lensId = a.data.lens.id;
        const lensGroupId = a.data.lens.groupId;
        const applyLensStartTime = getTimeMs();
        return lensState.events.pipe(forActions("firstFrameProcessed", "applyLens"), take(1), map(() => [
            (getTimeMs() - applyLensStartTime) / 1000,
            lensId,
            lensGroupId,
        ]));
    }))
        .subscribe({
        next: ([viewTimeSec, lensId, lensGroupId]) => {
            if (viewTimeSec < reportLensWait_viewTimeThresholdSec)
                return;
            const lensWait = {
                name: "lensWait",
                lensId,
                viewTimeSec,
                lensGroupId,
            };
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("lensWait", lensWait));
        },
    });
});
//# sourceMappingURL=reportLensWait.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportUserSession.js







const reportUserSession = Injectable("reportUserSession", [metricsEventTargetFactory.token], (metricsEventTarget) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const userSessionKey = "userSessionInfo";
    const db = new IndexedDBPersistence({ databaseName: "SessionHistory" });
    const date = new Date();
    const formattedDate = dayFormatter.format(date);
    const formattedDateParts = dayFormatter.formatToParts(date);
    const { day, month, year } = formattedDateParts.reduce((acc, { type, value }) => (Object.assign(Object.assign({}, acc), { [type]: parseInt(value) })), {});
    const userSessionInfo = yield db.retrieve(userSessionKey);
    const mostRecentSessionStartDate = userSessionInfo === null || userSessionInfo === void 0 ? void 0 : userSessionInfo.mostRecentSessionStartDate;
    const formattedMostRecentSessionStartDate = mostRecentSessionStartDate
        ? dayFormatter.format(mostRecentSessionStartDate)
        : null;
    const dailySessionBucketMap = new Map([
        [1, DailySessionBucket.ONE_SESSION],
        [2, DailySessionBucket.TWO_SESSION],
        [3, DailySessionBucket.THREE_SESSION],
        [4, DailySessionBucket.FOUR_SESSION],
        [5, DailySessionBucket.FIVE_SESSION],
        [6, DailySessionBucket.SIX_SESSION],
        [7, DailySessionBucket.SEVEN_SESSION],
        [8, DailySessionBucket.EIGHT_SESSION],
        [9, DailySessionBucket.NINE_SESSION],
    ]);
    let dailySessionBucket = (_a = userSessionInfo === null || userSessionInfo === void 0 ? void 0 : userSessionInfo.dailySessionBucket) !== null && _a !== void 0 ? _a : DailySessionBucket.NO_SESSION_BUCKET;
    let isFirstWithinMonth = false;
    if (formattedMostRecentSessionStartDate === formattedDate) {
        dailySessionBucket =
            (_b = dailySessionBucketMap.get(dailySessionBucket + 1)) !== null && _b !== void 0 ? _b : DailySessionBucket.TEN_OR_MORE_SESSION;
        yield db.store(userSessionKey, {
            mostRecentSessionStartDate: date,
            dailySessionBucket,
        });
    }
    else {
        isFirstWithinMonth =
            !mostRecentSessionStartDate ||
                monthFormatter.format(mostRecentSessionStartDate) !== monthFormatter.format(date);
        yield db.store(userSessionKey, {
            mostRecentSessionStartDate: date,
            dailySessionBucket: (dailySessionBucket = DailySessionBucket.ONE_SESSION),
        });
    }
    const session = {
        name: "session",
        dailySessionBucket,
        isFirstWithinMonth,
        month: `${month}`,
        day: `${day}`,
        year: `${year}`,
    };
    metricsEventTarget.dispatchEvent(new TypedCustomEvent("session", session));
}));
//# sourceMappingURL=reportUserSession.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reportPlatformCapabilities.js






const reportPlatformCapabilities = Injectable("reportPlatformCapabilities", [metricsClientFactory.token], (metrics) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const { webgl, wasm, webxr } = yield getPlatformCapabilities();
    metrics.setOperationalMetrics(Count.count(joinMetricNames(["platform", "webgl"]), webgl.supported ? 1 : 0));
    metrics.setOperationalMetrics(Count.count(joinMetricNames(["platform", "wasm"]), wasm.supported ? 1 : 0));
    metrics.setOperationalMetrics(Count.count(joinMetricNames(["platform", "webxr"]), webxr.supported ? 1 : 0));
}));
//# sourceMappingURL=reportPlatformCapabilities.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/reporters/reporters.js











const reportGloballyScopedMetrics = new PartialContainer_PartialContainer({})
    .provides(reportHttpMetrics)
    .provides(reportBenchmarks)
    .provides(reportLensAndAssetDownload)
    .provides(reportLegalState)
    .provides(reportPlatformCapabilities);
const reportSessionScopedMetrics = new PartialContainer_PartialContainer({})
    .provides(reportUserSession)
    .provides(reportLensView)
    .provides(reportLensWait)
    .provides(reportSessionException)
    .provides(reportLensValidationFailed);
//# sourceMappingURL=reporters.js.map
;// CONCATENATED MODULE: ./node_modules/browser-fs-access/dist/index.modern.js
const e=(()=>{if("undefined"==typeof self)return!1;if("top"in self&&self!==top)try{top.window.document._=0}catch(e){return!1}return"showOpenFilePicker"in self})(),t=e?Promise.resolve().then(function(){return l}):Promise.resolve().then(function(){return v});async function n(...e){return(await t).default(...e)}const r=e?Promise.resolve().then(function(){return y}):Promise.resolve().then(function(){return b});async function i(...e){return(await r).default(...e)}const a=e?Promise.resolve().then(function(){return m}):Promise.resolve().then(function(){return k});async function o(...e){return(await a).default(...e)}const s=async e=>{const t=await e.getFile();return t.handle=e,t};var c=async(e=[{}])=>{Array.isArray(e)||(e=[e]);const t=[];e.forEach((e,n)=>{t[n]={description:e.description||"Files",accept:{}},e.mimeTypes?e.mimeTypes.map(r=>{t[n].accept[r]=e.extensions||[]}):t[n].accept["*/*"]=e.extensions||[]});const n=await window.showOpenFilePicker({id:e[0].id,startIn:e[0].startIn,types:t,multiple:e[0].multiple||!1,excludeAcceptAllOption:e[0].excludeAcceptAllOption||!1}),r=await Promise.all(n.map(s));return e[0].multiple?r:r[0]},l={__proto__:null,default:c};function u(e){function t(e){if(Object(e)!==e)return Promise.reject(new TypeError(e+" is not an object."));var t=e.done;return Promise.resolve(e.value).then(function(e){return{value:e,done:t}})}return u=function(e){this.s=e,this.n=e.next},u.prototype={s:null,n:null,next:function(){return t(this.n.apply(this.s,arguments))},return:function(e){var n=this.s.return;return void 0===n?Promise.resolve({value:e,done:!0}):t(n.apply(this.s,arguments))},throw:function(e){var n=this.s.return;return void 0===n?Promise.reject(e):t(n.apply(this.s,arguments))}},new u(e)}const p=async(e,t,n=e.name,r)=>{const i=[],a=[];var o,s=!1,c=!1;try{for(var l,d=function(e){var t,n,r,i=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);i--;){if(n&&null!=(t=e[n]))return t.call(e);if(r&&null!=(t=e[r]))return new u(t.call(e));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}(e.values());s=!(l=await d.next()).done;s=!1){const o=l.value,s=`${n}/${o.name}`;"file"===o.kind?a.push(o.getFile().then(t=>(t.directoryHandle=e,t.handle=o,Object.defineProperty(t,"webkitRelativePath",{configurable:!0,enumerable:!0,get:()=>s})))):"directory"!==o.kind||!t||r&&r(o)||i.push(p(o,t,s,r))}}catch(e){c=!0,o=e}finally{try{s&&null!=d.return&&await d.return()}finally{if(c)throw o}}return[...(await Promise.all(i)).flat(),...await Promise.all(a)]};var d=async(e={})=>{e.recursive=e.recursive||!1,e.mode=e.mode||"read";const t=await window.showDirectoryPicker({id:e.id,startIn:e.startIn,mode:e.mode});return(await(await t.values()).next()).done?[t]:p(t,e.recursive,void 0,e.skipDirectory)},y={__proto__:null,default:d},f=async(e,t=[{}],n=null,r=!1,i=null)=>{Array.isArray(t)||(t=[t]),t[0].fileName=t[0].fileName||"Untitled";const a=[];let o=null;if(e instanceof Blob&&e.type?o=e.type:e.headers&&e.headers.get("content-type")&&(o=e.headers.get("content-type")),t.forEach((e,t)=>{a[t]={description:e.description||"Files",accept:{}},e.mimeTypes?(0===t&&o&&e.mimeTypes.push(o),e.mimeTypes.map(n=>{a[t].accept[n]=e.extensions||[]})):o?a[t].accept[o]=e.extensions||[]:a[t].accept["*/*"]=e.extensions||[]}),n)try{await n.getFile()}catch(e){if(n=null,r)throw e}const s=n||await window.showSaveFilePicker({suggestedName:t[0].fileName,id:t[0].id,startIn:t[0].startIn,types:a,excludeAcceptAllOption:t[0].excludeAcceptAllOption||!1});!n&&i&&i(s);const c=await s.createWritable();if("stream"in e){const t=e.stream();return await t.pipeTo(c),s}return"body"in e?(await e.body.pipeTo(c),s):(await c.write(await e),await c.close(),s)},m={__proto__:null,default:f},w=async(e=[{}])=>(Array.isArray(e)||(e=[e]),new Promise((t,n)=>{const r=document.createElement("input");r.type="file";const i=[...e.map(e=>e.mimeTypes||[]),...e.map(e=>e.extensions||[])].join();r.multiple=e[0].multiple||!1,r.accept=i||"",r.style.display="none",document.body.append(r);const a=e=>{"function"==typeof o&&o(),t(e)},o=e[0].legacySetup&&e[0].legacySetup(a,()=>o(n),r),s=()=>{window.removeEventListener("focus",s),r.remove()};r.addEventListener("click",()=>{window.addEventListener("focus",s)}),r.addEventListener("change",()=>{window.removeEventListener("focus",s),r.remove(),a(r.multiple?Array.from(r.files):r.files[0])}),"showPicker"in HTMLInputElement.prototype?r.showPicker():r.click()})),v={__proto__:null,default:w},h=async(e=[{}])=>(Array.isArray(e)||(e=[e]),e[0].recursive=e[0].recursive||!1,new Promise((t,n)=>{const r=document.createElement("input");r.type="file",r.webkitdirectory=!0;const i=e=>{"function"==typeof a&&a(),t(e)},a=e[0].legacySetup&&e[0].legacySetup(i,()=>a(n),r);r.addEventListener("change",()=>{let t=Array.from(r.files);e[0].recursive?e[0].recursive&&e[0].skipDirectory&&(t=t.filter(t=>t.webkitRelativePath.split("/").every(t=>!e[0].skipDirectory({name:t,kind:"directory"})))):t=t.filter(e=>2===e.webkitRelativePath.split("/").length),i(t)}),"showPicker"in HTMLInputElement.prototype?r.showPicker():r.click()})),b={__proto__:null,default:h},P=async(e,t={})=>{Array.isArray(t)&&(t=t[0]);const n=document.createElement("a");let r=e;"body"in e&&(r=await async function(e,t){const n=e.getReader(),r=new ReadableStream({start:e=>async function t(){return n.read().then(({done:n,value:r})=>{if(!n)return e.enqueue(r),t();e.close()})}()}),i=new Response(r),a=await i.blob();return n.releaseLock(),new Blob([a],{type:t})}(e.body,e.headers.get("content-type"))),n.download=t.fileName||"Untitled",n.href=URL.createObjectURL(await r);const i=()=>{"function"==typeof a&&a()},a=t.legacySetup&&t.legacySetup(i,()=>a(),n);return n.addEventListener("click",()=>{setTimeout(()=>URL.revokeObjectURL(n.href),3e4),i()}),n.click(),null},k={__proto__:null,default:P};

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-client-interface/exif.js
const JPEG_ID = 0xffd8;
const APP1_MARKER = 0xffe1;
const EXIF_ID = 0x45786966;
const LITTLE_ENDIAN = 0x4949;
const ORIENTATION_TAG_OFFSET = 0x0112;
var Orientation;
(function (Orientation) {
    Orientation[Orientation["TopLeft"] = 1] = "TopLeft";
    Orientation[Orientation["TopRight"] = 2] = "TopRight";
    Orientation[Orientation["BottomRight"] = 3] = "BottomRight";
    Orientation[Orientation["BottomLeft"] = 4] = "BottomLeft";
    Orientation[Orientation["LeftTop"] = 5] = "LeftTop";
    Orientation[Orientation["RightTop"] = 6] = "RightTop";
    Orientation[Orientation["RightBottom"] = 7] = "RightBottom";
    Orientation[Orientation["LeftBottom"] = 8] = "LeftBottom";
})(Orientation || (Orientation = {}));
function extractJpegOrientationTag(data) {
    const view = new DataView(data);
    if (view.getUint16(0, false) !== JPEG_ID)
        return undefined;
    const length = view.byteLength;
    let offset = 2;
    while (offset < length) {
        if (view.getUint16(offset + 2, false) <= 8)
            return undefined;
        let marker = view.getUint16(offset, false);
        offset += 2;
        if (marker === APP1_MARKER) {
            if (view.getUint32((offset += 2), false) !== EXIF_ID) {
                return undefined;
            }
            let little = view.getUint16((offset += 6), false) === LITTLE_ENDIAN;
            offset += view.getUint32(offset + 4, little);
            let tags = view.getUint16(offset, little);
            offset += 2;
            for (let i = 0; i < tags; i++) {
                if (view.getUint16(offset + i * 12, little) === ORIENTATION_TAG_OFFSET) {
                    return view.getUint16(offset + i * 12 + 8, little);
                }
            }
        }
        else if ((marker & 0xff00) !== 0xff00) {
            break;
        }
        else {
            offset += view.getUint16(offset, false);
        }
    }
    return undefined;
}
//# sourceMappingURL=exif.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-client-interface/imagePicker.js




const imagePicker_logger = getLogger("lensClientInterfaceImagePicker");
const imagePicker_mimeTypes = {
    image: [
        "image/avif",
        "image/bmp",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/svg+xml",
        "image/tiff",
        "image/webp",
    ],
    video: [
        "video/3gpp",
        "video/3gpp2",
        "video/mp2t",
        "video/mp4",
        "video/mpeg",
        "video/ogg",
        "video/quicktime",
        "video/webm",
        "video/x-msvideo",
    ],
};
function* enumerateSupportedVideoTypes(types) {
    const testVideoElement = typeof document !== "undefined" ? document.createElement("video") : undefined;
    for (const type of types) {
        if ((testVideoElement === null || testVideoElement === void 0 ? void 0 : testVideoElement.canPlayType(type)) || false) {
            yield type;
        }
    }
}
function readFileAsArrayBuffer(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.addEventListener("load", (event) => {
            resolve(event.target.result);
        });
        reader.addEventListener("error", (event) => {
            reject(event.target.error);
        });
        reader.readAsArrayBuffer(file);
    });
}
function getMimeType({ ImageEnabled, VideoEnabled }) {
    const types = [];
    if (ImageEnabled === "1")
        types.push(...imagePicker_mimeTypes.image);
    if (VideoEnabled === "1")
        types.push(...enumerateSupportedVideoTypes(imagePicker_mimeTypes.video));
    if (types.length === 0) {
        throw new Error("Unknown media type requested.");
    }
    return types;
}
function getOrientation(data, lensCore) {
    var _a;
    const orientationMap = {
        [1]: lensCore.ExternalMediaOrientation.CW0,
        [2]: lensCore.ExternalMediaOrientation.CW0,
        [3]: lensCore.ExternalMediaOrientation.CW180,
        [4]: lensCore.ExternalMediaOrientation.CW180,
        [5]: lensCore.ExternalMediaOrientation.CW90,
        [6]: lensCore.ExternalMediaOrientation.CW90,
        [7]: lensCore.ExternalMediaOrientation.CW270,
        [8]: lensCore.ExternalMediaOrientation.CW270,
    };
    try {
        return orientationMap[(_a = extractJpegOrientationTag(data)) !== null && _a !== void 0 ? _a : 1];
    }
    catch (error) {
        imagePicker_logger.info("Error occurred while reading EXIF orientation tag.", error);
        return lensCore.ExternalMediaOrientation.CW0;
    }
}
function pickClientImage(clientInterfaceData, lensCore, filePicker) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const mimeTypes = getMimeType(clientInterfaceData);
        imagePicker_logger.debug(`Opening file dialog for MIME types: ${mimeTypes}`);
        const file = yield filePicker({ mimeTypes }, n);
        if (Array.isArray(file)) {
            throw new Error("Multiple files are not supported.");
        }
        imagePicker_logger.debug(`Selected file MIME type: ${file.type}`);
        const data = yield readFileAsArrayBuffer(file);
        if (file.type.startsWith("image/")) {
            lensCore.provideExternalImage({
                data,
                orientation: getOrientation(data, lensCore),
                faceRects: [
                    {
                        origin: {
                            x: 0,
                            y: 0,
                        },
                        size: {
                            width: 1,
                            height: 1,
                        },
                    },
                ],
            });
        }
        else {
            lensCore.provideExternalVideo({
                data,
                orientation: lensCore.ExternalMediaOrientation.CW0,
            });
        }
    });
}
//# sourceMappingURL=imagePicker.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-client-interface/filePicker.js

const filePickerFactory = Injectable("filePicker", () => (options, openDefaultPicker) => openDefaultPicker(options));
//# sourceMappingURL=filePicker.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens-client-interface/lensClientInterface.js







const lensClientInterface_logger = getLogger("lensClientInterface");
const registerLensClientInterfaceHandler = Injectable("registerLensClientInterfaceHandler", [lensCoreFactory.token, filePickerFactory.token], (lensCore, filePicker) => {
    if (!lensCore.setClientInterfaceRequestHandler) {
        lensClientInterface_logger.warn("Current LensCore version doesn't support lens client interface requests");
        return;
    }
    lensCore.setClientInterfaceRequestHandler(({ data, interfaceControl, interfaceAction }) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (interfaceControl === lensCore.InterfaceControl.ImagePicker &&
            interfaceAction === lensCore.InterfaceAction.Show) {
            yield pickClientImage(data, lensCore, filePicker).catch((error) => {
                lensClientInterface_logger.error(lensImagePickerError("Error occurred while attempting to select an image file for the lens request.", error));
            });
        }
    }));
});
//# sourceMappingURL=lensClientInterface.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/remote-configuration/preloadConfiguration.js






const preloadConfiguration_logger = getLogger("setPreloadedConfiguration");
const setPreloadedConfiguration = Injectable("setPreloadedConfiguration", [lensCoreFactory.token, remoteConfigurationFactory.token], (lensCore, remoteConfiguration) => {
    remoteConfiguration
        .getNamespace(Namespace.LENS_CORE_CONFIG)
        .pipe(take(1))
        .subscribe({
        next: (configs) => {
            const inputs = configs.map(({ configId, value }) => ({ configId, value }));
            lensCore.setPreloadedConfiguration(inputs);
        },
        error: preloadConfiguration_logger.error,
    });
});
//# sourceMappingURL=preloadConfiguration.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/CameraKit.js




















const CameraKit_logger = getLogger("CameraKit");
const publicMetricsEventNames = ["lensView", "lensWait"];
let CameraKit = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _createSession_decorators;
    let _destroy_decorators;
    return _a = class CameraKit {
            constructor(lensRepository, lensCore, pageVisibility, container, allMetrics) {
                this.lensRepository = (__runInitializers(this, _instanceExtraInitializers), lensRepository);
                this.lensCore = lensCore;
                this.pageVisibility = pageVisibility;
                this.container = container;
                this.metrics = new TypedEventTarget();
                this.sessions = [];
                this.lenses = { repository: this.lensRepository };
                publicMetricsEventNames.forEach((eventName) => {
                    allMetrics.addEventListener(eventName, (e) => this.metrics.dispatchEvent(e));
                });
            }
            createSession({ liveRenderTarget, renderWhileTabHidden, } = {}) {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    const exceptionHandler = (error) => {
                        if (error.name === "LensCoreAbortError") {
                            CameraKit_logger.error(lensAbortError("Unrecoverable error occurred during lens execution. " +
                                "The CameraKitSession will be destroyed.", error));
                        }
                        else {
                            CameraKit_logger.error(lensExecutionError("Error occurred during lens execution. " +
                                "The lens cannot be rendered and will be removed from the CameraKitSession.", error));
                        }
                    };
                    const config = this.container.get(configurationToken);
                    yield this.lensCore.initialize({
                        canvas: liveRenderTarget,
                        shouldUseWorker: !renderWhileTabHidden && config.shouldUseWorker,
                        exceptionHandler,
                    });
                    if (config.fonts.length > 0) {
                        this.lensCore.setSystemFonts({
                            fonts: config.fonts,
                        });
                    }
                    yield this.lensCore.setRenderLoopMode({
                        mode: renderWhileTabHidden
                            ? this.lensCore.RenderLoopMode.SetTimeout
                            : this.lensCore.RenderLoopMode.RequestAnimationFrame,
                    });
                    const sessionContainer = this.container
                        .copy()
                        .provides(sessionStateFactory)
                        .provides(lensStateFactory)
                        .provides(lensKeyboardFactory)
                        .provides(cameraKitSessionFactory)
                        .run(registerLensAssetsProvider)
                        .run(registerLensClientInterfaceHandler)
                        .run(setPreloadedConfiguration)
                        .run(reportSessionScopedMetrics)
                        .run(registerUriHandlers);
                    const session = sessionContainer.get(cameraKitSessionFactory.token);
                    this.sessions.push(session);
                    return session;
                });
            }
            destroy() {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    resetLogger();
                    this.pageVisibility.destroy();
                    yield Promise.all(this.sessions.map((session) => session.destroy()));
                    this.sessions = [];
                });
            }
        },
        (() => {
            _createSession_decorators = [errorLoggingDecorator(CameraKit_logger)];
            _destroy_decorators = [errorLoggingDecorator(CameraKit_logger)];
            __esDecorate(_a, null, _createSession_decorators, { kind: "method", name: "createSession", static: false, private: false, access: { has: obj => "createSession" in obj, get: obj => obj.createSession } }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _destroy_decorators, { kind: "method", name: "destroy", static: false, private: false, access: { has: obj => "destroy" in obj, get: obj => obj.destroy } }, null, _instanceExtraInitializers);
        })(),
        _a;
})();
const cameraKitFactory = Injectable("CameraKit", [
    lensRepositoryFactory.token,
    metricsEventTargetFactory.token,
    lensCoreFactory.token,
    pageVisibilityFactory.token,
    CONTAINER,
], (lensRepository, metrics, lensCore, pageVisibility, container) => new CameraKit(lensRepository, lensCore, pageVisibility, container, metrics));
//# sourceMappingURL=CameraKit.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/platform/assertPlatformSupported.js


function assertPlatformSupported() {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const { wasm, webgl } = yield getPlatformCapabilities();
        if (!wasm.supported)
            throw wasm.error;
        if (!webgl.supported)
            throw webgl.error;
    });
}
//# sourceMappingURL=assertPlatformSupported.js.map
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const esm_browser_native = ({
  randomUUID
});
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).

var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js


/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var stringify_i = 0; stringify_i < 256; ++stringify_i) {
  byteToHex.push((stringify_i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  //
  // Note to future-self: No, you can't remove the `toLowerCase()` call.
  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
function stringify(arr, offset = 0) {
  var uuid = unsafeStringify(arr, offset);
  // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields
  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
/* harmony default export */ const esm_browser_stringify = ((/* unused pure expression or super */ null && (stringify)));
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js



function v4(options, buf, offset) {
  if (esm_browser_native.randomUUID && !buf && !options) {
    return esm_browser_native.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
/* harmony default export */ const esm_browser_v4 = (v4);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/metrics/businessEventsReporter.js















const businessEventsReporter_logger = getLogger("BusinessEventsReporter");
const connectivityTypeMapping = {
    cellular: cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE,
    bluetooth: cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH,
    wifi: cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI,
    unknown: cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN,
    none: cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE,
};
const vendorUuidKey = "vendorUuid";
const vendorUuidExpiry = convertDaysToSeconds(60);
const getOrGenerateVendorUuid = (persistence) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    try {
        const storedUuid = yield persistence.retrieve(vendorUuidKey);
        if (storedUuid) {
            return storedUuid;
        }
        const newUuid = esm_browser_v4();
        yield persistence.store(vendorUuidKey, newUuid);
        return newUuid;
    }
    catch (error) {
        throw new Error("Failed to generate vendor UUID");
    }
});
function listenAndReport(metricsEventTarget, metricsClient, eventHandlers, appVendorAndPartnerUuid) {
    const sessionId = esm_browser_v4();
    businessEventsReporter_logger.log(`Session ID: ${sessionId}`);
    let sequenceId = 1;
    const makeBlizzardEvent = (event, appVendorUuid, partnerUuid) => {
        var _a;
        const { sdkShortVersion, sdkLongVersion, lensCore, locale, origin, deviceModel, connectionType } = getPlatformInfo();
        const deviceConnectivity = (_a = connectivityTypeMapping[connectionType]) !== null && _a !== void 0 ? _a : cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN;
        return Object.assign(Object.assign({}, event), { cameraKitEventBase: CameraKitEventBase.fromPartial({
                kitEventBase: KitEventBase.fromPartial({
                    locale,
                    kitVariant: KitType.CAMERA_KIT_WEB,
                    kitVariantVersion: sdkShortVersion,
                    kitClientTimestampMillis: `${Date.now()}`,
                }),
                deviceCluster: "0",
                cameraKitVersion: sdkLongVersion,
                lensCoreVersion: lensCore.version,
                deviceModel,
                cameraKitVariant: CameraKitVariant.CAMERA_KIT_VARIANT_PARTNER,
                cameraKitFlavor: cameraKitEvents_CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG,
                appId: origin,
                deviceConnectivity,
                sessionId,
                appVendorUuid,
                partnerUuid,
            }) });
    };
    const sendServerEvent = (eventName, eventData) => {
        const { osName: osType, osVersion } = getPlatformInfo();
        return metricsClient.setBusinessEvents(ServerEvent.fromPartial({
            eventName,
            osType,
            osVersion,
            maxSequenceIdOnInstance: "0",
            sequenceId: `${sequenceId++}`,
            eventData,
        }));
    };
    const metricsEvents = entries_entries(eventHandlers).map(([eventType, createEventData]) => fromEvent(metricsEventTarget, eventType).pipe(map((event) => ({ event, createEventData }))));
    merge(...metricsEvents)
        .pipe(combineLatestWith(appVendorAndPartnerUuid))
        .subscribe(([{ event, createEventData }, { appVendorUuid, partnerUuid }]) => {
        const [eventName, eventData] = createEventData(makeBlizzardEvent(event.detail, appVendorUuid, partnerUuid));
        sendServerEvent(eventName, eventData);
    });
}
function getAppVendorAndPartnerUuid(configuration, remoteConfiguration) {
    const vendorAnalyticsPersistence = new ExpiringPersistence(() => vendorUuidExpiry, new IndexedDBPersistence({ databaseName: "VendorAnalytics" }));
    return remoteConfiguration.getInitializationConfig().pipe(take(1), switchMap(({ appVendorUuidOptIn }) => {
        const partnerUuid = configuration.analyticsId;
        if (appVendorUuidOptIn) {
            return from_from(getOrGenerateVendorUuid(vendorAnalyticsPersistence)).pipe(map((appVendorUuid) => ({ appVendorUuid, partnerUuid })));
        }
        return of({ appVendorUuid: undefined, partnerUuid });
    }), catchError((error) => {
        businessEventsReporter_logger.warn(`Failed to retrieve or generate vendor UUID.`, error);
        return of({ appVendorUuid: undefined, partnerUuid: configuration.analyticsId });
    }));
}
const businessEventsReporterFactory = Injectable("businessEventsReporter", [
    metricsEventTargetFactory.token,
    metricsClientFactory.token,
    configurationToken,
    remoteConfigurationFactory.token,
], (metricsEventTarget, metricsClient, configuration, remoteConfiguration) => {
    const appVendorAndPartnerUuid = getAppVendorAndPartnerUuid(configuration, remoteConfiguration);
    listenAndReport(metricsEventTarget, metricsClient, {
        assetDownload: (event) => [
            "CAMERA_KIT_ASSET_DOWNLOAD",
            { cameraKitAssetDownload: CameraKitAssetDownload.fromPartial(event) },
        ],
        assetValidationFailed: (event) => [
            "CAMERA_KIT_ASSET_VALIDATION_FAILED",
            {
                cameraKitAssetValidationFailed: CameraKitAssetValidationFailed.fromPartial(event),
            },
        ],
        benchmarkComplete: (event) => [
            "CAMERA_KIT_WEB_BENCHMARK_COMPLETE",
            {
                cameraKitWebBenchmarkComplete: CameraKitWebBenchmarkComplete.fromPartial(event),
            },
        ],
        exception: (event) => [
            "CAMERA_KIT_EXCEPTION",
            { cameraKitException: CameraKitException.fromPartial(event) },
        ],
        legalPrompt: (event) => [
            "CAMERA_KIT_LEGAL_PROMPT",
            { cameraKitLegalPrompt: CameraKitLegalPrompt.fromPartial(event) },
        ],
        lensDownload: (event) => [
            "CAMERA_KIT_LENS_DOWNLOAD",
            { cameraKitLensDownload: CameraKitLensDownload.fromPartial(event) },
        ],
        lensView: (event) => [
            "CAMERA_KIT_WEB_LENS_SWIPE",
            { cameraKitWebLensSwipe: CameraKitWebLensSwipe.fromPartial(event) },
        ],
        lensWait: (event) => [
            "CAMERA_KIT_LENS_SPIN",
            { cameraKitLensSpin: CameraKitLensSpin.fromPartial(event) },
        ],
        lensContentValidationFailed: (event) => [
            "CAMERA_KIT_LENS_CONTENT_VALIDATION_FAILED",
            {
                cameraKitLensContentValidationFailed: CameraKitLensContentValidationFailed.fromPartial(event),
            },
        ],
        session: (event) => [
            "CAMERA_KIT_SESSION",
            { cameraKitSession: CameraKitSession.fromPartial(event) },
        ],
    }, appVendorAndPartnerUuid);
});
//# sourceMappingURL=businessEventsReporter.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/logger/registerLogEntriesSubscriber.js







const registerLogEntriesSubscriber = Injectable("registerLogEntriesSubscriber", [configurationToken, logEntriesFactory.token], (configuration, logEntries) => {
    logEntries
        .pipe(filter((entry) => logLevelMap[entry.level] >= logLevelMap[configuration.logLevel]))
        .subscribe((logEntry) => {
        switch (configuration.logger) {
            case "console":
                const messages = getPlatformInfo().browser.brand === "Chrome"
                    ? logEntry.messages.map((message) => {
                        if (!(message instanceof Error))
                            return message;
                        message.stack = stringifyError(message);
                        return message;
                    })
                    : logEntry.messages;
                console[logEntry.level](`[CameraKit.${logEntry.module}]`, ...messages);
                break;
        }
    });
});
//# sourceMappingURL=registerLogEntriesSubscriber.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/clients/lensesClient.js




const lensesClientFactory = Injectable("lensesClient", [grpcHandlerFactory.token], (grpcHandler) => createTsProtoClient(LensesDefinition, grpcHandler));
//# sourceMappingURL=lensesClient.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/lens/cameraKitLensSource.js










const cameraKitLensSource_logger = getLogger("CameraKitLensSource");
const cameraKitLensSource_hasAnyValue = (c) => {
    var _a, _b;
    return ((_b = (_a = c.value) === null || _a === void 0 ? void 0 : _a.anyValue) === null || _b === void 0 ? void 0 : _b.value) instanceof Uint8Array;
};
const defaultWatermarkLens = {
    id: "60515300902",
    name: "Watermark",
    content: {
        lnsSha256: "3EDEAEBCD51A547FF4D1F5708FBD6F4D628AD736BEE07AB3844B14E6C69EC510",
        lnsUrlBolt: "https://bolt-gcdn.sc-cdn.net/3/L6uAe5Fhyg0ZFf3RLsCVZ?bo=EhgaABoAMgF9OgEEQgYIkbHPpgZIAlASYAE%3D&uc=18",
    },
};
const cameraKitLensSourceFactory = Injectable(lensSourcesFactory.token, [lensSourcesFactory.token, lensesClientFactory.token, remoteConfigurationFactory.token], (lensSources, lensesClient, remoteConfig) => [
    {
        isGroupOwner(groupId) {
            return groupId === watermarksLensGroup;
        },
        loadLens() {
            return tslib_es6_awaiter(this, void 0, void 0, function* () {
                const lensMessage = yield firstValueFrom(remoteConfig.get("CAMERA_KIT_WATERMARK_LENS").pipe(map((configResults) => {
                    var _a;
                    const lensMessage = (_a = configResults.find(cameraKitLensSource_hasAnyValue)) === null || _a === void 0 ? void 0 : _a.value.anyValue.value;
                    if (!lensMessage)
                        throw new Error("Failed to read watermark Lens from COF response.");
                    return lensMessage;
                }), catchError((error) => {
                    cameraKitLensSource_logger.error(error);
                    return of(Lens.encode(Lens.fromPartial(defaultWatermarkLens)).finish());
                })));
                return new BinaryWriter().uint32(10).bytes(lensMessage).finish();
            });
        },
        loadLensGroup() {
            return tslib_es6_awaiter(this, void 0, void 0, function* () {
                throw new Error("Not implemented.");
            });
        },
    },
    ...lensSources,
    {
        isGroupOwner() {
            return true;
        },
        loadLens(lensId, groupId) {
            var _a;
            return tslib_es6_awaiter(this, void 0, void 0, function* () {
                const result = yield lensesClient.getGroupLens({ lensId, groupId });
                if (!result.ok) {
                    const error = result.unwrapErr();
                    throw new Error(`Cannot load lens lens ${lensId} from group ${groupId}. An error occured in the ` +
                        `gRPC client:\n\t[${error.status}] ${error.statusMessage}`);
                }
                const response = result.unwrap();
                if (!((_a = response.message) === null || _a === void 0 ? void 0 : _a.lens)) {
                    throw new Error(`Cannot load lens ${lensId} from group ${groupId}. The response did not contain ` +
                        `a lens.\n\t${JSON.stringify(result)} for requestId ${response.headers.get("x-request-id")}`);
                }
                return Lens.encode(response.message.lens, new BinaryWriter().uint32(10).fork()).join().finish();
            });
        },
        loadLensGroup(groupId) {
            var _a;
            return tslib_es6_awaiter(this, void 0, void 0, function* () {
                const result = yield lensesClient.getGroup({ id: groupId });
                if (!result.ok) {
                    const error = result.unwrapErr();
                    throw new Error(`Cannot load lens group ${groupId}. An error occurred in the gRPC client:\n` +
                        `\t[${error.status}] ${error.statusMessage}`);
                }
                const response = result.unwrap();
                if (!((_a = response.message) === null || _a === void 0 ? void 0 : _a.lenses)) {
                    throw new Error(`Cannot load lens group ${groupId}. The response contained no lenses ` +
                        `\n\t${JSON.stringify(response)} for requestId ${response.headers.get("x-request-id")}`);
                }
                const writer = new BinaryWriter();
                response.message.lenses.forEach((lens) => Lens.encode(lens, writer.uint32(10).fork()).join());
                return writer.finish();
            });
        },
    },
]);
//# sourceMappingURL=cameraKitLensSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/bootstrapCameraKit.js












































const bootstrapCameraKit_logger = getLogger("bootstrapCameraKit");
const nonWrappableErrors = [
    "ConfigurationError",
    "PlatformNotSupportedError",
];
function shouldWrapError(error) {
    if (error instanceof Error) {
        return !nonWrappableErrors.some((name) => error.name === name);
    }
    return true;
}
function bootstrapCameraKit(configuration, provide) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        console.info(`Camera Kit SDK: ${environment.PACKAGE_VERSION} (${lensCoreWasmVersions.version}/${lensCoreWasmVersions.buildNumber})`);
        try {
            const bootstrapLatency = new Timer("bootstrap_time");
            assert(isSafeString(configuration.apiToken), configurationError("Invalid or unsafe apiToken provided."));
            const configurationFactory = createCameraKitConfigurationFactory(configuration);
            const defaultPublicContainer = Container.provides(configurationFactory)
                .provides(userDataAccessResolverFactory)
                .provides(filePickerFactory)
                .provides(defaultFetchHandlerFactory)
                .provides(remoteMediaAssetLoaderFactory)
                .provides(lensSourcesFactory)
                .provides(remoteApiServicesFactory)
                .provides(uriHandlersFactory)
                .provides(externalMetricsSubjectFactory);
            const publicContainer = provide ? provide(defaultPublicContainer) : defaultPublicContainer;
            const telemetryContainer = Container.provides(publicContainer)
                .provides(pageVisibilityFactory)
                .provides(cameraKitServiceFetchHandlerFactory)
                .provides(requestStateEventTargetFactory)
                .provides(grpcHandlerFactory)
                .provides(metricsClientFactory)
                .provides(logEntriesFactory)
                .run(registerLogEntriesSubscriber)
                .provides(metricsEventTargetFactory)
                .provides(reportGlobalException)
                .provides(cofHandlerFactory)
                .provides(remoteConfigurationFactory)
                .provides(legalPromptFactory)
                .provides(legalStateFactory)
                .run(reportGloballyScopedMetrics)
                .run(businessEventsReporterFactory);
            telemetryContainer.get(reportGlobalException.token);
            yield assertPlatformSupported();
            const lensCore = yield telemetryContainer.provides(lensCoreFactory).get(lensCoreFactory.token);
            const container = telemetryContainer
                .provides(Injectable(lensCoreFactory.token, () => lensCore))
                .provides(lensesClientFactory)
                .provides(remoteApiSpecsClientFactory)
                .provides(cameraKitLensSourceFactory)
                .provides(lensPersistenceStoreFactory)
                .provides(deviceDependentAssetLoaderFactory)
                .provides(staticAssetLoaderFactory)
                .provides(lensAssetRepositoryFactory)
                .provides(lensRepositoryFactory)
                .provides(cameraKitFactory)
                .run(fetchWatermarkLens);
            const cameraKit = container.get(cameraKitFactory.token);
            bootstrapLatency.measure();
            container.get(metricsClientFactory.token).setOperationalMetrics(bootstrapLatency);
            return cameraKit;
        }
        catch (error) {
            if (shouldWrapError(error)) {
                error = bootstrapError("Error occurred during Camera Kit bootstrapping.", error);
            }
            bootstrapCameraKit_logger.error(error);
            throw error;
        }
    });
}
function createExtension() {
    return new PartialContainer({});
}
//# sourceMappingURL=bootstrapCameraKit.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/extensions/extensionRequestContext.js



function getExtensionRequestContext() {
    return ExtensionRequestContext.encode({
        userAgent: getCameraKitUserAgent(),
        locale: getPlatformInfo().fullLocale,
    }).finish();
}
const extensionRequestContext = getExtensionRequestContext();
//# sourceMappingURL=extensionRequestContext.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/media-sources/FunctionSource.js


const getYUVImageData = (canvas, lensCore) => __awaiter(void 0, void 0, void 0, function* () {
    const { width, height } = canvas;
    const outputBuffer = new ArrayBuffer((width * height * 3) / 2);
    yield lensCore.imageToYuvBuffer({ image: canvas, width, height, outputBuffer });
    const pixels = new Uint8ClampedArray(outputBuffer);
    return new ImageData(pixels, width, height);
});
const getRGBImageData = (output, imageReader2D) => {
    if (imageReader2D === null)
        return new ImageData(0, 0);
    imageReader2D.drawImage(output, 0, 0);
    return imageReader2D.getImageData(0, 0, output.width, output.height);
};
const getImageBitmap = (imageData, format) => __awaiter(void 0, void 0, void 0, function* () {
    switch (format) {
        case "nv12":
        case "yuv":
            if (!window.VideoFrame)
                return Promise.reject(new Error(`Cannot process frame. ImageData in ${format} is not supported by this browser.`));
            const frame = new VideoFrame(imageData.data.buffer, {
                format: "NV12",
                codedWidth: imageData.width,
                codedHeight: imageData.height,
                timestamp: 0,
            });
            return createImageBitmap(frame);
        case "rgb":
            return createImageBitmap(imageData);
    }
});
const createFunctionSource = (sourceFunction, options = {}) => {
    let width = 0;
    let height = 0;
    let shouldProcessFrame = true;
    const imageReaderCanvas = document.createElement("canvas");
    const imageReader2D = imageReaderCanvas.getContext("2d");
    const subscriber = {
        onAttach: (source, lensCore, reportError) => {
            const outputs = lensCore.getOutputCanvases();
            const output = {
                live: outputs[lensCore.CanvasType.Preview.value],
                capture: outputs[lensCore.CanvasType.Capture.value],
            };
            const processFrame = (source, lensCore, reportError) => requestAnimationFrame(() => __awaiter(void 0, void 0, void 0, function* () {
                var _a;
                if (!shouldProcessFrame)
                    return;
                try {
                    yield sourceFunction(({ format, imageData, timestampMillis }) => {
                        const frameOutput = new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
                            const inputFrame = yield getImageBitmap(imageData, format !== null && format !== void 0 ? format : "rgb");
                            if (inputFrame.width !== width || inputFrame.height !== height) {
                                width = imageReaderCanvas.width = inputFrame.width;
                                height = imageReaderCanvas.height = inputFrame.height;
                                source.setRenderSize(width, height);
                            }
                            lensCore
                                .processFrame({ inputFrame, timestampMillis })
                                .then(() => __awaiter(void 0, void 0, void 0, function* () {
                                inputFrame.close();
                                switch (format !== null && format !== void 0 ? format : "rgb") {
                                    case "nv12":
                                    case "yuv":
                                        const [live, capture] = yield Promise.all([
                                            getYUVImageData(output.live, lensCore),
                                            getYUVImageData(output.capture, lensCore),
                                        ]).catch((error) => {
                                            reject(error);
                                            return [undefined, undefined];
                                        });
                                        if (!live || !capture)
                                            return;
                                        return resolve({ live, capture });
                                    case "rgb":
                                        return resolve({
                                            live: getRGBImageData(output.live, imageReader2D),
                                            capture: getRGBImageData(output.capture, imageReader2D),
                                        });
                                }
                            }))
                                .catch((error) => {
                                inputFrame.close();
                                reject(error);
                            });
                        }));
                        frameOutput.finally(() => processFrame(source, lensCore, reportError));
                        return frameOutput;
                    });
                }
                catch (error) {
                    reportError(new Error("Failure to process frame, which was not handled by the provided " +
                        `MediaSourceFunction ${(_a = sourceFunction.name) !== null && _a !== void 0 ? _a : "anonymous"}.`, { cause: error }));
                }
            }));
            processFrame(source, lensCore, reportError);
        },
        onDetach: () => {
            shouldProcessFrame = false;
        },
    };
    return new CameraKitSource({ useManualFrameProcessing: true }, subscriber, options);
};
//# sourceMappingURL=FunctionSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/media-sources/ImageSource.js

function createImageSource(image, options = {}) {
    return new CameraKitSource({
        media: image,
    }, {}, options);
}
//# sourceMappingURL=ImageSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/dist/index.js


































//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./src/main.js


//FLIP CAMERA EXAMPLE


const liveRenderTarget = document.getElementById('canvas');
const flipCamera = document.getElementById('flip');
const intro = document.getElementById('intro-bg');
var firstTime = true;
document.body.addEventListener('click', () => {
    if (firstTime) {
        firstTime = false;
        if (typeof DeviceMotionEvent.requestPermission === 'function') DeviceMotionEvent.requestPermission();
        intro.style.display = 'none';
        init();
    }
}, true);


let isBackFacing = true;
let mediaStream;

async function init() {
    const cameraKit = await bootstrapCameraKit({
        // apiToken: 'eyJhbGciOiJIUzI1NiIsImtpZCI6IkNhbnZhc1MyU0hNQUNQcm9kIiwidHlwIjoiSldUIn0.eyJhdWQiOiJjYW52YXMtY2FudmFzYXBpIiwiaXNzIjoiY2FudmFzLXMyc3Rva2VuIiwibmJmIjoxNjk4MDU3NzAyLCJzdWIiOiI0MDUyY2RlNC02YzMzLTRkM2UtYTJjNC0yNzllYzc1M2VmOWR-U1RBR0lOR341MTY4YzVmNC1kYWVkLTQ1N2ItOGJmYy01Y2JhODkwOWU4OTgifQ.b0Z-TegYa2Sg-lZy_8XoPw7f_iz7eEC5BtzYooyL5K4',
        apiToken: 'eyJhbGciOiJIUzI1NiIsImtpZCI6IkNhbnZhc1MyU0hNQUNQcm9kIiwidHlwIjoiSldUIn0.eyJhdWQiOiJjYW52YXMtY2FudmFzYXBpIiwiaXNzIjoiY2FudmFzLXMyc3Rva2VuIiwibmJmIjoxNzM4MjM2Njg5LCJzdWIiOiJmYWMzYWZjOS0zOTEyLTRlNTUtYTdiZS03MjJlOGRmYWY4ZjV-UFJPRFVDVElPTn5lOGQ0OTM1NS00YmNlLTRiYWEtODkzNC1lMWNlNmU0ZDM5M2IifQ.6sZB_6aFPL8OW-UO3Y37P7Rev7mzjS9IhNRFk7NelBI',
    });

    const session = await cameraKit.createSession({ liveRenderTarget });
    const { lenses } = await cameraKit.lensRepository.loadLensGroups([
        'f7f4e367-f4b3-4de5-8e81-e9c842f2bf0b',
    ]);

    session.applyLens(lenses[0]);

    bindFlipCamera(session);
}

function bindFlipCamera(session) {
    flipCamera.style.cursor = 'pointer';

    flipCamera.addEventListener('click', () => {
        updateCamera(session);
    });

    updateCamera(session);
}

async function updateCamera(session) {

    // flipCamera.innerText = isBackFacing
    // ? 'Switch to Front Camera'
    // : 'Switch to Back Camera';

    if (mediaStream) {
        session.pause();
        mediaStream.getVideoTracks()[0].stop();
    }

    mediaStream = await navigator.mediaDevices.getUserMedia({
        video: {
            facingMode: isBackFacing ? 'environment' : 'user',
        },
    });

    const source = createMediaStreamSource(mediaStream, {
        // NOTE: This is important for world facing experiences
        cameraType: isBackFacing ? 'back' : 'front',
    });

    await session.setSource(source);

    if (!isBackFacing) {
        source.setTransform(Transform2D.MirrorX);
    }

    session.play();
    isBackFacing = !isBackFacing;
}

// init();
})();

/******/ })()
;
import { isEmptyString } from "../../common/typeguards";
import { RemoteEndpoint_HttpRequestMethod } from "../../generated-proto/pb_schema/camera_kit/v3/remote_api_spec";
import { RemoteParameter_ParameterLocation } from "../../generated-proto/pb_schema/camera_kit/v3/remote_api_spec";
import { namedError } from "../../namedErrors";
export const requestValidationErrorName = "RequestValidationError";
export const requestValidationError = namedError(requestValidationErrorName);
export function validateRequest(request, specs) {
    var _a, _b, _c;
    for (const spec of specs) {
        const url = `${spec.tlsRequired ? "https://" : "http://"}${spec.host}`;
        if (!request.uri.startsWith(url))
            continue;
        const path = ((_a = request.uri.split(url)[1]) !== null && _a !== void 0 ? _a : "").replace(/^\//, "").replace(/\/$/, "");
        for (const endpoint of spec.endpoints) {
            const endpointPath = endpoint.path.replace(/^\//, "").replace(/\/$/, "");
            if (!path.startsWith(endpointPath))
                continue;
            const method = (_b = RemoteEndpoint_HttpRequestMethod[request.method]) !== null && _b !== void 0 ? _b : RemoteEndpoint_HttpRequestMethod.UNRECOGNIZED;
            if (!endpoint.methods.includes(method))
                continue;
            validatePath((_c = path.split(endpointPath)[1]) !== null && _c !== void 0 ? _c : "", endpoint.parameters);
            validateHeaders(request.metadata, endpoint.parameters);
            validateQuery(request.uri, endpoint.parameters);
            return;
        }
    }
    throw requestValidationError("The request does not match any of the Remote API specifications.");
}
export function validatePath(path, parameters) {
    const pathComponents = path.split("/").filter(Boolean);
    let paramIndex = 0;
    for (const param of parameters) {
        if (param.location !== RemoteParameter_ParameterLocation.PATH)
            continue;
        const paramNameComponent = pathComponents[paramIndex];
        const paramValueComponent = pathComponents[paramIndex + 1];
        if (param.constant) {
            if (paramNameComponent === param.name && paramValueComponent === param.defaultValue) {
                paramIndex += 2;
            }
            else {
                throw requestValidationError(`Expected constant parameter '${param.name}' with value '${param.defaultValue}' ` +
                    `at position ${paramIndex}, but found '${paramNameComponent}' and '${paramValueComponent}'.`);
            }
        }
        else if (param.optional) {
            if (paramNameComponent === param.name) {
                paramIndex += 2;
            }
        }
        else {
            if (paramNameComponent === param.name && paramValueComponent !== undefined) {
                paramIndex += 2;
            }
            else {
                throw requestValidationError(`Expected parameter '${param.name}' with a value at position ${paramIndex}, ` +
                    `but found '${paramNameComponent}' and '${paramValueComponent}'.`);
            }
        }
    }
    if (paramIndex !== pathComponents.length) {
        const invalidPath = pathComponents.slice(paramIndex).join("/");
        throw requestValidationError(`Unexpected extra path components starting at position ${paramIndex}: '${invalidPath}'.`);
    }
}
export function validateHeaders(headers, parameters) {
    for (const param of parameters) {
        if (param.location !== RemoteParameter_ParameterLocation.HEADER)
            continue;
        const headerValue = headers[param.name];
        if (param.constant) {
            if (headerValue !== param.defaultValue) {
                throw requestValidationError(`Expected constant header '${param.name}' with value '${param.defaultValue}', ` +
                    `but found '${headerValue !== null && headerValue !== void 0 ? headerValue : "undefined"}'.`);
            }
        }
        else if (param.optional) {
            if (headerValue != undefined && isEmptyString(headerValue)) {
                throw requestValidationError(`Header '${param.name}' is present but empty. If provided, it should not be empty.`);
            }
        }
        else {
            if (headerValue == undefined || isEmptyString(headerValue)) {
                throw requestValidationError(`Required header '${param.name}' is missing or empty.`);
            }
        }
    }
}
export function validateQuery(uri, parameters) {
    const url = new URL(uri);
    const queryParams = new URLSearchParams(url.search);
    for (const param of parameters) {
        if (param.location !== RemoteParameter_ParameterLocation.QUERY)
            continue;
        const paramValue = queryParams.get(param.name);
        if (param.constant) {
            if (paramValue !== param.defaultValue) {
                throw requestValidationError(`Expected constant query parameter '${param.name}' with value '${param.defaultValue}', ` +
                    `but found '${paramValue !== null && paramValue !== void 0 ? paramValue : "undefined"}'.`);
            }
        }
        else if (param.optional) {
            if (paramValue != undefined && isEmptyString(paramValue)) {
                throw requestValidationError(`Optional query parameter '${param.name}' is present but empty. ` +
                    `If provided, it should not be empty.`);
            }
        }
        else {
            if (paramValue == undefined || isEmptyString(paramValue)) {
                throw requestValidationError(`Required query parameter '${param.name}' is missing or empty.`);
            }
        }
    }
}
//# sourceMappingURL=httpValidators.js.map